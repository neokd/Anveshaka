[
    {
        "url": "https://news.google.com/articles/CBMiowFodHRwczovL3d3dy5tYXJrdGVjaHBvc3QuY29tLzIwMjMvMDMvMTkvbWl0LXJlc2VhcmNoZXJzLWRldmVsb3BlZC1jb2Rvbi1hLXB5dGhvbi1iYXNlZC1jb21waWxlci10aGF0LWhlbHBzLWNyZWF0ZS1uZXctZG9tYWluLXNwZWNpZmljLWxhbmd1YWdlcy1kc2xzLXdpdGhpbi1weXRob24v0gGnAWh0dHBzOi8vd3d3Lm1hcmt0ZWNocG9zdC5jb20vMjAyMy8wMy8xOS9taXQtcmVzZWFyY2hlcnMtZGV2ZWxvcGVkLWNvZG9uLWEtcHl0aG9uLWJhc2VkLWNvbXBpbGVyLXRoYXQtaGVscHMtY3JlYXRlLW5ldy1kb21haW4tc3BlY2lmaWMtbGFuZ3VhZ2VzLWRzbHMtd2l0aGluLXB5dGhvbi8_YW1w?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "MIT Researchers Developed Codon: A Python-Based Compiler That Helps Create New Domain-Specific Languages DSLs Within Python",
        "description": "Reddit Vote Flip Share 0 Shares\n\nDomain Specific Languages, or DSLs, are a class of programming languages that provide a high level of abstraction and use certain concepts and rules suitable for a specific set of problems. Examples of DSLs are HTML, which is appropriate for web page layouts, and SQL, which is used for databases. Compared to general-purpose languages like C, C++, and Java, DSLs are far less sophisticated as they are often intended not to be used by software developers but by non-traditional programmers who are fluent in the domain the DSL is made for. Moreover, DSLs are typically created in close collaboration with the professionals in the industry for whom they are being made. But past experiences have shown that implementing DSLs is quite a cumbersome task. To overcome this, researchers often look to integrate DSLs in general-purpose host languages, resulting in embedded DSLs. However, researchers are often puzzled by the question: which language to embed their DSL in order to achieve the highest level of performance?\n\nIt is a common past trend that low-level languages such as C and C++ provide better performance as a host than high-level languages like Python. But because of their simplicity and versatility, high-level languages are now more common in many domains. Python, the programming language of choice for approximately 15.7 million developers, is the best illustration of this. The language\u2019s straightforward syntax and easy usage make it one of the most accessible programming languages currently. As a result, in order to bring high-performing DSLs to the extensive Python community, a team of researchers from the Computer Science and Artificial Intelligence Laboratory (CSAIL) at MIT developed Codon, a compiler and DSL framework built on top of optimized Python codebase that helps run Python code more efficiently while leaving sufficient room for customization and adaptation to various domains. The majority of Codon\u2019s syntax is taken from Python 3, which enables programmers to design new DSLs using Python orders of magnitude quicker and with less runtime overhead, making it competitive with some of the fastest languages like C/C++. This MIT research was also presented at the prestigious ACM SIGPLAN 2023 International Conference on Compiler Construction and is supported by Numanagi\u0107\u2019s NSERC Discovery Grant, the Canada Research Chair program, the U.S. Defense Advance Research Projects Agency, and the U.S. National Institutes of Health.\n\nCodon was developed after careful consideration. Based on the studies conducted by MIT researchers, they observed that people who use DSLs the most often hail from a non-technical background and do not wish to learn a new language or tool most of the time. So, they developed the ground-breaking concept of incorporating Python syntax and libraries into a brand-new system created from scratch. From the user\u2019s perspective, the entire procedure is unchanged. They have to write Python code as before but achieve orders of magnitude of speedups (approximately 10 to 100 times) in return. As an interpreted language, wherein instructions are directly executed during runtime and not compiled earlier, significant efforts have been made to make the language faster. However, these efforts were in the \u201ctop-down\u201d direction of adding various optimizations or \u201cjust-in-time\u201d compilation techniques over existing Python implementation. In contrast, the MIT researchers moved forward with a one-of-a-kind \u201cbottom-up\u201d approach, concentrating more on the Python infrastructure to provide more flexibility as opposed to limitations.\n\nOne of the most important first steps in a compiler is \u201ctype-checking,\u201d which ensures that each construct, such as a variable or function, has the appropriate data type for the context in which it is being used. Being an interpreted language, all these checks in Python are performed when the program is run. This is one of the reasons why the language is so slow. By expanding on earlier research on type checking done in advance, the researchers developed certain advancements in Codon in this domain. Codon uses a bidirectional static type-checking mechanism that avoids any runtime type deduction, thus removing the cost of significant overhead that comes with data types in Python. Adding many optimization implementations is among the next set of important steps. Codon uses a brand-new intermediate representation called the Codon Intermediate Representation (CIR) to make it simple to include domain-specific optimizations and analytics. The resulting executable file generated by the compiler runs at a speed comparable to that of C or C++ or even faster once domain-specific optimizations are applied.\n\nAs a part of their study, the researchers thoroughly evaluated several compiler extensions and DSLs for Codon targeting various domains ranging from bioinformatics and quantitive finance to secure multi-party computation and parallel programming. In one of the tests focused on genomics, the researchers utilized Codon to compile roughly ten frequently used Python-based genomics applications. The results showed that the compiler could often approach performance typically only seen with low-level languages, with speedups of 5 to 10 times above the original hand-optimized implementations. Formerly, when users encountered performance issues with their Python-based apps, they had two choices: completely rebuild the software in a language like C, or rewrite it using a C-implemented library. Now, when it comes to Python applications, these individuals can use Codon to obtain the same degree of performance as attained by rewriting the application in C.\n\nCodon is being utilized in a number of fields, including deep learning, bioinformatics, and quantitative finance. Exaloop, Inc., a startup aimed at popularizing Codon, currently maintains the compiler. Although Codon achieves impressive performance speedups, it continues to have certain shortcomings because the domain-extensive compiler still needs to support all Python capabilities. Runtime polymorphism, runtime reflection, and others are some of them. The Codon team is also working hard to increase the compiler\u2019s Python library coverage in an effort to make it as similar to Python as feasible. All Codon-related code is currently publicly available on GitHub.\n\nCheck out the Paper and Code. All Credit For This Research Goes To the Researchers on This Project. Also, don\u2019t forget to join our 16k+ ML SubReddit, Discord Channel, and Email Newsletter, where we share the latest AI research news, cool AI projects, and more.",
        "summary": "To overcome this, researchers often look to integrate DSLs in general-purpose host languages, resulting in embedded DSLs.\nIt is a common past trend that low-level languages such as C and C++ provide better performance as a host than high-level languages like Python.\nBy expanding on earlier research on type checking done in advance, the researchers developed certain advancements in Codon in this domain.\nCodon uses a brand-new intermediate representation called the Codon Intermediate Representation (CIR) to make it simple to include domain-specific optimizations and analytics.\nIn one of the tests focused on genomics, the researchers utilized Codon to compile roughly ten frequently used Python-based genomics applications.",
        "keywords": [
            "dsls",
            "domainspecific",
            "python",
            "codon",
            "research",
            "pythonbased",
            "create",
            "mit",
            "languages",
            "helps",
            "c",
            "compiler",
            "developed",
            "language",
            "runtime",
            "researchers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiMWh0dHBzOi8vbWFzaGFibGUuY29tL3VrL2RlYWxzL2ZyZWUtcHl0aG9uLWNvdXJzZXPSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "10 of the best Python courses you can take for free this week",
        "description": "Deal pricing and availability subject to change after time of publication. Learn more about how we select deals\n\nTL;DR: You can find a wide range of beginner-friendly Python courses(Opens in a new tab) for free on Udemy.\n\nPython is a massively popular programming language that reads like English, making it a beginner-friendly option for anyone looking to take their first steps towards a career in coding. If you're interested in learning all about this language, your first stop should be Udemy.\n\nYou can find a wide range of beginner-friendly Python courses(Opens in a new tab) for free on Udemy. We've checked out the entire range of free online coding and programming courses, and lined up a selection of standout beginner-friendly options to get you started. We've always got your back.\n\nThese are the best Python courses you can take for free this week:\n\nThere must be a catch, right? Free courses do not include things like a certificate of completion or direct messaging with the instructor, but that shouldn't hold you back. You can still learn at your own pace with unlimited access to all the video content, and you don't even need a voucher code to enroll for free. If you really need a certificate to stick on your CV, you can upgrade for a fee.\n\nFind the best free online Python courses(Opens in a new tab) on Udemy.",
        "summary": "Learn more about how we select dealsTL;DR: You can find a wide range of beginner-friendly Python courses(Opens in a new tab) for free on Udemy.\nYou can find a wide range of beginner-friendly Python courses(Opens in a new tab) for free on Udemy.\nThese are the best Python courses you can take for free this week:There must be a catch, right?\nFree courses do not include things like a certificate of completion or direct messaging with the instructor, but that shouldn't hold you back.\nFind the best free online Python courses(Opens in a new tab) on Udemy.",
        "keywords": [
            "beginnerfriendly",
            "tab",
            "python",
            "wide",
            "best",
            "week",
            "courses",
            "range",
            "coursesopens",
            "udemy",
            "weve",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiRWh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcnVuLXB5dGhvbi1jb2RlLWNvbmN1cnJlbnRseS11c2luZy10aHJlYWRzL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiW2h0dHBzOi8vcGV0YXBpeGVsLmNvbS8yMDIzLzAzLzIwL21hbi1pcy1zYXZhZ2VseS1hdHRhY2tlZC13aGlsZS10YWtpbmctYS1waG90by1vZi1hLXB5dGhvbi_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Man is Savagely Attacked While Taking a Photo of a Python",
        "description": "A man was brutally attacked by a snake after he got too close to it while trying to take a photograph.\n\nJoey Zayne was left covered in blood after the python bit him on the head while he was out on a walk in Queensland, Australia.\n\nAfter getting an up-close photo of the snake, Zayne was lunged at and bitten by the defensive python, which left fang marks on the side of his skull.\n\nThe Australian got a selfie of himself afterward showing the shocking amount of blood the snake had drawn.\n\n\u201cI didn\u2019t see it coming. It was crazy,\u201d Zayne explains. \u201cI had no idea that it was that close to my face and then I started bleeding profusely.\u201d\n\nZayne says that he was on the Behana Gorge trail when a couple pointed out that the large reptile was in a tree above which caught his attention.\n\n\u201cI was at a waterfall and we were walking back up and there was a couple in front of us, they pointed out a snake above us so, we stopped and had a look,\u201d he says\n\n\u201cI saw it and took some photos. Then when I went back down to grab a couple of bottles I dropped.\u201d\n\nAfter Zayne returned from clearing up his garbage, he says he approached the snake again to take more photos but that\u2019s when it struck him.\n\n\u201cEveryone\u2019s saying all these comments \u2018You harassed the snake\u2019, but I didn\u2019t do a Steve Irwin,\u201d he says. \u201cI was calm and casual like I always am with the snakes \u2014 and it decided to go me.\u201d\n\nSnakes are Best Left Alone\n\nDavid Walton, a snake removal expert, says that snakes won\u2019t usually attack unless given a good reason to.\n\n\u201cIf you see a snake, you know, just give him a wide berth,\u201d Walton tells 7 News.\n\n\u201cSnakes do not attack or bite for no reason. They have to really feel the need to give a defensive response in a vulnerable situation.\u201d\n\nWhile pythons are powerful snakes they are not venomous, unlike other serpent species in Australia. But as Zayne found out, they can still leave their mark.\n\nIn 2019, Ronald Zimmerman wrote a guide for PetaPixel on how to photograph reptiles safely.\n\nImage credits: All photos by Compass Media/Joey Zayne",
        "summary": "A man was brutally attacked by a snake after he got too close to it while trying to take a photograph.\nJoey Zayne was left covered in blood after the python bit him on the head while he was out on a walk in Queensland, Australia.\nAfter getting an up-close photo of the snake, Zayne was lunged at and bitten by the defensive python, which left fang marks on the side of his skull.\nThe Australian got a selfie of himself afterward showing the shocking amount of blood the snake had drawn.\n\u201cIf you see a snake, you know, just give him a wide berth,\u201d Walton tells 7 News.",
        "keywords": [
            "taking",
            "attacked",
            "snakes",
            "reason",
            "walton",
            "python",
            "savagely",
            "snake",
            "photos",
            "man",
            "left",
            "couple",
            "pointed",
            "zayne"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMirAFodHRwczovL3d3dy5tYXJrdGVjaHBvc3QuY29tLzIwMjMvMDMvMTcvbWVldC12aXBlcmdwdC1hLXB5dGhvbi1mcmFtZXdvcmstdGhhdC1jb21iaW5lcy12aXNpb24tYW5kLWxhbmd1YWdlLW1vZGVscy11c2luZy1jb2RlLWdlbmVyYXRpb24tdG8tYWNoaWV2ZS1zdGF0ZS1vZi10aGUtYXJ0LXJlc3VsdHMv0gGwAWh0dHBzOi8vd3d3Lm1hcmt0ZWNocG9zdC5jb20vMjAyMy8wMy8xNy9tZWV0LXZpcGVyZ3B0LWEtcHl0aG9uLWZyYW1ld29yay10aGF0LWNvbWJpbmVzLXZpc2lvbi1hbmQtbGFuZ3VhZ2UtbW9kZWxzLXVzaW5nLWNvZGUtZ2VuZXJhdGlvbi10by1hY2hpZXZlLXN0YXRlLW9mLXRoZS1hcnQtcmVzdWx0cy8_YW1w?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Meet ViperGPT: A Python Framework that Combines Vision and Language Models Using Code Generation to Achieve State-of-the-Art Results",
        "description": "The groundbreaking work of Neural Module Networks in prior years aimed to break down jobs into simpler modules. Through training from beginning to finish using modules that were reconfigured for various issues, each module would learn its true purpose and become reusable. Nevertheless, it took a lot of work to use this strategy in the actual world due to several problems. Program development, in particular, needed reinforcement learning from scratch or relied on hand-tuned natural language parsers, making them challenging to optimize. Program creation was severely domain-restricted in each scenario. Training became much more difficult due to learning the perceptual models alongside the program generator, frequently failing to provide the desired modular structure.\n\nAs an example let us take some prompts, How many muffins can each child eat for it to be fair? (see Figure 1 (top)) Find the children and the muffins in the image, count how many of each there are, and then decide to divide using the logic that \u201cfair\u201d implies an equitable split. To comprehend the visual environment, it is common for people to compose a mix of many phases. Yet, end-to-end models, which do not naturally use this compositional reasoning, continue to be the dominating strategy in computer vision. Although the discipline has made significant progress on specific tasks like object identification and depth estimation, end-to-end methods to complicated tasks still need to learn to implicitly complete every job during a neural network\u2019s forward run.\n\nFigure 1: ViperGPT creates a programme from a visual input and a query, then runs it through the Python interpreter to produce the result. This diagram displays the created code as well as the outcomes of intermediate variables used during execution. ViperGPT generates replies for open-world inquiries that are both accurate and understandable by assembling pretrained modules.\n\nThis fails to take advantage of the advancements in fundamental vision tasks at many levels. Still, it ignores that computers can readily do mathematical operations (such as division) without machine learning. They can\u2019t rely on neuronal models to systematically generalize to varying muffin or child counts. End-to-end models also result in fundamentally opaque judgments since it is impossible to verify the outcome of each phase to identify a failure. This method becomes progressively unworkable as models get more data- and are computationally hungry. They would aim to recombine their current models in novel ways to accomplish new tasks without extra training. Why can\u2019t they design similar modular solutions for more difficult tasks?\n\nIn this study, researchers from Columbia University introduce ViperGPT1, a framework that circumvents these constraints by utilizing big language models that generate code (like the GPT-3 Codex) to nimbly build vision models on any textual query that specifies the job. For each question, it makes specialized programs that accept photos or videos as arguments and deliver the answer to that image or video query. They demonstrate that creating these applications only requires giving Codex an API exposing different visual features (such as locate and compute depth), just as one could provide for an engineer. The model can reason about using these functions and constructing the necessary logic thanks to its earlier training in code.\n\nTheir findings show that this straightforward strategy offers exceptional zero-shot performance (i.e., without training on task-specific images). Their specific method has many advantages:\n\nIt can be interpreted since all the stages are clearly defined as function calls in the code with visible intermediate values. It is logical because it explicitly employs the logical and mathematical operations built into Python. It is adaptable since it can easily include any vision or language module by adding only the corresponding module\u2019s definition to the API. Compositional, breaking down activities into smaller subtasks that are completed step-by-step. Adaptable to advancements in the area since enhancements to any of the employed modules will directly increase the performance of their technique. It does not need retraining (or finetuning) a new model for each recent activity. It is generic since it combines all tasks into a single system.\n\nSo, their contributions are as follows:\n\nUsing the advantages listed above, they provide a straightforward framework for handling sophisticated visual inquiries by incorporating code-generation models into vision with an API and the Python interpreter.\n\nThey get cutting-edge zero-shot scores on tasks involving visual grounding, image question answering, and video question responding, demonstrating that this interpretability enhances rather than detracts from performance.\n\nTo encourage study in this area, they provide a Python library that enables the quick creation of programs for visual tasks and will be open-sourced after publication.\n\nCheck out the Paper, Code and Project. All Credit For This Research Goes To the Researchers on This Project. Also, don\u2019t forget to join our 16k+ ML SubReddit, Discord Channel, and Email Newsletter, where we share the latest AI research news, cool AI projects, and more.",
        "summary": "Through training from beginning to finish using modules that were reconfigured for various issues, each module would learn its true purpose and become reusable.\nYet, end-to-end models, which do not naturally use this compositional reasoning, continue to be the dominating strategy in computer vision.\nThis fails to take advantage of the advancements in fundamental vision tasks at many levels.\nThe model can reason about using these functions and constructing the necessary logic thanks to its earlier training in code.\nTo encourage study in this area, they provide a Python library that enables the quick creation of programs for visual tasks and will be open-sourced after publication.",
        "keywords": [
            "training",
            "vision",
            "stateoftheart",
            "visual",
            "models",
            "tasks",
            "code",
            "modules",
            "generation",
            "vipergpt",
            "python",
            "provide",
            "using",
            "meet",
            "language",
            "results"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiXGh0dHBzOi8vbmV3cy5taXQuZWR1LzIwMjMvY29kb24tcHl0aG9uLWJhc2VkLWNvbXBpbGVyLWFjaGlldmUtb3JkZXJzLW1hZ25pdHVkZS1zcGVlZHVwcy0wMzE00gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python-based compiler achieves orders-of-magnitude speedups",
        "description": "In 2018, the Economist published an in-depth piece on the programming language Python. \u201cIn the past 12 months,\u201d the article said, \u201cGoogle users in America have searched for Python more often than for Kim Kardashian.\u201d Reality TV stars, be wary.\n\nThe high-level language has earned its popularity, too, with legions of users flocking daily to the language for its ease of use due in part to its simple and easy-to-learn syntax. This led researchers from MIT's Computer Science and Artificial Intelligence Laboratory (CSAIL) and elsewhere to make a tool to help run Python code more efficiently and effectively while allowing for customization and adaptation to different needs and contexts. The compiler, which is a software tool that translates source code into machine code that can be executed by a computer\u2019s processor, lets developers create new domain-specific languages (DSLs) within Python \u2014 which is typically orders of magnitude slower than languages like C or C++ \u2014 while still getting the performance benefits of those other languages.\n\nDSLs are specialized languages tailored to specific tasks that can be much easier to work with than general-purpose programming languages. However, creating a new DSL from scratch can be a bit of a headache.\n\n\u201cWe realized that people don\u2019t necessarily want to learn a new language, or a new tool, especially those who are nontechnical. So we thought, let\u2019s take Python syntax, semantics, and libraries and incorporate them into a new system built from the ground up,\u201d says Ariya Shajii SM \u201918, PhD \u201921, lead author on a new paper about the team's new system, Codon. \u201cThe user simply writes Python like they\u2019re used to, without having to worry about data types or performance, which we handle automatically \u2014 and the result is that their code runs 10 to 100 times faster than regular Python. Codon is already being used commercially in fields like quantitative finance, bioinformatics, and deep learning.\u201d\n\nThe team put Codon through some rigorous testing, and it punched above its weight. Specifically, they took roughly 10 commonly used genomics applications written in Python and compiled them using Codon, and achieved five to 10 times speedups over the original hand-optimized implementations. Besides genomics, they explored applications in quantitative finance, which also handles big datasets and uses Python heavily. The Codon platform also has a parallel backend that lets users write Python code that can be explicitly compiled for GPUs or multiple cores, tasks which have traditionally required low-level programming expertise.\n\nPythons on a plane\n\nUnlike languages like C and C++, which both come with a compiler that optimizes the generated code to improve its performance, Python is an interpreted language. There\u2019s been a lot of effort put into trying to make Python faster, which the team says usually comes in the form of a \u201ctop-down approach,\u201d which means taking the vanilla Python implementation and incorporating various optimizations or \u201cjust-in-time\u201d compilation techniques \u2014 a method by which performance-critical pieces of the code are compiled during execution. These approaches excel at preserving backwards-compatibility, but drastically limit the kinds of speedups you can attain.\n\n\u201cWe took more of a bottom-up approach, where we implemented everything from the ground up, which came with limitations, but a lot more flexibility,\u201d says Shajii. \u201cSo, for example, we can\u2019t support certain dynamic features, but we can play with optimizations and other static compilation techniques that you couldn\u2019t do starting with the standard Python implementation. That was the key difference \u2014 not much effort had been put into a bottom-up approach, where large parts of the Python infrastructure are built from scratch.\u201d\n\nThe first piece of the puzzle is feeding the compiler a piece of Python code. One of the critical first steps that is performed is called \u201ctype checking,\u201d a process where, in your program, you figure out the different data types of each variable or function. For example, some could be integers, some could be strings, and some could be floating-point numbers \u2014 that\u2019s something that regular Python doesn\u2019t do. In regular Python, you have to deal with all that information when running the program, which is one of the factors making it so slow. Part of the innovation with Codon is that the tool does this type checking before running the program. That lets the compiler convert the code to native machine code, which avoids all of the overhead that Python has in dealing with data types at runtime.\n\n\u201cPython is the language of choice for domain experts that are not programming experts. If they write a program that gets popular, and many people start using it and run larger and larger datasets, then the lack of performance of Python becomes a critical barrier to success,\u201d says Saman Amarasinghe, MIT professor of electrical engineering and computer science and CSAIL principal investigator. \u201cInstead of needing to rewrite the program using a C-implemented library like NumPy or totally rewrite in a language like C, Codon can use the same Python implementation and give the same performance you'll get by rewriting in C. Thus, I believe Codon is the easiest path forward for successful Python applications that have hit a limit due to lack of performance.\u201d\n\nFaster than the speed of C\n\nThe other piece of the puzzle is the optimizations in the compiler. Working with the genomics plugin, for example, will perform its own set of optimizations that are specific to that computing domain, which involves working with genomic sequences and other biological data, for example. The result is an executable file that runs at the speed of C or C++, or even faster once domain-specific optimizations are applied.\n\nWhile Codon currently covers a sizable subset of Python, it still needs to incorporate several dynamic features and expand its Python library coverage. The Codon team is working hard to close the gap with Python even further, and looks forward to releasing several new features over the coming months. Codon is currently publicly available on GitHub.\n\nIn addition to Amarasinghe, Shajii wrote the paper alongside Gabriel Ramirez \u201921, MEng \u201921, a former CSAIL student and current Jump Trading software engineer; Jessica Ray SM \u201918, an associate research staff member at MIT Lincoln Laboratory; Bonnie Berger, MIT professor of mathematics and of electrical engineering and computer science and a CSAIL principal investigator; Haris Smajlovi\u0107, graduate student at the University of Victoria; and Ibrahim Numanagi\u0107, a University of Victoria assistant professor in Computer Science and Canada Research Chair.\n\nThe research was presented at the ACM SIGPLAN 2023 International Conference on Compiler Construction. It was supported by Numanagi\u0107\u2019s NSERC Discovery Grant, Canada Research Chair program, the U.S. Defense Advance Research Projects Agency, and the U.S. National Institutes of Health. Codon is currently maintained by Exaloop, Inc., a startup founded by some of the authors to popularize Codon.",
        "summary": "In 2018, the Economist published an in-depth piece on the programming language Python.\nPythons on a planeUnlike languages like C and C++, which both come with a compiler that optimizes the generated code to improve its performance, Python is an interpreted language.\nThat lets the compiler convert the code to native machine code, which avoids all of the overhead that Python has in dealing with data types at runtime.\nThe result is an executable file that runs at the speed of C or C++, or even faster once domain-specific optimizations are applied.\nThe research was presented at the ACM SIGPLAN 2023 International Conference on Compiler Construction.",
        "keywords": [
            "ordersofmagnitude",
            "code",
            "program",
            "speedups",
            "performance",
            "python",
            "codon",
            "research",
            "pythonbased",
            "optimizations",
            "c",
            "compiler",
            "achieves",
            "language"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiPWh0dHBzOi8vd3d3LnRoZXJlZ2lzdGVyLmNvbS8yMDIzLzAzLzExL3B5dGhvbl9jb2Rvbl9jb21waWxlci_SAUFodHRwczovL3d3dy50aGVyZWdpc3Rlci5jb20vQU1QLzIwMjMvMDMvMTEvcHl0aG9uX2NvZG9uX2NvbXBpbGVyLw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Codon: Python compiler takes scripts to C/C++ speeds",
        "description": "Python is among the one of the most popular programming languages, yet it's generally not the first choice when speed is required.\n\nWhile it can be optimized for better performance, Python is prized for qualities other than speed, such as readability, a manageable learning curve, an expansive ecosystem, and utility in both academia and business.\n\nMIT computer scientists and their colleagues, however, believe they've found a way to have it all \u2013 the approachability of a high-level language with the speed of a low-level language. They've developed a Python compiler called Codon that turns Python code into native machine code without a runtime performance hit.\n\n\"Typical speedups over Python are on the order of 10-100x or more, on a single thread,\" the Codon repo declares. \"Codon's performance is typically on par with (and sometimes better than) that of C/C++.\"\n\nThere's a hitch, of course, other than its delayed-open-source license. Codon implements most but not all of the Python language. Some Python modules have not been incorporated into Codon. And it omits features such as dynamic type manipulation and runtime reflection that make code more difficult to analyze and optimize. In doing so, it can rely on a statically-typing compiler engine that \u2013 in conjunction with other innovations such as a more optimizable and flexible intermediate representation (IR) [PDF] \u2013 generates faster code.\n\nCodon was originally developed as a framework for creating high-performance domain specific languages (DSLs) in Python. DSLs are languages focused on a specific purpose, as opposed to a general purpose programming language like Python or C. Examples of DSLs include CSS, SQL, and the ancient runes make understands.\n\nDerived from Seq, a DSL for bioinformatics and genetics, Codon has grown into a language compiler that's largely compatible with Python 3. As described in a paper [PDF] provided to The Register in advance of its planned March 16 release, \"Codon: A Compiler for High-Performance Pythonic Applications and DSLs,\" the toolchain \"enables the development of DSLs that share Python\u2019s syntax and semantics together with added domain-specific features and IR optimizations.\"\n\nThe authors of the paper \u2013 Ariya Shajii (Exaloop), Gabriel Ramirez (MIT CSAIL), Haris Smajlovi\u0107 (University of Victoria, Canada), Jessica Ray (MIT CSAIL), Bonnie Berger (MIT CSAIL) Saman Amarasinghe (MIT CSAIL), and Ibrahim Numanagi\u0107 (University of Victoria) \u2013 say that because Codon can output native machine code without any Python runtime overhead, they're able to achieve C-like performance with Python scripts.\n\n\"Unlike other performance-oriented Python implementations (such as PyPy or Numba), Codon is built from the ground up as a standalone system that compiles ahead-of-time to a static executable and is not tied to an existing Python runtime (e.g., CPython or RPython) for execution,\" the paper says. \"As a result, Codon can achieve better performance and overcome runtime-specific issues such as the global interpreter lock.\"\n\nInstead of needing to ... totally rewrite in a language like C, Codon can use the same Python implementation and give the same performance you'll get by rewriting in C\n\nThe authors discuss various Codon-based, high-performance DSLs designed for bioinformatics, data compression, and parallel programming that take advantage of Codon's compiler infrastructure. But Codon can also accelerate standard Python programs substantially, though those that rely on external libraries such as Django or DocUtils have to rely on a CPython bridge which limits performance to that of CPython. For example, on the Codon forum, some enterprising developer reports that a simple Codon-compiled Fibonacci script ran more than 70x faster than the CPython version.\n\nMIT Professor and CSAIL Principal Investigator Saman Amarasinghe told the MIT News service in a release provided to The Register that Python is often used by domain experts who are not programming experts and haven't optimized their applications for performance.\n\n\"Instead of needing to rewrite the program using a C-implemented library like numpy or totally rewrite in a language like C, Codon can use the same Python implementation and give the same performance you'll get by rewriting in C,\" explained Amarasinghe. \"Thus, I believe Codon is the easiest path forward for successful Python applications that have hit a limit due to lack of performance.\"\n\nCodon, we're told, is already being used commercially in fields from quantitative finance and bioinformatics to deep learning. And in the months ahead, expect Codon's developers to implement some missing Python features. \u00ae\n\nPS: Yes, there are, of course, other Python compilers out there, as well as Codon, if you'd like to try them out.",
        "summary": "While it can be optimized for better performance, Python is prized for qualities other than speed, such as readability, a manageable learning curve, an expansive ecosystem, and utility in both academia and business.\nThey've developed a Python compiler called Codon that turns Python code into native machine code without a runtime performance hit.\n\"Typical speedups over Python are on the order of 10-100x or more, on a single thread,\" the Codon repo declares.\nCodon implements most but not all of the Python language.\nDerived from Seq, a DSL for bioinformatics and genetics, Codon has grown into a language compiler that's largely compatible with Python 3.",
        "keywords": [
            "dsls",
            "programming",
            "performance",
            "scripts",
            "python",
            "codon",
            "cc",
            "mit",
            "speeds",
            "csail",
            "compiler",
            "language",
            "runtime",
            "takes"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiSWh0dHBzOi8vYnVpbHRpbi5jb20vc29mdHdhcmUtZW5naW5lZXJpbmctcGVyc3BlY3RpdmVzL2FyZ3VtZW50cy1pbi1weXRob27SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "5 Types of Arguments in Python Function Definitions",
        "description": "In Python, a function is defined with def . This is followed by the name of the function and a set of formal parameters. The actual parameters, or arguments, are passed during a function call. We can define a function with a variable number of arguments.\n\nAn illustration of what a function definition and how arguments work in Python. | Image: Indhumathy Chelliah\n\nHere\u2019s what you need to know about the five common types of arguments in Python function definition.\n\n5 Arguments in Python to Know default arguments keyword arguments positional arguments arbitrary positional arguments arbitrary keyword arguments\n\nDefault Arguments in Python\n\nDefault arguments are values that are provided while defining functions.\n\nThe assignment operator = is used to assign a default value to the argument.\n\nDefault arguments become optional during the function calls.\n\nIf we provide a value to the default arguments during function calls, it overrides the default value.\n\nThe function can have any number of default arguments.\n\nDefault arguments should follow non-default arguments.\n\nIn the below example, the default value is given to argument b and c\n\ndef add(a,b=5,c=10): return (a+b+c)\n\nThis function can be called in one of three ways:\n\n1. Giving Only the Mandatory Argument\n\nprint(add(3)) #Output:18\n\n2. Giving One of the Optional Arguments\n\n3 is assigned to a , 4 is assigned to b .\n\nprint(add(3,4)) #Output:17\n\n3. Giving All the Arguments\n\nprint(add(2,3,4)) #Output:9\n\nDefault values are evaluated only once at the point of the function definition in the defining scope. So, it makes a difference when we pass mutable objects like a list or dictionary as default values.\n\nMore on Python: 13 Python Code Snippets You Need to Know\n\nKeyword Arguments in Python\n\nFunctions can also be called using keyword arguments of the form kwarg=value .\n\nDuring a function call, values passed through arguments don\u2019t need to be in the order of parameters in the function definition. This can be achieved by keyword arguments. But all the keyword arguments should match the parameters in the function definition.\n\ndef add(a,b=5,c=10): return (a+b+c)\n\nCalling the function add by giving keyword arguments\n\nAll parameters are given as keyword arguments, so there\u2019s no need to maintain the same order.\n\nprint (add(b=10,c=15,a=20)) #Output:45\n\nDuring a function call, only giving a mandatory argument as a keyword argument. Optional default arguments are skipped.\n\nprint (add(a=10)) #Output:25\n\nPositional Arguments in Python\n\nDuring a function call, values passed through arguments should be in the order of parameters in the function definition. This is called positional arguments.\n\nKeyword arguments should follow positional arguments only.\n\ndef add(a,b,c): return (a+b+c)\n\nThe above function can be called in two ways:\n\nFirst, during the function call, all arguments are given as positional arguments. Values passed through arguments are passed to parameters by their position. 10 is assigned to a , 20 is assigned to b and 30 is assigned to c .\n\nprint (add(10,20,30)) #Output:60\n\nThe second way is by giving a mix of positional and keyword arguments. Keyword arguments should always follow positional arguments.\n\nprint (add(10,c=30,b=20)) #Output:60\n\nDefault vs Positional vs Keyword Arguments\n\nAn illustration of positional, default and keyword arguments in Python. | Image: Indhumathy Chelliah\n\nImportant Points to Remember\n\nAn outline of important points to remember for default, positional and keyword arguments in Python. | Image: Indhumathy Chelliah\n\n1. Default Arguments Should Follow Non-Default Arguments\n\ndef add(a=5,b,c): return (a+b+c) #Output:SyntaxError: non-default argument follows default argument\n\n2. Keyword Arguments Should Follow Positional Arguments\n\ndef add(a,b,c): return (a+b+c) print (add(a=10,3,4)) #Output:SyntaxError: positional argument follows keyword argument\n\n3. All Keyword Arguments Passed Must Match One of the Arguments Accepted by the Function, and Their Order Isn\u2019t Important\n\ndef add(a,b,c): return (a+b+c) print (add(a=10,b1=5,c=12)) #Output:TypeError: add() got an unexpected keyword argument 'b1'\n\n4. No Argument Should Receive a Value More Than Once\n\ndef add(a,b,c): return (a+b+c) print (add(a=10,b=5,b=10,c=12)) #Output:SyntaxError: keyword argument repeated\n\n5. Default Arguments Are Optional Arguments\n\nGiving only the mandatory arguments:\n\ndef add(a,b=5,c=10): return (a+b+c) print (add(2)) #Output:17\n\nGiving all arguments (optional and mandatory arguments)\n\ndef add(a,b=5,c=10): return (a+b+c) print (add(2,3,4)) #Output:9\n\nWhat Are Variable-Length Arguments in Python?\n\nVariable-length arguments are also known as arbitrary arguments. If we don\u2019t know the number of arguments needed for the function in advance, we can use arbitrary arguments\n\nThere are two types of arbitrary arguments: Arbitrary positional arguments. Arbitrary keyword arguments.\n\nArbitrary Positional Arguments in Python\n\nFor arbitrary positional argument, an asterisk (*) is placed before a parameter in function definition which can hold non-keyword variable-length arguments. These arguments will be wrapped up in a tuple. Before the variable number of arguments, zero or more normal arguments may occur.\n\ndef add(*b): result=0 for i in b: result=result+i return result print (add(1,2,3,4,5)) #Output:15 print (add(10,20)) #Output:30\n\nArbitrary Keyword Arguments in Python\n\nFor arbitrary positional argument, a double asterisk (**) is placed before a parameter in a function which can hold keyword variable-length arguments.\n\ndef fn(**a): for i in a.items(): print (i) fn(numbers=5,colors=\"blue\",fruits=\"apple\") ''' Output: ('numbers', 5) ('colors', 'blue') ('fruits', 'apple') '''\n\nAn error occurred. Unable to execute JavaScript. Try watching this video on www.youtube.com , or enable JavaScript if it is disabled in your browser.\n\nAn overview on the different function arguments in Python. | Video: Telusko\n\nMore on Python: Introduction to Priority Queues in Python\n\nUnderstanding Special Parameters in Python\n\nAccording to Python Documentation:\n\n\u201cBy default, arguments may be passed to a Python function either by position or explicitly by keyword. For readability and performance, it makes sense to restrict the way arguments can be passed so that a developer need only look at the function definition to determine if items are passed by position, by position or keyword, or by keyword.\u201d\n\nAs a result, a function definition may look like this:\n\nAn illustration of different types of special parameters in Python. | Image: Indhumathy Chelliah\n\nWhere / and * are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function, including:\n\nPositional or keyword arguments. Positional only parameters. Keyword-only arguments.\n\n1. Positional or Keyword Arguments\n\nIf / and * are not present in the function definition, arguments may be passed to a function by position or by keyword.\n\ndef add(a,b,c): return a+b+c print (add(3,4,5)) #Output:12 print (add(3,c=1,b=2)) #Output:6\n\n2. Positional Only Parameters\n\nPositional-only parameters are placed before a / (forward-slash) in the function definition. The / is used to logically separate the positional-only parameters from the rest of the parameters. Parameters following the / may be positional-or-keyword or keyword-only.\n\ndef add(a,b,/,c,d): return a+b+c+d print (add(3,4,5,6)) #Output:12 print (add(3,4,c=1,d=2)) #Output:6\n\nIf we specify keyword arguments for positional only arguments, it will raise TypeError.\n\ndef add(a,b,/,c,d): return a+b+c+d print (add(3,b=4,c=1,d=2)) #Output:TypeError: add() got some positional-only arguments passed as keyword arguments: 'b'\n\n3. Keyword Only Arguments\n\nTo mark parameters as keyword-only, place an * in the arguments list just before the first keyword-only parameter.\n\ndef add(a,b,*,c,d): return a+b+c+d print (add(3,4,c=1,d=2)) #Output:10\n\nIf we specify positional arguments for keyword-only arguments it will raise TypeError.\n\ndef add(a,b,*,c,d): return a+b+c+d print (add(3,4,1,d=2)) #Output:TypeError: add() takes 2 positional arguments but 3 positional arguments (and 1 keyword-only argument) were given\n\nAll three calling conventions are used in the same function. In the example below, the function add contains all three arguments:\n\na , b : Positional only arguments.\n\nc : Positional or keyword arguments.\n\nd : Keyword-only arguments.\n\ndef add(a,b,/,c,*,d): return a+b+c+d print (add(3,4,1,d=2)) #Output:10\n\nBelow are some important points to remember for special parameters in Python:",
        "summary": "| Image: Indhumathy ChelliahHere\u2019s what you need to know about the five common types of arguments in Python function definition.\n5 Arguments in Python to Know default arguments keyword arguments positional arguments arbitrary positional arguments arbitrary keyword argumentsDefault Arguments in PythonDefault arguments are values that are provided while defining functions.\nMore on Python: 13 Python Code Snippets You Need to KnowKeyword Arguments in PythonFunctions can also be called using keyword arguments of the form kwarg=value .\ndef add(a,b,c): return (a+b+c)The above function can be called in two ways:First, during the function call, all arguments are given as positional arguments.\nIf we don\u2019t know the number of arguments needed for the function in advance, we can use arbitrary argumentsThere are two types of arbitrary arguments: Arbitrary positional arguments.",
        "keywords": [
            "parameters",
            "default",
            "passed",
            "function",
            "print",
            "python",
            "definitions",
            "types",
            "arguments",
            "positional",
            "return",
            "keyword"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiWmh0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjg1MzczL2lzLWl0LWZpbmFsbHktdGltZS10by1yZW1vdmUtdGhlLXB5dGhvbi1naWwuaHRtbNIBXmh0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjg1MzczL2lzLWl0LWZpbmFsbHktdGltZS10by1yZW1vdmUtdGhlLXB5dGhvbi1naWwuYW1wLmh0bWw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Is it finally time to remove the Python GIL?",
        "description": "Powerful, flexible, and programmer-friendly, Python is widely used for everything from web development to machine learning. By the two most-cited measures, Python has even surpassed the likes of Java and C to become the most popular programming language of all. After years of soaring popularity, Python might well seem unstoppable.\n\nBut Python faces at least one big obstacle to its future growth as a programming language. It\u2019s called the GIL, the global interpreter lock, and Python developers have been trying to remove it from the default implementation of Python for decades now.\n\nAlthough the GIL serves a critical purpose, namely ensuring thread safety, it also creates a serious bottleneck for multithreaded programs. In short, the GIL prevents Python from taking full advantage of multiprocessor systems. For Python to be a first-class language for concurrent programming, many believe the GIL has to go.\n\nSo far, attempts to remove the GIL have failed. But a new wave of efforts is mounting to make the GIL a thing of the past, and make Python even more fully equipped to meet programming requirements of the future.\n\nWhy Python has a GIL\n\nStrictly speaking, the global interpreter lock isn\u2019t part of Python in the abstract. It\u2019s a component of the most commonly used Python implementation, CPython, which is maintained by the Python Software Foundation.\n\nThe GIL ensures thread safety in CPython by allowing only one running thread at a time to execute Python bytecode. CPython\u2019s memory management systems aren\u2019t thread-safe, so the GIL is used to serialize access to objects and memory to prevent race conditions. If CPython didn\u2019t have a GIL, it would have to handle concurrency and race conditions in some other way.\n\nWhat makes the GIL such a problem? For one, it prevents true multithreading in the CPython interpreter. That makes a whole class of code accelerations\u2014optimizations that are readily available in other programming languages\u2014far harder to implement in Python.\n\nMost developers work around the GIL in one form or another. The multiprocessing module, for instance, makes it possible to run concurrent instances of the Python interpreter (each on its own physical thread) and share work between them. However, because sharing data between Python instances incurs a lot of overhead, multiprocessing only works well for certain classes of problems.\n\nAnother workaround is to use Python extensions, typically written in C. These run outside the Python interpreter, so the processing they perform isn\u2019t beholden to the GIL. The problem is this only holds true as long as the work doesn\u2019t involve Python objects, just C code and C data structures. So, like multiprocessing , C extensions only solve a small class of problems.\n\nAs Python\u2019s popularity grows, so does the embarrassment over a deficit like the GIL in the language. And so various efforts, past and present, have been launched to do away with the GIL.\n\nGetting rid of the GIL\n\nThe problem, as you might guess, is that getting rid of the GIL is far easier said than done. The GIL serves an important purpose. Its replacement must not only ensure thread safety but fulfill a number of other requirements besides.\n\nAmong the many goals a GIL replacement must meet, these are the most crucial:\n\nEnable concurrency. The big payoff for having a GIL-less Python is true concurrency in the language. Replacing the GIL with another mechanism that doesn\u2019t enable concurrency is not progress.\n\nNot slow down single-threaded programs. Any GIL replacement that causes single-threaded programs to run slower is a net loss, because the vast majority of Python software is single-threaded.\n\nNot break backwards compatibility. Existing Python software not only must run as fast as before, but should behave as expected.\n\nNot incur a major maintenance cost. Python\u2019s development team doesn\u2019t have infinite resources or manpower. A GIL-less Python would need to be at least as easy to maintain as the existing interpreter.\n\nGiven the high bar for a GIL substitute, it\u2019s no wonder all previous attempts to remove the GIL have either stalled or come to naught.\n\nPablo Galindo, one of the five members of the Python Steering Council that determines the direction of Python\u2019s development, does believe that removing the GIL is a realistic goal for Python, \u201cbut also a very tricky one.\u201d\n\n\u201cThe question is not really if it is possible (we know it is certainly possible),\u201d Galindo said in an email interview. \u201cThe question is what is the real price? and if we, as a community, want to pay that price. This too is a complicated matter, because the price to pay is also not distributed equally.\u201d\n\nThe price of removing the GIL is paid not only by Python\u2019s core developers, but by all of the developers who use Python, and by those who maintain packages for the Python language as well.\n\nPrevious efforts to remove the GIL\n\nGetting rid of the GIL isn\u2019t a new idea. Previous efforts to de-GIL Python offer examples of the difficulties Galindo talks about.\n\nThe first formal attempts to ditch the GIL date as far back as 1996, when Python was at version 1.4. Greg Stein created a patch to remove the GIL, chiefly as an experiment. It worked, but single-threaded programs took a significant performance hit. Not only was the patch not adopted, but the experience made it clear that removing the GIL was difficult. It would come at a whopping developmental cost.\n\nIn the last few years, as Python\u2019s popularity soared, more GIL removal projects have come to the fore. One widely discussed effort was Larry Hastings\u2019s Gilectomy project, a fork of Python employing several significant changes to reference counting and other internal mechanisms. The Gilectomy showed some promise, but broke most of the existing CPython API, and even the most valiant work on Hastings\u2019s part couldn\u2019t make the Gilectomy as performant as CPython.\n\nSeveral other projects involved forking Python and rewriting it to better support parallelism. PyParallel, one such project, removed the GIL as a limitation to better parallelism without actually removing the GIL. PyParallel added a new module, parallel , that allowed objects to communicate with each other via the TCP stack. While PyParallel successfully circumvented the GIL, the approach had limitations. For one, parallel code had to communicate via the TCP stack (slow), instead of by a shared memory mechanism (fast). PyParallel hasn\u2019t been updated since 2016.\n\nPyPy, the JIT-compiling Python alternative, not only has a GIL of its own, but also a GIL-removal project. The goal of STM (Software Transactional Memory) was to speed up multiple threads in parallel in PyPy, but here too the cost was a significant hit to single-threaded performance, anywhere from 20% to 2x slower. The STM branch of PyPy is no longer under active development either.\n\nCurrent efforts to remove the GIL\n\nThe bad track record for previous attempts to remove the GIL has spurred some new thinking about the way forward. Maybe the best approach is not to remove the GIL, but\u2014as PyParallel attempted\u2014to make it less of an obstacle to parallelism by sidestepping it, then offer that functionality to the average Python developer.\n\nIn theory, Python modules like multiprocessing and third-party projects like Dask already do this. One spins up multiple, distinct copies of the interpreter, splits a task among them, and serializes object data between them if needed. But multiprocessing comes with a lot of overhead, and third-party projects are just that\u2014third-party offerings, not native components built into Python.\n\nA few Python proposals are in the works to improve this situation. None of them by themselves constitutes a solution; all are still just proposals. But collectively, they hint at the direction Python is moving in.\n\nRemoving the GIL with subinterpreters\n\nOne project, PEP 684, is the \u201cper-interpreter GIL\u201d project. The idea is to have multiple Python interpreters, each with its own GIL, running in a single process. In fact Python has supported doing this since version 1.5, but interpreters in the same process have always shared too much global state to achieve true parallelism. PEP 684 moves as much of the shared state as possible into each interpreter, so they can run side by side with minimal interdependency.\n\nBut one big problem with this approach is how to share Python objects between interpreters. Sharing raw data, like streams of bytes, isn\u2019t difficult, but it\u2019s also not very useful. Sharing rich Python objects is far more useful, but also far more difficult. Nevertheless, any plan to allow true concurrency must include a way to share Python objects.\n\nGalindo says the subinterpreter approach (as it\u2019s also called) is a prime candidate for working around the GIL, and for providing a strategy for handling Python objects across interpreters. As Galindo put it in an email to me:\n\nOne of the attractive prospects of multiple interpreters is that it may be possible to channel objects between these interpreters in the same memory space, without the need to marshal them across processes. This may also help with some aspects of the copy-on-write problem that CPython has with multiple interpreters, but this is still to be seen, as we are lacking a complete implementation with a fully-defined surface API.\n\nIn other words, there\u2019s a lot more work to be done on CPython\u2019s internals before a per-interpreter GIL can happen.\n\nAnother proposal, originally raised in 2017, goes hand in hand with PEP 684. PEP 554 exposes multiple-interpreter functionality for the average Python user as part of the standard library, instead of requiring them to write a C extension. This way, as multiple interpreters become more genuinely useful, Python developers will have a standard way to work with them.\n\nOther ideas for removing the GIL\n\nYet another proposal, raised in January 2023 and currently under active debate, provides a way for developers to work on a GIL-less Python side by side with existing Python.\n\nPEP 703 adds a build option to CPython to allow compiling the interpreter without a GIL. The default would still be to include the GIL, but Python developers could work on removing the GIL as part of CPython development directly, instead of in a separate project. In time, and with enough work, the GIL-less version of Python could become the default build mode.\n\nBut this approach comes with multiple downsides. A major one is a larger maintenance cost, not only for CPython but also for extensions that might break because of assumptions about CPython\u2019s internals. Further, as with all previous attempts to remove the GIL, the PEP 703 changes would result in a performance hit for single-threaded programs.\n\nWhether Python makes the GIL optional, adopts subinterpreters, or takes another approach, the long history of efforts and experimentation shows there is no easy way to remove the GIL\u2014not without huge development costs or setting Python back in other ways. But as data sets grow ever larger, and AI, machine learning, and other data processing workloads demand greater parallelism, finding an answer to the GIL will be a key element to making Python a language for the future and not just the present.",
        "summary": "It\u2019s called the GIL, the global interpreter lock, and Python developers have been trying to remove it from the default implementation of Python for decades now.\nIt\u2019s a component of the most commonly used Python implementation, CPython, which is maintained by the Python Software Foundation.\nAnother workaround is to use Python extensions, typically written in C. These run outside the Python interpreter, so the processing they perform isn\u2019t beholden to the GIL.\nCurrent efforts to remove the GILThe bad track record for previous attempts to remove the GIL has spurred some new thinking about the way forward.\nThe idea is to have multiple Python interpreters, each with its own GIL, running in a single process.",
        "keywords": [
            "multiple",
            "python",
            "interpreter",
            "finally",
            "remove",
            "cpython",
            "work",
            "gil",
            "interpreters",
            "language",
            "objects"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiNmh0dHBzOi8vYnVpbHRpbi5jb20vZGF0YS1zY2llbmNlL2Z1enp5LW1hdGNoaW5nLXB5dGhvbtIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Fuzzy String Matching in Python: Introduction to FuzzyWuzzy",
        "description": "Fuzzy string matching is the process of finding strings that approximately match a pattern. It does this by calculating the number of operations needed to transform one string to the other.\n\nWhy is this important? Well, as a data scientist, you often need to to retrieve information from various sources by either leveraging publicly available API\u2019s, asking for data or by simply scraping your own data from a web page. All this information is useful if we are able to combine it and not have any duplicates in the data. But how do we make sure that there are no duplicates?\n\nWhat Is Fuzzy String Matching? Fuzzy string matching is the process of finding strings that match a pattern. It\u2019s built using the Levenshtein distance, in which it calculates the number of operations needed to transform one string into another. For example, fuzzy string matching will be able to recognize that the names Barack Obama and Barack H. Obama refer to the same person.\n\nI know, \u201cYou can just use a function that retrieves all the unique information thus removing duplicates.\u201d Well, that\u2019s one way, but if we\u2019re retrieving the names of the most famous people in the world, our function probably can\u2019t tell that a name like \u201cBarack Obama\u201d is the same as \u201cBarack H. Obama.\u201d While these names are different, they\u2019re likely referring to the same person. So, how do we match these names?\n\nThis is where fuzzy string matching comes in. This post will explain what fuzzy string matching is together with its use cases and give examples using Python\u2019s Library FuzzyWuzzy.\n\nFuzzy Logic vs. Boolean Logic\n\nFuzzy logic is a form of multi-valued logic that deals with reasoning that is approximate rather than fixed and exact. Fuzzy logic values range between 1 and 0, i.e. the value may range from completely true to completely false. In contrast, Boolean logic is a two-valued logic, true or false, that\u2019s usually denoted as 1 and 0, respectively. It deals with reasoning that is fixed and exact. Fuzzy logic tends to reflect how people think and attempts to model our decision making, hence it\u2019s now leading to new intelligent systems (expert systems).\n\nSo, if we are comparing two strings using fuzzy logic, we would be trying to answer the question, \u201cHow similar are string A and string B?\u201d In Boolean logic, we\u2019d rephrase it as, \u201cAre string A and string B the same?\u201d\n\nFuzzy String Matching Explained\n\nFuzzy string matching, also known as approximate string matching, is the process of finding strings that approximately match a pattern. The process has various applications, such as spell checking, DNA analysis and detection, spam detection and plagiarism detection, etc.\n\nMore on Python: How Is Python Used in Machine Learning?\n\nHow to Do Fuzzy String Matching in Python With FuzzyWuzzy\n\nFuzzyWuzzy is a Python library that uses Levenshtein distance to calculate the differences between sequences and patterns. It was developed and also open-sourced by SeatGeek, a service that finds event tickets from all over the internet and showcases them on one platform. The problem they faced involved same events being given different labels. This is the same as the example I gave at the beginning of the post, in which an entity, such as a person\u2019s name, can be labeled differently on different sources.\n\nHow to Install FuzzyWuzzy\n\nTo install the library, you can use pip:\n\npip install fuzzywuzzy pip install python-Levenshtein\n\nAn error occurred. Unable to execute JavaScript. Try watching this video on www.youtube.com , or enable JavaScript if it is disabled in your browser.\n\nAn introduction to fuzzy string matching in Python. | Video: Indian Pythonista\n\nMore on Python:5 Ways to Remove Characters From a String in Python\n\nFuzzyWuzzy Examples\n\nFirst we have to import the fuzzywuzzy modules:\n\nfrom fuzzywuzzy import fuzz from fuzzywuzzy import process\n\nNow, we can get the similarity score of two strings by using the following methods two methods ratio() or partial_ratio() :\n\nfuzz.ratio(\"Catherine M Gitau\",\"Catherine Gitau\") #91 fuzz.partial_ratio(\"Catherine M. Gitau\",\"Catherine Gitau\") #100\n\nYou\u2019re probably wondering why the scores are different. This is because the fuzz.ratio() method just calculates the edit distance between some ordering of the token in both input strings using the difflib.ratio. The fuzz.partial_ratio() takes in the shortest string, which in this case is \u201cCatherine Gitau\u201d (length 14) , then matches it with all the sub-strings of length (14) in \u201cCatherine M. Gitau.\u201d That means matching with \u201cCatherine Gitau,\u201d which returns 100 percent. You can play around with the strings until you get the gist.\n\nWhat if we switched up two names in one string? In the following example, I\u2019ve interchanged the name \u201cCatherine Gitau\u201d to \u201cGitau Catherine.\u201d Let\u2019s see the scores:\n\nfuzz.ratio(\"Catherine M Gitau\",\"Gitau Catherine\") #55 fuzz.partial_ratio(\"Catherine M. Gitau\",\"Gitau Catherine\") #60\n\nWe see that both methods are giving out low scores, this can be rectified by using token_sort_ratio() method. This method attempts to account for similar strings that are out of order. For example, if we used the above strings again but using token_sort_ratio() , we get the following:\n\nfuzz.token_sort_ratio(\"Catherine Gitau M.\", \"Gitau Catherine\") #94\n\nAs you can see, we get a high score of 94.\n\nThis article has introduced fuzzy string matching, which is a well known problem that is built on Levenshtein distance. It calculates how similar two strings are. This can also be calculated by finding out the number of operations needed to transform one string to the other, e.g. with the name \u201cBarack,\u201d one might spell it as \u201cBarac.\u201d Only one operation is needed to correct this, i.e. adding a K at the end. You can try this out using the stringdist library in R as such:",
        "summary": "This post will explain what fuzzy string matching is together with its use cases and give examples using Python\u2019s Library FuzzyWuzzy.\nSo, if we are comparing two strings using fuzzy logic, we would be trying to answer the question, \u201cHow similar are string A and string B?\u201d In Boolean logic, we\u2019d rephrase it as, \u201cAre string A and string B the same?\u201dFuzzy String Matching ExplainedFuzzy string matching, also known as approximate string matching, is the process of finding strings that approximately match a pattern.\nHow to Do Fuzzy String Matching in Python With FuzzyWuzzyFuzzyWuzzy is a Python library that uses Levenshtein distance to calculate the differences between sequences and patterns.\nAn introduction to fuzzy string matching in Python.\nThis article has introduced fuzzy string matching, which is a well known problem that is built on Levenshtein distance.",
        "keywords": [
            "string",
            "introduction",
            "strings",
            "python",
            "gitau",
            "m",
            "fuzzy",
            "matching",
            "using",
            "catherine",
            "logic",
            "fuzzywuzzy"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiUGh0dHBzOi8vdGhlbmV3c3RhY2suaW8vNy1tdXN0LWhhdmUtcHl0aG9uLXRvb2xzLWZvci1tbC1kZXZzLWFuZC1kYXRhLXNjaWVudGlzdHMv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "7 Must-Have Python Tools for ML Devs and Data Scientists",
        "description": "From building complex machine learning applications, to creating intuitive graphical user interfaces, Python is a popular programming language that has become the preferred choice for software developers and data scientists alike. Python\u2019s data science capabilities continue to be explored, especially for advanced data analysis and the creation of deep learning products. Python outperforms rival programming languages, such as C++, in this regard.\n\nPython has a relatively easy learning curve and is regarded as very beginner-friendly. However, there are also a range of tools that need to be mastered if you are to use Python to its full potential.\n\nIn this article, we will focus on seven of the best Python tools that all programmers should consider learning in 2023, to help streamline the coding process and simplify time-consuming tasks. The tools featured in this article range from integrated development environments (IDEs) such as PyCharm, to the browser testing tool Selenium.\n\nWhat Can You Do With Python?\n\nWhen developing with Python, it is important to compile a suite of tools that can make the process more efficient, helping you to focus on the core product without having to worry about some of the more tedious aspects of coding. This is why we have compiled a list of some of the most common project types created by Python programmers.\n\nSoftware development \u2014 Web, game, graphical-user interface (GUI) or command-line interface (CLI). Python does not have built-in mobile development capabilities.\n\n\u2014 Web, game, graphical-user interface (GUI) or command-line interface (CLI). Python does not have built-in mobile development capabilities. Data science and mathematics \u2014 Science computing, data analysis, visualization and web scraping.\n\n\u2014 Science computing, data analysis, visualization and web scraping. Machine learning \u2014 Improving speech recognition, for example.\n\n\u2014 Improving speech recognition, for example. Develop embedded systems and robots \u2014 Systems can include Raspberry Pi, BBC micro:bit and MicroPython.\n\nSystems can include Raspberry Pi, BBC micro:bit and MicroPython. Automate and speed up workflows \u2014 DevOps, development environment, database systems, software packaging and deployment, and software testing.\n\nThe Best Python Development Tools of 2023\n\nOur list of seven Python development tools can help programmers maximize the potential of Python, helping them to develop complex and efficient products in less time and using less code.\n\n1. PyCharm IDE\n\nCreated by JetBrains, PyCharm is regarded as the best IDE available for Python, allowing developers to code and install packages extremely quickly.\n\nWith PyCharm, developers can create efficient code with an autocomplete feature suggesting usable code to save a lot of time. It also highlights code syntaxes so they can be easily located, as well as flagging up any errors such as typos or missing code elements.\n\nPyCharm is the most popular IDE for Python due to its extensive range of tools and features, making the process as hassle-free as possible.\n\n2. Jupyter Notebook\n\nMuch loved by data scientists and machine learning engineers, Jupyter Notebook is another IDE that makes creating and executing code much easier. This is because Jupyter allows programmers to test just one cell of the code instead of the whole program, speeding up the process significantly.\n\nJupyter Notebook works within the browser, and titles and notes can be added to help contributors understand your code better, making it one of the best collaboration IDEs out there. In addition, your organized code and notes can all be exported as a PDF, or .ipynp if you are planning to create a 3D visual.\n\n3. Pip Package\n\nKnowing how to program in Python is just part of the puzzle. To become a Python specialist in regards to data science, data analysis and machine learning, you will need to install a range of additional packages. Pip Package is a great tool that allows you to install them easily.\n\nPip is used by the majority of Python developers who generally consider it a must-have tool. It can quickly and simply install any Python package with an easy search function.\n\nNote: Update Pip regularly to ensure you have access to the latest packages and to make sure the tool works to its optimal ability.\n\n4. Keras\n\nKeras works as an API built into the machine learning library TensorFlow as well as other libraries such as CNTK and Theano, making it a powerful artificial intelligence (AI) tool. Keras effectively creates a comprehensive neural network that can help to recreate brain processes, meaning it can be used to develop a range of machine learning or AI products.\n\nIt is entirely open source and is backed by a strong community of contributors who have introduced new features to make the creation of these neural networks even easier. In some cases, networks can be created with a simple command-line system and stacking layers.\n\n5. Selenium\n\nSelenium is a tool that allows developers to test web applications across multiple browsers. Using Python, the programmer can design simple scripts or conduct automation testing across any browser of their choosing, also working alongside other programming languages such as Java, Ruby and C#.\n\nSelenium supports platforms such as Windows, Mac iOS and Linux, and of course supports all the top browsers, including Chrome, Firefox and Safari.\n\n6. Python Anywhere\n\nIf you want to test Python without downloading it onto your computer, then Python Anywhere allows you to host and run your code online.\n\nThis is great for beginners or anyone who is just curious about what Python can do, allowing you to create code within your web browser. The basic version of Python Anywhere allows developers to test code elements and check the results. However, if this is not enough, a premium version offers more processing power, which costs $5 a month.\n\n7. Sphinx\n\nCode hosting websites like GitHub provide extensive libraries of code that can be applied to Python, plus many developers create their own open source software that is available to anyone. For people to apply this code or execute open source applications, documentation is required to instruct the user on how to use them.\n\nThis is where Sphinx comes in. Sphinx is a tool that generates documentation for code and programs written in Python, working on the terminal or cmd for Windows. It does this by asking questions about who has developed the program, its name, what it does, its release date and more.\n\nOnce Sphinx has gathered enough information, it will then generate documentation that is available in a range of file formats. This includes HTML so it can be directly published on a web page, or PDF so it can be packaged with the code.\n\nPython Development Tools to Learn in 2023\n\nPython is an extremely popular programming language that can be used to create projects that range anywhere from artificial intelligence to automating workflows. To improve Python further and speed up development times, check out the above tools to automate and simplify a range of tasks.\n\nFor example, Pip helps users effortlessly install new packages, while Sphinx can generate high-quality documentation to be packaged with any open source code or programs. Making use of such tools can help developers tackle much more ambitious and innovative projects in 2023.",
        "summary": "Python\u2019s data science capabilities continue to be explored, especially for advanced data analysis and the creation of deep learning products.\nSoftware development \u2014 Web, game, graphical-user interface (GUI) or command-line interface (CLI).\nThe Best Python Development Tools of 2023Our list of seven Python development tools can help programmers maximize the potential of Python, helping them to develop complex and efficient products in less time and using less code.\nPip is used by the majority of Python developers who generally consider it a must-have tool.\nPython Development Tools to Learn in 2023Python is an extremely popular programming language that can be used to create projects that range anywhere from artificial intelligence to automating workflows.",
        "keywords": [
            "tools",
            "musthave",
            "devs",
            "code",
            "learning",
            "development",
            "python",
            "ml",
            "data",
            "range",
            "tool",
            "scientists",
            "web",
            "developers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiS2h0dHBzOi8vdGhlaGFja2VybmV3cy5jb20vMjAyMy8wMy9leHBlcnRzLWlkZW50aWZ5LWZ1bGx5LWZlYXR1cmVkLWluZm8uaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Experts Identify Fully-Featured Info Stealer and Trojan in Python Package on PyPI",
        "description": "A malicious Python package uploaded to the Python Package Index (PyPI) has been found to contain a fully-featured information stealer and remote access trojan.\n\nThe package, named colourfool, was identified by Kroll's Cyber Threat Intelligence team, with the company calling the malware Colour-Blind.\n\n\"The 'Colour-Blind' malware points to the democratization of cybercrime that could lead to an intensified threat landscape, as multiple variants can be spawned from code sourced from others,\" Kroll researchers Dave Truman and George Glass said in a report shared with The Hacker News.\n\ncolourfool, like other rogue Python modules discovered in recent months, conceals its malicious code in the setup script, which points to a ZIP archive payload hosted on Discord.\n\nThe file contains a Python script (code.py) that comes with different modules designed to log keystrokes, steal cookies, and even disable security software.\n\nThe malware, besides performing defense evasion checks to determine if it's being executed in a sandbox, establishes persistence by means of a Visual Basic script and uses transfer[.]sh for data exfiltration.\n\n\"As a method of remote control, the malware starts a Flask web application, which it makes accessible to the internet via Cloudflare's reverse tunnel utility 'cloudflared,' bypassing any inbound firewall rules,\" the researchers said.\n\nThe use of Cloudflare tunnels mirrors another campaign that was disclosed by Phylum last month which made use of six fraudulent packages to distribute a stealer-cum-RAT dubbed poweRAT.\n\n\"There are strong similarities between the malware in that they both use Flask and Cloudflare,\" Truman told The Hacker News. \"However, whilst the Phylum researched malware relies on PowerShell for much of its key functionality, 'Colour-Blind' is nearly entirely written in Python.\"\n\n\"Combine this with the functionality presented by the Flask web application performing different actions, rather than the newer malware adding to the functionality of the older, it could mean that the relationship is more in the form of the different threat actors sharing ideas, resources or code, rather than an evolution of a code base being developed by a single actor,\" Truman added.\n\nThe trojan is feature rich and is capable of gathering passwords, terminating applications, taking screenshots, logging keystrokes, opening arbitrary web pages on a browser, executing commands, capturing crypto wallet data, and even snooping on victims via the web camera.\n\nThe findings come as threat actors are leveraging the source code associated with W4SP stealer to spawn copycat versions that are distributed via Python packages like ratebypass, imagesolverpy, and 3m-promo-gen-api.\n\nWEBINAR Discover the Hidden Dangers of Third-Party SaaS Apps Are you aware of the risks associated with third-party app access to your company's SaaS apps? Join our webinar to learn about the types of permissions being granted and how to minimize risk. RESERVE YOUR SEAT\n\nWhat's more, Phylum discovered three additional packages \u2013 called pycolured, pycolurate, and colurful \u2013 that have been used to deliver a Go-based remote access trojan referred to as Spark.\n\nAdding to the attacks targeting PyPI, the software supply chain security firm also revealed details of a massive attack campaign wherein unknown threat actors published as many as 1,138 packages to deploy a Rust executable, which is then used to drop additional malware binaries.\n\n\"The risk/reward proposition for attackers is well worth the relatively minuscule time and effort, if they can land a whale with a fat crypto wallet,\" the Phylum research team said.\n\n\"And the loss of a few bitcoin pales in comparison to the potential damage of the loss of a developer's SSH keys in a large enterprise such as a corporation or government.\"",
        "summary": "A malicious Python package uploaded to the Python Package Index (PyPI) has been found to contain a fully-featured information stealer and remote access trojan.\nThe package, named colourfool, was identified by Kroll's Cyber Threat Intelligence team, with the company calling the malware Colour-Blind.\nThe file contains a Python script (code.py) that comes with different modules designed to log keystrokes, steal cookies, and even disable security software.\n\"However, whilst the Phylum researched malware relies on PowerShell for much of its key functionality, 'Colour-Blind' is nearly entirely written in Python.\"\nThe findings come as threat actors are leveraging the source code associated with W4SP stealer to spawn copycat versions that are distributed via Python packages like ratebypass, imagesolverpy, and 3m-promo-gen-api.",
        "keywords": [
            "truman",
            "identify",
            "code",
            "script",
            "python",
            "fullyfeatured",
            "threat",
            "pypi",
            "info",
            "package",
            "experts",
            "malware",
            "phylum",
            "remote",
            "stealer",
            "trojan",
            "packages",
            "web"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiOGh0dHBzOi8vbWFzaGFibGUuY29tL2RlYWxzL2ZlYi0yNi1weXRob24tYm9vdGNhbXAtYnVuZGxl0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Get your coding education with premium Python training for only $35",
        "description": "TL;DR: As of Feb. 26, you can learn to code with the Premium Python Certification Bootcamp Bundle(Opens in a new tab) \u2014 on sale for just $34.99 for a limited time. That's less than $3 per course.\n\nIt's 2023, have you learned how to code yet?\n\nCoding may seem like you're only writing a bunch of random letters, numbers, and characters, but gaining proficiency in it can only benefit you in the long run. While tools like ChatGPT are capable of writing lines of code, experts say that actual developers will still be in demand(Opens in a new tab) to create products that fulfill actual human needs, something a bot will likely never comprehend. And while learning how to code(Opens in a new tab) can be intimidating, you can start with a programming language that's easy to pick up. Python happens to be one of the most beginner-friendly languages out there.\n\nTo the uninitiated, Python is touted for its clean and easy syntax and sheer versatility. It's often used in AI and machine learning, data analytics, data visualization, and more. With the Premium Python Certification Bootcamp Bundle for $34.99, you can gain familiarity with programming and jumpstart a new career.\n\nThis bundle features 13 courses and over 40 hours of premium training brought to you by experts and top e-learning platforms like Mammoth Interactive(Opens in a new tab), Zenva Academy(Opens in a new tab), and Webucator(Opens in a new tab). It nets you access to both beginner and advanced Python training, where you'll learn the basics of computer programming, the fundamentals of arithmetic operators, strings, lists, and more, and even a play-by-play of developing actual, usable apps.\n\nIf you want to do a deeper dive into Python, there are also more technical courses available designed to provide advanced training. You'll get to learn how to test and debug Python code, work with databases, CSV files, JSON, and XML, write your own hacking program, practice ethical hacking, get to grips with automation, and more.\n\nWith hands-on training provided by top-rated instructors, you'll be able to gain a fundamental understanding of the language and use it to boost your career. The Premium Python Certification Bootcamp Bundle(Opens in a new tab) has a retail price of $2,585, but you can get it on sale for only $34.99 for a limited time.\n\nPrices subject to change.",
        "summary": "TL;DR: As of Feb. 26, you can learn to code with the Premium Python Certification Bootcamp Bundle(Opens in a new tab) \u2014 on sale for just $34.99 for a limited time.\nWith the Premium Python Certification Bootcamp Bundle for $34.99, you can gain familiarity with programming and jumpstart a new career.\nIt nets you access to both beginner and advanced Python training, where you'll learn the basics of computer programming, the fundamentals of arithmetic operators, strings, lists, and more, and even a play-by-play of developing actual, usable apps.\nIf you want to do a deeper dive into Python, there are also more technical courses available designed to provide advanced training.\nThe Premium Python Certification Bootcamp Bundle(Opens in a new tab) has a retail price of $2,585, but you can get it on sale for only $34.99 for a limited time.",
        "keywords": [
            "training",
            "programming",
            "code",
            "coding",
            "education",
            "python",
            "tab",
            "premium",
            "learn",
            "bootcamp",
            "certification",
            "youll",
            "35"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiTWh0dHBzOi8vdGhlaGFja2VybmV3cy5jb20vMjAyMy8wMi9weXRob24tZGV2ZWxvcGVycy13YXJuZWQtb2YtdHJvamFuaXplZC5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python Developers Warned of Trojanized PyPI Packages Mimicking Popular Libraries",
        "description": "Cybersecurity researchers are warning of \"imposter packages\" mimicking popular libraries available on the Python Package Index (PyPI) repository.\n\nThe 41 malicious PyPI packages have been found to pose as typosquatted variants of legitimate modules such as HTTP, AIOHTTP, requests, urllib, and urllib3. The names of the packages are as follows:\n\naio5, aio6, htps1, httiop, httops, httplat, httpscolor, httpsing, httpslib, httpsos, httpsp, httpssp, httpssus, httpsus, httpxgetter, httpxmodifier, httpxrequester, httpxrequesterv2, httpxv2, httpxv3, libhttps, piphttps, pohttp, requestsd, requestse, requestst, ulrlib3, urelib3, urklib3, urlkib3, urllb, urllib33, urolib3, xhttpsp\n\n\"The descriptions for these packages, for the most part, don't hint at their malicious intent,\" ReversingLabs researcher Lucija Valenti\u0107 said in a new writeup. \"Some are disguised as real libraries and make flattering comparisons between their capabilities and those of known, legitimate HTTP libraries.\"\n\nBut in reality, they either harbor downloaders that act as a conduit to deliver second-stage malware to infected hosts or information stealers that are designed to exfiltrate sensitive data such as passwords and tokens.\n\nFortinet, which also disclosed similar rogue HTTP packages on PyPI earlier this week, noted their ability to launch a trojan downloader that, in turn, contains a DLL file (Rdudkye.dll) packing a variety of functions.\n\nWEBINAR Discover the Hidden Dangers of Third-Party SaaS Apps Are you aware of the risks associated with third-party app access to your company's SaaS apps? Join our webinar to learn about the types of permissions being granted and how to minimize risk. RESERVE YOUR SEAT\n\nThe development is just the latest attempt by malicious actors to poison open source repositories like GitHub, npm, PyPI, and RubyGems to propagate malware to developer systems and mount supply chain attacks.\n\nThe findings come a day after Checkmarx detailed a surge in spam packages in the open source npm registry that are designed to redirect victims to phishing links.\n\n\"As with other supply chain attacks, malicious actors are counting on typosquatting creating confusion and counting on incautious developers to embrace malicious packages with similar-sounding names by accident,\" Valenti\u0107 said.",
        "summary": "Cybersecurity researchers are warning of \"imposter packages\" mimicking popular libraries available on the Python Package Index (PyPI) repository.\nThe 41 malicious PyPI packages have been found to pose as typosquatted variants of legitimate modules such as HTTP, AIOHTTP, requests, urllib, and urllib3.\nWEBINAR Discover the Hidden Dangers of Third-Party SaaS Apps Are you aware of the risks associated with third-party app access to your company's SaaS apps?\nThe findings come a day after Checkmarx detailed a surge in spam packages in the open source npm registry that are designed to redirect victims to phishing links.\n\"As with other supply chain attacks, malicious actors are counting on typosquatting creating confusion and counting on incautious developers to embrace malicious packages with similar-sounding names by accident,\" Valenti\u0107 said.",
        "keywords": [
            "open",
            "malicious",
            "trojanized",
            "python",
            "warned",
            "libraries",
            "popular",
            "supply",
            "valenti\u0107",
            "pypi",
            "thirdparty",
            "developers",
            "source",
            "http",
            "saas",
            "packages",
            "mimicking"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiPmh0dHBzOi8vbWFzaGFibGUuY29tL2RlYWxzL2ZlYi0xNC1haS1weXRob24tcHJvZ3JhbW1pbmctYnVuZGxl0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Get this $40 course bundle and learn how to make AI work for you",
        "description": "TL;DR: As of Feb. 14, you can sign up for the 2023 Ultimate AI ChatGPT and Python Programming Bundle(Opens in a new tab) for only $39.99 \u2014 that breaks down to just under three bucks per course.\n\nChatGPT may be among the smartest AI released to the public, but there\u2019s still room to customize and specialize this technology for your own purposes. That\u2019s where the 2023 Ultimate AI ChatGPT and Python Programming Bundle comes into play. These courses could show you how to create your own ChatGPT AI bot(Opens in a new tab), learn to code, and more. Start learning about AI while the whole course bundle is only $39.99 (reg. $2,786).\n\nCreate your own ChatGPT AI\n\nChatGPT may be able to help you code, but it\u2019s not perfect. If you want to learn to code, start with Python 3: From ZERO to GUI Programming. This intro course provides an overview of Python 3 and the basics of programming. As you learn more, you can see how to do GUI programming using Tkinter.\n\nTkinter is one of the tools you can use in a later course to program your own ChatGPT bot. Before you get that far, you may want to learn more of the fundamentals driving AI, which is where Robotics and Artificial Intelligence with Tools and Templates taught by Dr. Chris Mall comes into play. Dr. Mall has a Ph.D. in Computer Science and Software development, and this course could help you identify AI startup opportunities(Opens in a new tab) and build your first robot.\n\nOnce you have the basics down, it may be time to learn how to make your own ChatGPT bot using Tkinter, Python, and Django. You may not even need to be a master programmer because you can just ask the AI to correct your code. The ultimate goal of the two ChatGPT courses is to connect to OpenAi with an API so you can have your own interface with OpenAI on the homepage of your Django app. It\u2019s your very own build-a-bot workshop.\n\nLearn to code for ChatGPT\n\nFor a limited time, get the 2023 Ultimate AI ChatGPT and Python Programming Bundle(Opens in a new tab) on sale for $39.99 (reg. $2,786).\n\nPrices subject to change.",
        "summary": "That\u2019s where the 2023 Ultimate AI ChatGPT and Python Programming Bundle comes into play.\nThese courses could show you how to create your own ChatGPT AI bot(Opens in a new tab), learn to code, and more.\nStart learning about AI while the whole course bundle is only $39.99 (reg.\nIf you want to learn to code, start with Python 3: From ZERO to GUI Programming.\nLearn to code for ChatGPTFor a limited time, get the 2023 Ultimate AI ChatGPT and Python Programming Bundle(Opens in a new tab) on sale for $39.99 (reg.",
        "keywords": [
            "programming",
            "code",
            "3999",
            "chatgpt",
            "40",
            "python",
            "ai",
            "tab",
            "learn",
            "work",
            "bundle",
            "course",
            "ultimate"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMieWh0dHBzOi8vd3d3LnN1bi1zZW50aW5lbC5jb20vbmV3cy9lbnZpcm9ubWVudC9mbC1uZS11c2dzLXB5dGhvbi1hc3Nlc3NtZW50LTIwMjMwMzA0LXI2bDZ2NzNsNGJlcHJhenFqbGd5c2d1a3l5LXN0b3J5Lmh0bWzSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python invasion has exploded out of the Everglades and into nearly all of southern Florida, new map shows",
        "description": "Environmental reporter & editor Bill Kearney takes a look at a U.S. Geological Survey that indicates pythons have moved into western sections of Broward & Palm. (, /South Florida Sun Sentinel)\n\nBurmese pythons are too good at what they do \u2014 they\u2019re nearly undetectable to both humans and their prey, they barely need to move and when they do they\u2019re deadly. On top of that, they have lots of babies.\n\nAs a result, according to an ambitious new paper produced by the U.S. Geological Survey, their population has exploded in only 20 years from a few snakes at the southern tip of Everglades National Park to an invasion that envelops the southern third of Florida.\n\nAdvertisement\n\nThe reptile\u2019s \u201cinvasion front\u201d has recently rolled through Broward and Palm Beach counties and is moving up the state. The current front encompasses the southern end of Lake Okeechobee and is pushing westward north of Fort Myers.\n\nThe study, which meticulously synthesizes several decades\u2019 worth of findings from more than 250 research initiatives, assesses where we stand in the python invasion and how we might slow it.\n\nAdvertisement\n\nThe success of these snakes, which are native to Southeast Asia, and came here via the exotic pet trade, has been a cataclysmic failure for South Florida ecosystems and \u201crepresent one of the most intractable invasive-species management issues across the globe,\u201d said the paper.\n\nTo put it simply, the snakes are very much on the move, butting up against civilization and heading north \u2014 how far it will go depends on several factors, including climate change.\n\nHistory of an invasion\n\nIn the 1970s, Burmese pythons, which are admittedly beautiful, dappled in a rich pattern of mahogany, coffee and taupe, became all the rage in the exotic pet trade. Snakes from Thailand and Myanmar began showing up more and more in the States, including South Florida.\n\nBy the end of the decade, there was evidence that some of the snakes were living in Everglades National Park. In 1979, a python measuring more than 12 feet was run over on Tamiami Trail, and there was a spate of unconfirmed sightings in the southwest section of the park through the 1980s.\n\nIt wasn\u2019t until 1995, though, that biologists officially documented and collected two snakes \u2014 a 7-foot adult and, tellingly, a hatchling \u2014 near West Lake at the southern tip of the peninsula.\n\nIn the following years, park staff began finding the invasive snakes farther and farther north in the park. \u201cTogether, these observations suggest that multiple generations of Burmese pythons were present in ENP by 2000 or earlier and that the population occupied a large geographic area,\u201d writes the USGS\u2019s Jackie Guzy, author of the report.\n\n[ WATCH: \u2018Monster\u2019 python crossing the road wows Everglades parkgoers. Some say it should have been run over. ]\n\nThat year, wildlife officials deemed them to be established and reproducing. Since then the snakes have expanded steadily up the peninsula, with genetic analysis suggesting that a second introduction of snakes with slightly different patterns on their skin occurred to the west, near Naples.\n\nLittle did biologists know at the time the massive impact the invaders would have on native animals, and how futile control efforts would be.\n\nAdvertisement\n\nThe \u2018invasion front\u2019\n\nOne of the most startling aspects of the study is a map depiction of the snake\u2019s \u201cinvasion front.\u201d Guzy used occurrence records submitted by both researchers and the public between 1979 and 2021 to create a map that shows the chronology of python removals. She cautions that the leading edge \u201crepresents the best professional estimate of the invasion front, which is not exact and will change over time\u201d and could include snakes that are escaped captives, and not part of the wild invasive population.\n\nAnimated map showing the spread of the invasive Burmese python across South Florida, now bordering western sections of Broward and Palm Beach counties. (South Florida Sun Sentinel)\n\nOn the map we can see the tiny nugget of removals at the southern tip of the Everglades from 1995 to 2000. From there the species blossoms rapidly through the wilderness of Everglades National Park and then more slowly, both down into the Keys and laterally into boundary reserve and agricultural areas of Miami-Dade, Broward and Palm Beach counties before finally finding its way into coastal civilization areas starting in about 2013.\n\nThe outer band of the invasion front, representing 2019 to 2021, now reaches West Palm Beach, the southern end of Lake Okeechobee, and areas north of Fort Myers.\n\nThe snakes clearly thrive in the swamps of the Everglades, but is suburbia suitable? A study that tracked hatchlings showed that fewer survived near urbanized areas. Canals, though, provide not only habitat, but travel routes as they look for territory.\n\nGuzy wrote in an email that \u201cwhile Burmese pythons may expand into urban areas, or occur in proximity to the urban interface, research thus far indicates they tend to avoid highly urban areas. This may be because urban areas have expansive development and less favorable habitat, which may result in higher rates of detection and removal.\u201d\n\nDetecting the outer band\n\nThe study says there are few records along the leading edge of the invasion front, so researchers used environmental DNA to detect the presence of the snakes. Animals release environmental DNA through shed skin, feces, mucous and decomposing flesh, and researchers can detect it by taking water or samples.\n\nAdvertisement\n\nThe map is dotted with hundreds of spot where pythons were seen or captured, and many occur north of Lake Okeechobee, but Guzy warns that, \u201cThus far, verified records north of Lake Okeechobee cannot be confidently attributed to the southern Florida population and may represent newly escaped individuals.\u201d\n\nUse this interactive map above to check when python occurrences happened near you since January 2020. The dots represent python occurrences, which may be sightings, but are more often removals conducted by wildlife officials or hunters. Many happen along roadways and canal systems in the rural or wild interior of the state, where most of the snakes live, and where hunters can spot them as they seek warmth.\n\nA quick glance at the density of the python occurrences shows that the bulk of them occur along rural roads and canals, where snakes often bask for warmth, and where they butt up against the human-made world. That doesn\u2019t mean there are no snakes out in the middle of the sawgrass, it\u2019s just nearly impossible to find them there.\n\nJust how many invasive pythons now live in Florida is impossible to say. The species is so \u201ccryptic,\u201d the study says, that it\u2019s extremely difficult to ascertain a number. The most committal statement the study gives is that there \u201cmay be tens of thousands of pythons across known areas of invasion in southern Florida.\u201d\n\nHow are they so successful?\n\nSight, our dominant sense, is likely the worst way to locate a python. They\u2019re nocturnal, can feed infrequently and don\u2019t need to move. If they don\u2019t move, humans just don\u2019t see them. According to Guzy, the snakes also spend an average of 86.1% of their time resting.\n\nIn one study, people walking around looking for the snakes in a semi-natural outdoor enclosure the size of two basketball courts only had a success rate of less than 1%. The snakes were underwater, underground, but sometimes hiding in plain sight.\n\nThis handout photograph shows a team of hunters in the Big Cypress National Preserve holding a female python measuring over 17 feet in length and weighing 140 pounds with 73 developing eggs. (AFP/Getty Images)\n\nTheir cloaking power makes them super-efficient predators, waiting along animal trails or the water\u2019s edge for prey. As a constrictor, they coil around their prey, tightening the grip every time the animal exhales, eventually suffocating it.\n\nAdvertisement\n\nThe largest invasive python in Florida measured 18.7 feet long, weighed 213.8 pounds and was a big momma, carrying 122 eggs. They normally lay 11-84 eggs per clutch, but studies suggest an average of 34 in the wilds of Florida.\n\nA brutal toll on native wildlife\n\nWhen biologists open the invasive snakes up, it\u2019s like rifling through a Florida field guide. All told, they\u2019ve found 76 prey species inside the snakes. That includes lots of birds, such as vultures, crows, ducks, herons, roseate spoonbills and threatened wood storks; small mammals such as the endangered Key Largo woodrat and Key Largo cotton mouse, marsh rabbits, armadillos, possums, raccoons, otters and domestic cats, and larger prey including domestic goats, white-tailed deer, wild hogs and alligators. There has never been a documented human death due to a wild python in Florida.\n\nA graph showing prey items found in the digestive tracts of invasive Burmese pythons in Florida. (USGS/USGS)\n\nHow much damage have they done? Guzy points out that before 2000, researchers could frequently spot mammals in Everglades National Park. But from 2003 to 2011, the frequency of mammal observations [raccoons, opossums, bobcats, rabbits, gray foxes, and white-tailed deer] declined by 85% to 100%. Outside the python\u2019s range, those species were more common.\n\nThe snakes also competed with native predators, like bobcats. One study released marsh rabbits in areas with and without pythons. In python areas, the snakes accounted for 77% of rabbit mortalities within 11 months. At other sites, no rabbits were killed by pythons and mammal predators accounted for 71% of the marsh rabbit deaths. Marsh rabbit declines in southern Florida were caused by pythons, other studies showed.\n\nCold comfort: How much farther can they go?\n\nThe study is not ready to commit to predicting how far north the snakes could live, in part because different researchers have come up with vastly different answers.\n\nOne study cross-referenced the climate and rainfall of the snake\u2019s range in Asia with that of the U.S. and suggested the snake could reach much of the southern third of the United States. Another analysis foretold all of Florida as eventual python country. Add climate change to the mix and it\u2019s hard to say where the snakes will stop.\n\nAdvertisement\n\nCold tolerance puts the brakes on the snakes, but they often stay warm by sheltering in gopher tortoise and mammal burrows. One study said this strategy could see the snakes surviving in southwest Georgia.\n\nIn another study, snakes in north Florida died during a cold snap, even though they had access to a den and a heat source. The wildcard here is the snake\u2019s ability to evolve to tolerate cold \u2014 after a severe 2010 cold snap, snake populations dropped, but have recovered. Those cold-hardened snakes are the ones having babies today, the paper said.\n\nHow to slow the invasion\n\n\u201cOver the past two decades we have extensively explored methods to capture and remove pythons. But so far, there are no easy solutions,\u201d Guzy said. \u201cThe more tools we have at our disposal, the better.\u201d\n\nThose tools currently include the state\u2019s Python Challenge, an annual 10-day event where hunters cruise backroads and canal and slog through swaps to catch and euthanize as many snakes as they can. Last year\u2019s Challenge totaled 231 dead snakes.\n\nSome hunters used trained dogs to sniff the snakes out, and biologists have implanted tracking devices in certain snakes and followed them to breeding aggregations, where they can snag several in a small area.\n\nBreaking News Alerts As it happens Get updates on developing stories as they happen with our free breaking news email alerts. By submitting your email to receive this newsletter, you agree to our Subscriber Terms & Conditions and Privacy Policy >\n\nAnother nascent but promising concept is to put tracking collars on prey such as possums and racoons. Snakes are so ubiquitous that the mammals are eventually eaten, usually by a larger snake.\n\nAdvertisement\n\nThe collar stays in the snake\u2019s digestive tract for some time, and biologists can track the collar to the snake.\n\nA graph shows how many invasive Burmese pythons were removed from Florida ecosystems each year from 1979 to 2021. (USGS/USGS)\n\nThis method recently led researchers to two massive female pythons full of egg follicles in Key Largo. The snakes were humanely euthanized.\n\nThere is hope that with cheaper collars and drone technology, this prey-tracking method could put a real dent in the snake\u2019s populations, particularly because it leads to larger snakes, which are often female.\n\nThe next frontier in python control may be genetic biocontrol, akin to the genetically modified mosquitoes that Florida released in 2021 to prevent females from surviving to adulthood. Someday, biologists might be able to alter the genetics of a population to either become sterile, or almost entirely male, or hamper their survival in some way.\n\n\u201cGenetic biocontrol tools represent exciting possibilities that are actively being explored but which are still a long way from being used,\u201d Guzy said.\n\nIn the end, Guzy said, \u201cthese snakes are extremely cryptic and secretive, and they are inherently difficult to find. ... Although supremely challenging, python research is active and ongoing, and public support and engagement is an important aspect of these efforts.\u201d",
        "summary": "In the following years, park staff began finding the invasive snakes farther and farther north in the park.\nAnimated map showing the spread of the invasive Burmese python across South Florida, now bordering western sections of Broward and Palm Beach counties.\nAdvertisementThe largest invasive python in Florida measured 18.7 feet long, weighed 213.8 pounds and was a big momma, carrying 122 eggs.\nA brutal toll on native wildlifeWhen biologists open the invasive snakes up, it\u2019s like rifling through a Florida field guide.\nIn another study, snakes in north Florida died during a cold snap, even though they had access to a den and a heat source.",
        "keywords": [
            "invasion",
            "snakes",
            "florida",
            "python",
            "exploded",
            "nearly",
            "everglades",
            "invasive",
            "map",
            "north",
            "pythons",
            "areas",
            "study",
            "southern",
            "shows"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiTGh0dHBzOi8vd3d3LmNic25ld3MuY29tL25ld3MvcmV0aWN1bGF0ZWQtcHl0aG9uLWZvdW5kLWRlYWQtcm9hZC1sb25nLWlzbGFuZC_SAVBodHRwczovL3d3dy5jYnNuZXdzLmNvbS9hbXAvbmV3cy9yZXRpY3VsYXRlZC1weXRob24tZm91bmQtZGVhZC1yb2FkLWxvbmctaXNsYW5kLw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "14-foot-long python belonging to the world's longest snake species found dead on side of the road on Long Island",
        "description": "14-foot python found dead along Medford, Long Island, road 14-foot python found dead along Medford, Long Island, road 00:15\n\nNew York officials said last week that they recently made a surprising discovery on New York's Long Island. On Valentine's Day, the Department of Environmental Conservation received a report of a massive snake along the side of a road.\n\nWhen they arrived on the scene, officers found the dead snake \"curled up in a ball.\" And when they were able to lay it flat, they discovered just how big it really was. The snake, which the agency said was found deceased and was originally thought to be about 12 feet long, actually measured out to be 14 feet \u2013 a length that's roughly the same height as a single-story home.\n\nThe snake was on the side of a road in Medford, a town just a short drive west of the Department of Energy's Brookhaven National Laboratory. The agency said that the snake has since been removed from the road to be \"appropriately\" disposed of.\n\nThe animal was identified as a reticulated python, which according to London's Natural History Museum is the \"longest snake in the world.\" Animals of this species are native to Southern Asia, the history museum said, and can grow to be more than 20 feet long. In the wild, the snakes are known to eat birds and mammals, \"including large species such as deer or boar,\" according to Zoo Atlanta.\n\nECO Kaufherr with deceased 14-foot reticulated python. New York Department of Environmental Conservation\n\nThe longest reticulated python ever found in the wild was discovered in 1912, according to the museum, and was measured to be nearly 33 feet long \u2013 \"more than half the length of a bowling lane and makes this snake longer than a giraffe is tall.\"\n\n\"It is illegal to keep these types of snakes as pets in New York and they may only be possessed by holders of a Dangerous Animal License,\" the New York Department of Environmental Conservation said. \"An investigation into the owner of the snake is ongoing.\"",
        "summary": "14-foot python found dead along Medford, Long Island, road 14-foot python found dead along Medford, Long Island, road 00:15New York officials said last week that they recently made a surprising discovery on New York's Long Island.\nOn Valentine's Day, the Department of Environmental Conservation received a report of a massive snake along the side of a road.\nThe animal was identified as a reticulated python, which according to London's Natural History Museum is the \"longest snake in the world.\"\nAnimals of this species are native to Southern Asia, the history museum said, and can grow to be more than 20 feet long.\nECO Kaufherr with deceased 14-foot reticulated python.",
        "keywords": [
            "dead",
            "island",
            "python",
            "long",
            "department",
            "snake",
            "feet",
            "reticulated",
            "belonging",
            "longest",
            "worlds",
            "museum",
            "road",
            "species",
            "medford",
            "york"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiWGh0dHBzOi8vd3d3LmNubi5jb20vMjAyMy8wMy8wNS91cy9yZXRpY3VsYXRlZC1weXRob24tZGlzY292ZXJlZC1uZXcteW9yay10cm5kL2luZGV4Lmh0bWzSAVxodHRwczovL2FtcC5jbm4uY29tL2Nubi8yMDIzLzAzLzA1L3VzL3JldGljdWxhdGVkLXB5dGhvbi1kaXNjb3ZlcmVkLW5ldy15b3JrLXRybmQvaW5kZXguaHRtbA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "New York authorities discover 14-foot reticulated python on the side of the road",
        "description": "(CNN) Authorities in New York's Long Island were stunned to find a massive 14-foot reticulated python lying on the side of the road.\n\nEnvironmental conservation police officers got a call about the out-of-place reptile on February 14, according to a news release Wednesday from the state's Department of Environmental Conservation. The python was lying on the side of the road in the town of Medford on Long Island.\n\nWhen the officers got a closer look at the reptile, they realized it was dead. They removed its body from the road, according to the news release. The department did not specify a cause of death.\n\nThe discovery has triggered an investigation with authorities looking into the owner of the snake. Owning reticulated pythons is illegal in New York unless the owner holds a Dangerous Animal License , the release says\n\nReticulated pythons are native to southern and southeast Asia, according to the Florida Fish and Wildlife Conservation Commission. The species are considered an invasive species in Florida, where it's believed the small wild population stems from escaped or released pets.\n\nRead More",
        "summary": "(CNN) Authorities in New York's Long Island were stunned to find a massive 14-foot reticulated python lying on the side of the road.\nThe python was lying on the side of the road in the town of Medford on Long Island.\nThey removed its body from the road, according to the news release.\nOwning reticulated pythons is illegal in New York unless the owner holds a Dangerous Animal License , the release saysReticulated pythons are native to southern and southeast Asia, according to the Florida Fish and Wildlife Conservation Commission.\nThe species are considered an invasive species in Florida, where it's believed the small wild population stems from escaped or released pets.",
        "keywords": [
            "authorities",
            "python",
            "reptile",
            "14foot",
            "conservation",
            "discover",
            "reticulated",
            "owner",
            "pythons",
            "release",
            "road",
            "species",
            "according",
            "york"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiZWh0dHBzOi8vd3d3LmRhdGFzY2llbmNlY2VudHJhbC5jb20vd2hhdC1tYWtlcy1weXRob24tYS1xdWljay1waWNrLWZvci1kYXRhLWFuYWx5c2lzLWFuZC1kYXRhLXNjaWVuY2Uv0gFpaHR0cHM6Ly93d3cuZGF0YXNjaWVuY2VjZW50cmFsLmNvbS93aGF0LW1ha2VzLXB5dGhvbi1hLXF1aWNrLXBpY2stZm9yLWRhdGEtYW5hbHlzaXMtYW5kLWRhdGEtc2NpZW5jZS9hbXAv?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "What Makes Python a Quick Pick for Data Analysis and Data Science?",
        "description": "Python comes across as an object-oriented high-level programming language with dynamic semantics that allows rapid application development. It has become a general-purpose programming language for a number of reasons. It is the ready pick for data science enthusiasts; who look forward to majoring in the field with the requisite essentials. Not just that, Python has been ranked No.1 (by TIOBE) in the wide array of programming languages doing the rounds worldwide.\n\nProgramming developers with core Python skills are a hot pick among recruiters from agencies ranging from government to financial institutions to tech giants. Today\u2019s world is commanded by easy data tool access and natural propositions in the processes with tech advancements in the form of ace programming languages set rightly in place.\n\nMaking it a highly competitive ground; Python just fits in well raiding the entire landscape of the tech weeds smoothly. The moment you look forth to becoming a data science professional that could command major business decisions with accurate futuristic insights- Programming takes the main stage.\n\nAlthough; it is not a prerequisite to possess an understanding of tech skills before you dive into the field, a basic understanding would go a long way. There are many credible data science certifications available across the board nowadays, to assist and equip you with the most efficient work prowess in the form of core skillsets and credential advancements. Making the most of these certifications would clearly mean a heightened data science career trajectory with amplified growth.\n\nWhat is Data Analysis?\n\nData analysis simply means extracting useful information from data and making business decisions based on the process. It is a routine procedure to make decisions based on experience and reading the future through them. Although, the process involves several steps that lead to amplified growth such as inspecting, cleansing, transforming, and modeling data; to unravel valuable information, draw conclusions, and aid decision-making. Data mining is also used interchangeably with data analysis; although data analysis is an umbrella term. Business intelligence works great with data analysis as its rock. Experienced data analysts deploy innovative programming algorithms to assist in business development and processes wide and far. This is where clever data science skills come into play.\n\nRole of Python in Data Analysis:\n\nNo doubt, programming tools, and techniques enable quick and targeted business decision-making. With Python and other programming languages being strewn in the process of business decision-making; the process gets faster at every step. Python exhibits multiple distinguishing features that enable programming at a supersonic speed and accurate results. The ways in which Python is applied include through:\n\nData Mining\n\nAn experienced data science professional would deploy libraries such as Scrapy and BeautifulSoup to build special programs that have access to structured data collection from the web; scraping and arranging data in the preferred format.\n\nData Processing\n\nNumPy and Pandas are incredibly efficient at arranging big data sets and making math operations and vectorization on arrays easier.\n\nData Visualization\n\nMatplotlib and Seaborn are the most popular Python data visualization libraries used for converting exhaustive lists of numbers into easy graphics, histograms, pie charts, etc.\n\nHigh points of Python:\n\nEase of learning\n\nPython focuses on being an easy-to-read language; that allows newcomers to be at peace with the simple syntax and offers reliable solutions.\n\nFlexible\n\nIts versatility allows flexibility for data models being systemized; developing ML algorithms, and web services; and completing a variety of tasks in possibly no time.\n\nWell-supported\n\nPython garners a huge fan base and is massively used in academic and industrial circles, allowing plenty of libraries available for analytics.\n\nMassive libraries at access\n\nFree and highly popular and easy-to-use libraries are a part of the Python gang base. This allows for an easy breathable space for constant expansion; while providing robust solutions.\n\nGraphics and visualization\n\nWith a gazillion of visualization options at your disposal, Python is a must-have data science skill for becoming an ace data scientist. You can make data readily available for web-ready interactive plots and charts and graphics as well.\n\nBuilt-in data analytics tools\n\nThese built-in data analytics tools can penetrate patterns, correlating information in extensive sets, and providing better insights in no time.\n\nFinal word:\n\nPython is an internationally recognized programming language; rendering itself the most versatile credential on the portfolio to be put to a gazillion usage. The clever automation and easy accurate results bring home the best business insights for amplified growth. This is why Python has become a go-to credential for recruiters worldwide. This is exactly the time to upskill and arm yourself with the most trusted certification in data sciences, which is raging like wildfires in the Amazon. Be a profitable addition to your future recruiter today!",
        "summary": "It is the ready pick for data science enthusiasts; who look forward to majoring in the field with the requisite essentials.\nMaking the most of these certifications would clearly mean a heightened data science career trajectory with amplified growth.\nData mining is also used interchangeably with data analysis; although data analysis is an umbrella term.\nThis is where clever data science skills come into play.\nGraphics and visualizationWith a gazillion of visualization options at your disposal, Python is a must-have data science skill for becoming an ace data scientist.",
        "keywords": [
            "quick",
            "process",
            "programming",
            "python",
            "libraries",
            "business",
            "easy",
            "science",
            "data",
            "tech",
            "pick",
            "makes",
            "language",
            "analysis"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiaGh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMy9hdXRvbWF0ZWQtbWFjaGluZS1sZWFybmluZy1weXRob24tY29tcGFyaXNvbi1kaWZmZXJlbnQtYXBwcm9hY2hlcy5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Automated Machine Learning with Python: A Comparison of Different Approaches",
        "description": "These four automated machine learning tools will help you build ML models quickly for your Data Science projects.\n\n\n\nImage by pch.vector from Freepik\n\n\n\nWith the increase in the data of the more prominent organization, people showed to understand the pattern of sales, marketing, etc., which was being formulated by the vast data being available in the particular organization, people were more and more inclined to learn Machine learning and Data analysis than ever before and this urge is going to retain even post-pandemic.\n\nWhile going through Data handling and hyperparameter tuning for Machine Learning projects, you would have felt the thirst for an automated method that would have saved your time from the conceivable exhaustive process of tuning the billion of parameters followed by trying and testing the different models, which would adequately fit your training dataset.\n\nThe answer to this need is YES; in today's world, many such tools would not only automate the data handling stage but helps in choosing the relevant model for predictive analysis on the testing dataset.\n\n\n\n\n\n\n\nImage by Analytics Vidhya\n\nTherefore, the is a need for Automated Machine learning (AutoML).\n\nSo, in this article, I will give you a brief idea about AutoML in the present times.\n\nWhat is AutoML?\n\nIn simple terms, you can think of Automated machine learning as applying Machine Learning (ML) models to real-world problems by only initiating the process by running specific commands. Eventually, the rest of the work, pipelines, will be taken care of. Specifically, this process automates several steps in the general machine-learning pipeline, such as choosing the best model for our dataset, hyperparameter tuning using cross-validation, etc. Suppose we are curious about thinking of internal working. In that case, the tool will create different pipelines by choosing the different values of hyperparameters and then selecting the pipeline that provides better evaluation metrics on the test dataset.\n\nComparison of various AutoML Platforms\n\nOpen-source and enterprise AutoML solutions differ significantly: open-source solutions can only automate algorithm selection and hyperparameter tuning, whereas enterprise solutions can do much more (see section \"What can we expect from an AutoML tool\"). Furthermore, the results obtained with open-source solutions are far inferior to those obtained with enterprise solutions.\n\nGoogle Cloud AutoML, Microsoft Azure AutoML, H2O.ai, and TPOT are popular automated machine learning (AutoML) tools that provide an easier way to build and deploy machine learning models without requiring coding and data science expertise. However, each tool has its strengths and limitations.\n\nGoogle Cloud AutoML\n\nBecause of its user-friendly interface and high performance, Google Cloud AutoML has grown in popularity. In minutes, you can create your custom machine-learning model. This platform integrates well with various Google Cloud services, which provides scalability and is easy to use from the user's point of view. To find the example code, follow this Link\n\nMicrosoft Azure AutoML\n\nAzure AutoML provides a transparent model selection process for users unfamiliar with coding. It is a cloud-based service that allows you to create and manage machine learning solutions. Azure as a platform can be learned with prior programming experience. This platform has good integration with various Azure services, which eventually can run on GPU instances, and as a result, we can quickly deploy. To find the example code, follow this Link\n\nH2O.ai\n\nThis company provides an open-source package and a commercial AutoML service called Driverless AI. This platform has been widely adopted in financial services and retail industries since its inception. It enables businesses to develop world-class AI models and applications rapidly. This platform is entirely Open source, provides many algorithms to work with, and is suitable for handling big data regarding velocity and volume, etc. To find the example code, follow this Link\n\nTPOT\n\nTPOT (Tree-based Pipeline Optimization Tool) is a free Python package. Despite being free, the package has achieved outstanding results in various datasets, including around 97% accuracy for the Iris dataset, 98% for MNIST digit recognition, and around 10 Mean squared error (MSE) for Boston Housing Prices prediction. This platform is entirely Open source gives very high results in terms of accuracy, and it is swift to work with a high volume of data. To find the example code, follow this Link\n\nMy Verdict on choosing the AutoML Platform\n\nH20, in my opinion, is the best open-source platform for democratizing machine learning. Its comprehensive scope and the H2O Flow web-based interface place it first among open-source solutions. I created a machine learning project for customer churn from the ground up without writing a single line of code.\n\nH20 Driverless AI is the most comprehensive, customizable, and agnostic enterprise solution. While maintaining high control and understanding of the modeling, I quickly generated a model for customer churn that was better than the one from H20-3.\n\nIn conclusion, I hope you have enjoyed this article and found it informative. If you have any suggestions or feedback, please contact me via LinkedIn.\n\n\n\n\n\nAryan Garg is a B.Tech. Electrical Engineering student, currently in the final year of his undergrad. His interest lies in the field of Web Development and Machine Learning. He have pursued this interest and am eager to work more in these directions.\n\n",
        "summary": "Image by Analytics VidhyaTherefore, the is a need for Automated Machine learning (AutoML).\nIn simple terms, you can think of Automated machine learning as applying Machine Learning (ML) models to real-world problems by only initiating the process by running specific commands.\nGoogle Cloud AutoML, Microsoft Azure AutoML, H2O.ai, and TPOT are popular automated machine learning (AutoML) tools that provide an easier way to build and deploy machine learning models without requiring coding and data science expertise.\nIt is a cloud-based service that allows you to create and manage machine learning solutions.\nI created a machine learning project for customer churn from the ground up without writing a single line of code.",
        "keywords": [
            "opensource",
            "models",
            "platform",
            "comparison",
            "learning",
            "python",
            "model",
            "different",
            "automated",
            "data",
            "approaches",
            "automl",
            "machine",
            "solutions",
            "provides"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiNGh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcHl0aG9uLWJhdGNoLXJlbmFtZS1maWxlcy_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiV2h0dHBzOi8vdGhlbmV3c3RhY2suaW8vd2h5LWRvZXMtcHl0aG9uLWtlZXAtZ2V0dGluZy1tb3JlLXBvcHVsYXItZ2l0aHViLWtub3dzLXdoYXRzLXVwL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Why Is Python so Popular? GitHub Knows What\u2019s up",
        "description": "The Python programming language is over 30 years old and still experiencing a 22% growth in popularity year over year, according to GitHub\u2019s annual \u201cOctoverse\u201d top programming languages survey. So why is that?\n\nGithub recently published a blog post that explores Python\u2019s enduring popularity, written by GitHub Developer and Open Source Advocate Rizel Scarlett. The post draws on insights from GitHub\u2019s own users.\n\nIn short, Python is strongly suited for data heavy operations and it\u2019s straightforward to learn.\n\nHTML, CSS, JavaScript are the gateway coding languages for the frontend web. You could consider Python the JavaScript of the backend. It\u2019s multipurpose and straightforward to learn and that makes for a popular entryway for newer developers. Or a good sidestep for those who do front end-programming.\n\nThe second part of why Python is on the rise is because data is on the rise and Python is great with data.\n\nGetting Started with Python\n\nSimilar to JavaScript, Python is a high-level interpreted language and beginner friendly largely in part because of its simple syntax. It uses keywords rather than punctuation and line breaks to define code blocks.\n\nThese syntax design choices help even readers unfamiliar with code writing to more easily identify what the code is doing simply by looking at it, Scarlett writes.\n\nPython Heavy Careers\n\nThink Python and data. So that could be data analytics, financial data, machine learning, or artificial intelligence. Python works well with data because it excels in automating manual, repetitive tasks. Python has automated built-in modules available for commonly used automation.\n\nHere are a few possible career choices, according to GitHub:\n\nMachine Learning and Artificial Intelligence (AI)\n\nSpeaking of data-intensive\u2026 large-scale ML models can take up to billions of parameters of training data and they don\u2019t look to be shrinking. Because of the high amounts of data, automatic scripting and algorithms are important. Python\u2019s data visualization capabilities convert large datasets for AI or ML into comprehensible graphs. OpenAI uses the Python framework Pytorch as its standard framework for deep learning and as a result, ChatGPT is written in Python.\n\nData Science\n\nScarlett asserted that \u201cPython is the top preferred language for data science and research.\u201d This is partly because it\u2019s understandable by people who don\u2019t have a developer background and also because it\u2019s great with large datasets. Collecting and parsing data are time consuming tasks making the use of machine learning fairly common in data science.\n\nPython libraries such as NumPy, Pandas, and Matplotlib are used to automate functions like cleaning, data transformation, and visualization.\n\npython.org has 50 jobs listed which also provides a better understanding of what a career with Python will look like.\n\nSome Links\n\nScarlett also offered a bevy of links to GitHub resources:\n\nGitHub Codespaces gives 60 free hours of free dev environment in the cloud from any device at any speed.\n\nGitHub\u2019s Copilot is an AI pair programmer made to help with the first lines of Python.\n\nThese pre-built Python algorithms include networking flows to physical and neural networks.\n\nHere is GitHub\u2019s step-by-step guide to learning Python in 30 days and a Python Cheatsheet.\n\nHere are some Non-GitHub Python Resources:\n\nAmazon Web Services\u2019 Deep Racer tool is more suited for learning how to train machine learning models but is also a good tool for building on or strengthening a Python foundation.\n\nUdemy offers a course on getting started with Python for someone looking to just get started.\n\nCareer Foundry lists some boot camps that specifically teach Python for anyone looking for a specialized learning environment.\n\nAnd of course\u2026. YouTube!",
        "summary": "The second part of why Python is on the rise is because data is on the rise and Python is great with data.\nGetting Started with PythonSimilar to JavaScript, Python is a high-level interpreted language and beginner friendly largely in part because of its simple syntax.\nSo that could be data analytics, financial data, machine learning, or artificial intelligence.\nOpenAI uses the Python framework Pytorch as its standard framework for deep learning and as a result, ChatGPT is written in Python.\nHere is GitHub\u2019s step-by-step guide to learning Python in 30 days and a Python Cheatsheet.",
        "keywords": [
            "code",
            "looking",
            "learning",
            "python",
            "written",
            "github",
            "popular",
            "whats",
            "knows",
            "data",
            "machine",
            "language",
            "githubs",
            "javascript"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiOWh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMy90b3AtcG9zdHMtZmViLTIwMjMuaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "KDnuggets Top Posts for January 2023: SQL and Python Interview Questions for Data Analysts",
        "description": "SQL and Python Interview Questions for Data Analysts \u2022 5 SQL Visualization Tools for Data Engineers \u2022 5 Free Tools For Detecting ChatGPT, GPT3, and GPT2 \u2022 Top Free Resources To Learn ChatGPT \u2022 Free TensorFlow 2.0 Complete Course \u2022 Learn Data Engineering From These GitHub Repositories \u2022 20 Questions (with Answers) to Detect Fake Data Scientists: ChatGPT Edition \u2022 ChatGPT for Beginners\n\nSpring is in the air in the Northern Hemisphere, and that means (for us far northerners, at least) that snow is melting away, and things are turning green. And not a moment too soon.\n\nWhile we celebrate spring and rejuvenation, let's take a second to look over KDnuggets' top posts for the month of February. As always, popularity is based on pageviews over a normalized time period, with the numbers calling the shots.\n\n\n\n\n\nThanks to everyone who contributed last month, we look forward to more bangers in March. Stay with us!\n\n",
        "summary": "SQL and Python Interview Questions for Data Analysts \u2022 5 SQL Visualization Tools for Data Engineers \u2022 5 Free Tools For Detecting ChatGPT, GPT3, and GPT2 \u2022 Top Free Resources To Learn ChatGPT \u2022 Free TensorFlow 2.0 Complete Course \u2022 Learn Data Engineering From These GitHub Repositories \u2022 20 Questions (with Answers) to Detect Fake Data Scientists: ChatGPT Edition \u2022 ChatGPT for BeginnersSpring is in the air in the Northern Hemisphere, and that means (for us far northerners, at least) that snow is melting away, and things are turning green.\nAnd not a moment too soon.\nWhile we celebrate spring and rejuvenation, let's take a second to look over KDnuggets' top posts for the month of February.\nAs always, popularity is based on pageviews over a normalized time period, with the numbers calling the shots.\nThanks to everyone who contributed last month, we look forward to more bangers in March.",
        "keywords": [
            "questions",
            "tools",
            "posts",
            "kdnuggets",
            "analysts",
            "chatgpt",
            "python",
            "interview",
            "20",
            "learn",
            "2023",
            "data",
            "look",
            "sql",
            "month",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMifGh0dHBzOi8vZGV2ZWxvcGVycy5zbGFzaGRvdC5vcmcvc3RvcnkvMjMvMDMvMTkvMDE1NjIwOC9jb2Rvbi1jb21waWxlcy1weXRob24tdG8tbmF0aXZlLW1hY2hpbmUtY29kZS10aGF0cy1ldmVuLWZhc3Rlci10aGFuLWPSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "'Codon' Compiles Python to Native Machine Code That's Even Faster Than C",
        "description": "Codon is a new \"high-performance Python compiler that compiles Python code to native machine code without any runtime overhead,\" according to its README file on GitHub Its development team includes researchers from MIT's Computer Science and Artificial Intelligence lab, according to this announcement from MIT shared by long-time Slashdot reader Futurepower(R)",
        "summary": "Codon is a new \"high-performance Python compiler that compiles Python code to native machine code without any runtime overhead,\" according to its README file on GitHub Its development team includes researchers from MIT's Computer Science and Artificial Intelligence lab, according to this announcement from MIT shared by long-time Slashdot reader Futurepower(R)",
        "keywords": [
            "readme",
            "code",
            "thats",
            "compiles",
            "python",
            "codon",
            "researchers",
            "team",
            "faster",
            "science",
            "c",
            "native",
            "machine",
            "slashdot",
            "runtime",
            "according",
            "shared"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiUGh0dHBzOi8vdGhlbmV3c3RhY2suaW8vdmV0ZXJhbi1jLWRldmVsb3Blci1zYXlzLXB5dGhvbi1pcy1iZXN0LXN0YXJ0ZXItbGFuZ3VhZ2Uv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Veteran C++ Developer Says Python Is Best Starter Language",
        "description": "New programmers who are looking for a first language and anyone wanting to add another language to their toolkit should start with Python. So says Phil Nash, one of the original authors of the C++ test framework, Catch2, and a developer advocate for SonarSource.\n\n\u201cIt\u2019s a boring choice, but for exciting reasons,\u201d Nash told The New Stack. \u201cIt\u2019s very simple to start with, but it scales with you right up to being a really industrial-strength, very popular language. I don\u2019t think there\u2019s any other language that comes close to covering all of those bases.\u201d\n\nPython or JavaScript for a First Language?\n\nBut what\u2019s wrong with JavaScript as a first language? Well, JavaScript is a good choice, but it was never really designed as a beginner-friendly language, Nash said. This led to a little morality tale about BASIC, a popular 80s programming language that stood for Beginners All-purpose Symbolic Instruction Code. It was pretty, in that it was simple. The problem was, it wasn\u2019t a very good language \u2014 so people didn\u2019t use it for serious applications, until Microsoft rolled out Visual Basic in the 1990s, he said.\n\nThe popular Python is different because it\u2019s simple to use, but as developers become more experienced, they can delve into more sophisticated uses and eventually write real-world applications, he said. JavaScript is also fairly simple, but more by accident than design, Nash contended.\n\n\u201c[JavaScript] got designed as part of something else and accidentally became the most popular language in the world, just because it came bundled with the web basically,\u201d he said. \u201cSo it\u2019s a great language to learn for that reason. It\u2019s just not as beginner friendly.\u201d\n\nPython, on the other hand, covers both bases \u2014 it is beginner friendly and useful, said Nash.\n\n\u201cIt really reads more like pseudocode that you might just write on paper, when you\u2019re sketching out an ideal, that translates into real working code in a production code base,\u201d he said. \u201cYou can\u2019t really get more beginner friendly than that, and it\u2019s also widely used in industry.\u201d\n\nHe moves between Python and JavaScript a lot; and the biggest point of confusion that creates is knowing whether to put a semicolon at the end of lines or not.\n\n\u201cThat\u2019s one of the problems with JavaScript, a lot of things are optional. So semicolons are actually optional, except in some cases where they\u2019re not,\u201d he said. \u201cPython has as part of its mantra that there should be one proper way to do things. It\u2019s not always true, but by and large, they try to design things so there\u2019s an obvious way, the Pythonic way, to do things. Everything looks fairly uniform. JavaScript is almost the opposite of that.\u201d\n\nPython as Second Language: Should You Bother?\n\n\u201cBut it\u2019s irrelevant,\u201d you may say. JavaScript is the king when it comes to the web and you\u2019re a frontend/web developer.\n\nConsider this: With the release of Anaconda\u2019s open source PyScript last year, Python is now making its way to the frontend.\n\n\u201cYou can also use it as a great web technology on the backend, which I do a lot,\u201d he said. \u201cAnd it\u2019s starting to show some promise of being a frontend language as well, although it\u2019s very early days. It\u2019s too early to really tell if that\u2019s going to take off, but the fact that it exists, if you already have Python skills, you can now call yourself (or consider yourself) a frontend developer, at least if you dabbled with it. So it is possible, at least, which you can\u2019t say for various other languages.\u201d\n\nBut let\u2019s say it\u2019s too late for you \u2014 you\u2019ve already learned JavaScript or some other language. Python is also an ideal supplementary language, Nash contended.\n\n\u201cPython is great as a scripting language,\u201d he said. \u201cIt\u2019s full feature for that as well, because it scales to the problem.\u201d\n\nAnother differentiator for Python is that it\u2019s known as a dynamic language; so, for example, when you declare a variable you don\u2019t have to say what type of variable it is (number, string, boolean). The language infers it from how you use it \u2014 much as JavaScript does. That\u2019s not true for Java or C++, which are statically typed languages. Dynamic languages are generally easier for beginners, he added.\n\n\u201cPython is a dynamic language, which means you can make mistakes in the code that only get picked up at runtime, whereas a statically typed language will pick it up at compile time,\u201d he said. \u201cMany people, myself included, generally prefer statically typed languages, particularly for larger more complex code bases. Python does now have optional type annotations, which gives you a lot of the benefits of it, but only if you use an additional static analysis tool.\u201d\n\nSonar offers a static analysis tool that will pick up mismatches in types of use, even in Python, he added.\n\nPython can be used as a friendly frontend to more complex code bases, such as C++.\n\n\u201cYou can wrap it in a Python interface, and then it\u2019s very easy to write Python code against that. So that\u2019s what most ML libraries do, for example, they\u2019re actually written mostly in C++, the underlying heavy lifting, and then the nice, relatively easy Python frontend,\u201d he said. \u201cIt\u2019s really great as a second language. Most developers, if they\u2019re going to learn another language, they should have Python in their toolkit.\u201d\n\nPython is best known for its use in machine learning, but it\u2019s also a popular language in finance, in part because of NumPy and quant computing, which applies mathematical and statistical methods to financial and risk management problems.\n\n\u201cQuant developers, traditionally have worked pretty much exclusively in C++, and maybe with MATLAB for sketching things out, and then they\u2019ll convert their code into C++ for performance,\u201d he said. \u201cBut with Python and NumPy, they find they actually get everything in one package. Their code looks like what they would have written it in MATLAB, but it performs like C ++ under the hood.\u201d\n\nWhat Developers Need to Know about Python\n\nOn the backend for web development, there are two primary Python frameworks: Django and Flask. Nash uses Flask for his web development.\n\n\u201cDjango is more of a traditional web framework, where you had to do everything the Django way. And it\u2019s all in, you\u2019re basically a Django developer now,\u201d he said. \u201cFlask takes a lot of cues from Django but is much less opinionated. And you can actually just drop in exactly the level you want, bring in other dependencies, do things the way you want to do, which is my preference when I\u2019m coding.\u201d\n\nThere are also millions of tutorials and resources online for learning these frameworks or anything with Python, he said. Python is also already bundled on machines with a Unix-based OS, such as MacOS or Linux. Windows machines can add it with a simple install. From there, it can be accessed on the command line by typing Python. It then goes into an interactive shell, where developers can start typing code immediately. It can also be accessed through IDEs such as PyCharm, which is an IDE for Python, or through a plugin with VS Code. It\u2019s not, for instance, a high-performance language, like C++ or Java \u2014 although Python can play a role in those coding projects as well.\n\n\u201dWhere performance doesn\u2019t matter, it\u2019s usually an ideal choice,\u201d he said. \u201cOr you can use it in conjunction with a high-performance language; you can interface into C++ very easily and get the best of both worlds.\u201d",
        "summary": "New programmers who are looking for a first language and anyone wanting to add another language to their toolkit should start with Python.\nWell, JavaScript is a good choice, but it was never really designed as a beginner-friendly language, Nash said.\nPython is also an ideal supplementary language, Nash contended.\n\u201cYou can wrap it in a Python interface, and then it\u2019s very easy to write Python code against that.\nIt\u2019s not, for instance, a high-performance language, like C++ or Java \u2014 although Python can play a role in those coding projects as well.",
        "keywords": [
            "code",
            "things",
            "python",
            "really",
            "best",
            "way",
            "c",
            "nash",
            "starter",
            "language",
            "developer",
            "web",
            "veteran",
            "javascript"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMigQFodHRwczovL3d3dy5maW50ZWNoZnV0dXJlcy5jb20vMjAyMy8wMy9maW50ZWNoLWZ1dHVyZXMtam9icy1kaWQteW91LWtub3ctbGVhcm5pbmctcHl0aG9uLWlzLWEtZ3JlYXQtaWRlYS1mb3IteW91ci1maW50ZWNoLWNhcmVlci_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Did you know learning Python is a great idea for your fintech career?",
        "description": "A September 2022 report by LinkedIn found that job skill sets have changed by around 25% since 2015 \u2013 and are expected to change by 41% by 2025.\n\nThat\u2019s something to keep an eye on for those who have been in the same job for a while or who feel their learning curve has stalled. Keeping your skills sharp, and consistently developing new ones, is one of the biggest ways to ensure career success.\n\nIncreasingly, employers are seeing the value of softer skills, such as good communication, empathy and negotiation skills. While harder to quantify than hard technical skills, 61% of professionals say soft skills in the workplace are just as important as hard skills.\n\nThat\u2019s useful, actionable information, but when it comes to hard skills \u2013 the abilities that can significantly raise your salary expectations \u2013 one of the best things tech workers can do is to learn Python.\n\nPython \u2013 created in the 90s by Guido van Rossum, who named it after the cult TV show Monty Python\u2019s Flying Circus \u2013 is a programming language that is relatively easy to pick up, as its syntax is straightforward and easy to read, making it a great choice for beginners.\n\nAdditionally, it is used by an ever-increasing number of big tech companies as their primary language, including Intel, IBM, Netflix, Facebook and Spotify. YouTube is largely written in Python, and it is one of four main languages deployed at Google. And this growing adoption is driving jobs.\n\nPython was named as the third most in-demand programming language by recruiters in 2022 according to Statista, so there are a host of reasons why it\u2019s well worth looking into. According to GitHub, it remains the second most used programming language on the platform and its usage has grown more than 22% year-on-year.\n\nPython is particularly useful for those working in fintech, finance and neobanking, due to its versatility and capabilities across key areas such as data analysis, web development, machine learning, automation and blockchain.\n\nThe language also has a large community of developers contributing to various open-source projects, libraries and frameworks. This means that if you need help with something, chances are someone has already encountered the issue and solved the problem.\n\nOne of the easiest ways to learn is to explore a massive open online course (MOOC) platform such as Udemy or Coursera. If you want to learn the basics, which can be helpful for understanding technical topics, this can take a few weeks. If you\u2019re more interested in switching jobs, you can expect it to take up to 12 months to be job-ready.\n\nIf you\u2019re ready to go ahead now and apply for a Python-related role, there are three to discover below. And for many more career opportunities, check out the Fintech Futures Job Board.\n\nPython Developer, S&P Global, Manchester\n\nS&P Global is an American publicly traded corporation, with specialisations in financial information and analytics.\n\nThe firm is seeking a Python Developer who will design, develop and maintain efficient and reliable Python code. This may involve working on a variety of projects, such as web applications, AWS Lambda, boto3, machine learning models and more.\n\nTo apply, you\u2019ll need to have strong programming skills, and you should have a solid understanding of key concepts like clean coding, unit testing and object-oriented programming.\n\nApply for this role here.\n\nCounterparty Credit Risk Application Programming Analyst \u2013 AVP (Python), Citi, London (Hybrid)\n\nCiti is seeking a Counterparty Credit Risk Application Programming Analyst \u2013 AVP (Python) to develop and maintain in-house Python libraries and support the build, testing and release management of its credit risk application.\n\nYou will optimise performance and consolidate the workflow across asset classes, and work with teams to integrate model updates and technological enhancements into the application.\n\nTo be considered, you\u2019ll need three years of relevant industry experience with significant experience of programming in Python. Additionally, experience in systems analysis and programming of software applications and familiarity with UNIX shell scripting is preferable.\n\nGet more information on this role here.\n\nCloud Service Operations Engineer (Azure Sys Admin), Metro Bank, London\n\nPython programming/scripting skills are required for this Cloud Service Operations Engineer role at Metro Bank. Your responsibilities will include operating Azure Cloud environments, responding to alerts and events, building cloud service operations processes and procedures and acting as the subject matter expert for cloud operational issues.\n\nPrevious experience operating Azure and AWS Cloud environments\u2013\u2013ideally in a financial services or regulated environment\u2013\u2013is required as is an understanding of automation and cloud technologies including Kubernetes, Terraform and Datadog.\n\nDiscover the full job description here.\n\nFor hundreds more opportunities across fintech, visit the Fintech Futures Job Board today.",
        "summary": "According to GitHub, it remains the second most used programming language on the platform and its usage has grown more than 22% year-on-year.\nAnd for many more career opportunities, check out the Fintech Futures Job Board.\nThe firm is seeking a Python Developer who will design, develop and maintain efficient and reliable Python code.\nTo be considered, you\u2019ll need three years of relevant industry experience with significant experience of programming in Python.\nFor hundreds more opportunities across fintech, visit the Fintech Futures Job Board today.",
        "keywords": [
            "job",
            "programming",
            "experience",
            "understanding",
            "cloud",
            "learning",
            "python",
            "know",
            "fintech",
            "skills",
            "great",
            "idea",
            "language",
            "role",
            "career"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiV2h0dHBzOi8vdWsuc3BvcnRzLnlhaG9vLmNvbS9uZXdzL3Jlc2lsaWVudC1weXRob24taW52YXNpb24tZmxvcmlkYS1jb3VsZC0yMTA1MDA2NTEuaHRtbNIBX2h0dHBzOi8vdWsuc3BvcnRzLnlhaG9vLmNvbS9hbXBodG1sL25ld3MvcmVzaWxpZW50LXB5dGhvbi1pbnZhc2lvbi1mbG9yaWRhLWNvdWxkLTIxMDUwMDY1MS5odG1s?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "'Resilient' Python Invasion in Florida Could Be 'Impossible' to Stop, U.S Officials Say",
        "description": "The U.S. Geological Survey found that the invasive Burmese python population in Florida has expanded from a small area near Everglades National Park to the bottom third of the Sunshine State\n\nMiami Herald/Tribune News Service via Getty\n\nA recent paper produced by the U.S. Geological Survey claims the \"eradication of pythons in southern Florida is likely impossible\" following the invasive species' rapid spread across the state.\n\nAccording to the South Florida Sun-Sentinel, the authors of the paper analyzed 250 research initiatives from over three decades about the snake species' presence in Florida to write \"Burmese pythons in Florida: A synthesis of biology, impacts, and management tools,\" which was published in January.\n\nThe paper found that the first Burmese python sightings in the wild in Florida were recorded in the 1970s around the state's swampy Everglades National Park (ENP). For years, the random python spottings that popped up in the area were written off as \"individual escapes or releases\" until the 1990s and 2000s, \"when confirmation of a reproducing [python] population in ENP prompted their recognition as an established invasive species.\"\n\n\"In the four decades since the first individual was recorded, the python population has grown and spread, consuming native wildlife and altering the food web in the Everglades,\" the U.S. Geological Survey paper stated.\n\nRelated:How Pythons Kill: Expert Explains Shocking but 'Extremely Rare' Case of Woman Swallowed by Giant Snake\n\nMaps shared by the South Florida Sun Sentinel show the impressive size of the Burmese python's spread across southern Florida. The red area on the 2000 map shows where there were reported python removals from 1995 to 2000, according to the outlet, and is contained to the southern tip of Everglades National Park. The 2021 map shows how far the Burmese python \"invasion front\" has traveled in just 20 years. The snakes \u2014 native to southeast Asia \u2014 now appear as far north as Broward and Palm Beach counties and are reaching toward Fort Meyers and Lake Okeechobee.\n\nStory continues\n\nSouth Florida Sun Sentinel/Tribune News Service via Getty\n\n\"Pythons have severely impacted native species and ecosystems in Florida and represent one of the most intractable invasive-species management issues across the globe. The difficulty stems from a unique combination of inaccessible habitat and the cryptic and resilient nature of pythons that thrive in the subtropical environment of southern Florida, rendering them extremely challenging to detect,\" the paper summarized its findings, also addressing some of the reasons it is difficult to gain control of the invasive species.\n\nBurmese pythons are nocturnal, elusive reptiles that avoid crowded areas while wreaking havoc on the natural ecosystem with their enormous appetites and expansive diets.\n\nRelated:Missing Pet Python Found 'Frozen' Inside U-Haul Truck Recovers and Reunites with its Owner\n\n\"Very low individual detection probabilities for Burmese pythons remain the greatest obstacle to developing landscape-scale control programs. Controlling population expansion and minimizing the impact of pythons to natural resources is a pressing concern as billions of dollars have been spent in attempts to restore the Everglades after more than 100 years of extensive wetland alteration,\" the paper said.\n\n\"Although a wide variety of techniques have been employed to catch pythons across southern Florida, many of these tools have not been evaluated rigorously, largely because of difficulty detecting pythons. Although rapid response to reports of individual pythons in new areas is ongoing, there have not been any concerted efforts aimed at suppression or eradication of python populations, even in limited areas,\" the paper added, before calling for more research into new \"cost-effective control methods\" in python management in Florida.\n\nNever miss a story \u2014 sign up for PEOPLE's free daily newsletter to stay up-to-date on the best of what PEOPLE has to offer, from juicy celebrity news to compelling human interest stories.\n\nThe U.S. Geological Survey paper concluded by noting that \"eradication of pythons in southern Florida is likely impossible\" due to the detection challenges and the number of resources required to take on the task.\n\n\"Suppression of the python population, even at local scales, will require strategic coordination of researchers, land managers, funding, public outreach, implementation of several different complementary tools, and rigorous evaluation of these tools.\"\n\nFor more People news, make sure to sign up for our newsletter!\n\nRead the original article on People.",
        "summary": "The paper found that the first Burmese python sightings in the wild in Florida were recorded in the 1970s around the state's swampy Everglades National Park (ENP).\nRelated:How Pythons Kill: Expert Explains Shocking but 'Extremely Rare' Case of Woman Swallowed by Giant SnakeMaps shared by the South Florida Sun Sentinel show the impressive size of the Burmese python's spread across southern Florida.\nThe 2021 map shows how far the Burmese python \"invasion front\" has traveled in just 20 years.\nBurmese pythons are nocturnal, elusive reptiles that avoid crowded areas while wreaking havoc on the natural ecosystem with their enormous appetites and expansive diets.\n\"Suppression of the python population, even at local scales, will require strategic coordination of researchers, land managers, funding, public outreach, implementation of several different complementary tools, and rigorous evaluation of these tools.\"",
        "keywords": [
            "officials",
            "invasion",
            "florida",
            "python",
            "everglades",
            "invasive",
            "resilient",
            "say",
            "paper",
            "stop",
            "burmese",
            "impossible",
            "pythons",
            "survey",
            "population",
            "southern"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiZWh0dHBzOi8vd3d3LnNjaWVudGlmaWNhbWVyaWNhbi5jb20vYXJ0aWNsZS90aGUtc3RyYW5nZS13YXktYS0xMi1mb290LWxvbmctaW52YXNpdmUtcHl0aG9uLXdhcy1jYXVnaHQv0gFuaHR0cHM6Ly93d3cuc2NpZW50aWZpY2FtZXJpY2FuLmNvbS9hcnRpY2xlL3RoZS1zdHJhbmdlLXdheS1hLTEyLWZvb3QtbG9uZy1pbnZhc2l2ZS1weXRob24td2FzLWNhdWdodC8_YW1wPXRydWU?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "The Strange Way a 12-Foot-Long Invasive Python Was Caught",
        "description": "An opossum nicknamed Prairie Dog met a gruesome fate last fall in Key Largo, Fla., when it was squeezed to death and then swallowed whole by a massive, 12-foot-long Burmese python. But you could say it got revenge, thanks to an unusual accessory: a tracking collar that led scientists to its killer.\n\nPrairie Dog was one of dozens of opossums and raccoons that scientists equipped with tracking collars as part of an ongoing study to try to understand how these mammals move across nature reserves on Key Largo, a 33-mile-long island off the coast of southern Florida. But the researchers also hoped that tracking potential prey could lead them to invasive Burmese pythons, which are relative newcomers to Key Largo but have wreaked havoc in the Everglades in mainland Florida for decades with their voracious appetites for mammals.\n\n\u201cA secret, underlying potential application was that [this initiative] could lead to python captures,\u201d says Michael Cove, a conservation ecologist on the project and a research curator of mammalogy at the North Carolina Museum of Natural Sciences. \u201cThat was kind of a hope\u2014not a hope that these animals get eaten but a hope that if they do, they lead to captures and removals.\u201d\n\nFor Cove, the project stems from efforts to protect two species of rodent found only on Key Largo: the Key Largo woodrat (Neotoma floridana smalli) and the Key Largo cotton mouse (Peromyscus gossypinus allapaticola). Younger, smaller pythons eat both critters, which are considered endangered. And the rodents are intriguing beyond that endangered status: Key Largo woodrats build huge nests from dirt and sticks that can house generations of the animals. \u201cThey\u2019re basically building these gigantic compost heaps within the forest, and then a ton of other species use those compost heaps as habitat or foraging grounds,\u201d Cove says.\n\nCove and his colleagues hoped to determine if raccoons and opossums were eating the Key Largo woodrats and Key Largo cotton mice or otherwise competing with these rodents for the island\u2019s limited resources\u2014native fruits and nesting spots, for example. If so, the raccoons and opossums might have been getting a leg up from human residents putting out garbage and cat food that didn\u2019t appeal to the native rodents. Or these animals\u2019 urban excursions might have reduced stress on the local rodents. Scientists hoped that tracking the opossums and raccoons could determine which was the case.\n\nIf a collared opossum or raccoon happened to become a beacon pointing to a massive, invasive snake, well, far be it from the researchers to complain. That\u2019s how, in November 2022, invasive species technician Joe Redinger and three of his colleagues found themselves hauling out of the ground the 12-foot, 62-pound snake that had eaten Prairie Dog the opossum.\n\nThe hours-long snake extraction was the culmination of weeks spent tracking the signal put out by Prairie Dog\u2019s collar after an alert that the animal had stopped moving. The lengthy tracking process was necessary in part because pythons can hide in the Swiss-cheese-like local bedrock. \u201cIt takes a lot of patience; they\u2019re incredibly difficult to find,\u201d Redinger says of the snakes.\n\n\u201cThey\u2019re really well camouflaged; they blend in great with the leaf litter,\u201d he adds, noting that he\u2019s nearly stepped on more than one python in his work. \u201cYou can be right on top of these animals and not even know.\u201d\n\nBut once Redinger and his colleagues had fished the snake out of its hiding spot and euthanized it, there was one fewer Burmese python\u2014and because it was a mature female, some 60 fewer python eggs\u2014in the delicate ecosystem of Key Largo.\n\nThe first credible report of a Burmese python on Key Largo was made in the mid-2000s, but exactly how many of the snakes have made their home on the island in the past couple of decades isn\u2019t clear. \u201cPopulation size estimates are some of the most important missing pieces as far as successful suppression of the Burmese python invasion,\u201d said Jacquelyn Guzy, a population ecologist at the U.S. Geological Survey, who isn\u2019t involved in the project but recently led a detailed review of pythons in Florida, in an e-mail to Scientific American. \u201cSo far there are no reliable python population estimates, and this includes for Key Largo.\u201d\n\nCove noted that more snakes are observed on Key Largo every year but says the fact that there are still plenty of mammals on the island means the situation isn\u2019t as dire as it could be. \u201cWe\u2019re still relatively early in the invasion front,\u201d he says. \u201cThere is still the potential for management before it\u2019s too late.\u201d\n\nIn fact, if the python invasion were more advanced, the collaring project wouldn\u2019t have been possible because so few mammals would be left. Cove compared the situation with what\u2019s happening in the Everglades, where the snakes have reigned for decades and have snapped up not just opossums and raccoons but also bobcats, rabbits and foxes: there aren\u2019t enough mammals living in that ecosystem left to collar. But on Key Largo, midsize mammals are still abundant enough to study\u2014hence the collaring.\n\nKelly Crandall, a master\u2019s student in forestry at Southern Illinois University, who is gathering the mammalian data as part of her master\u2019s degree project, was particularly interested in studying toxoplasmosis, a disease she knew raccoons and opossums might be picking up from the island\u2019s feral cat population.\n\nScientists know that toxoplasmosis can cause animals of some species to become more reckless. So Crandall wondered if infection could make her study subjects more likely to become a snake\u2019s lunch, even as she doubted pythons would ever have an opportunity to eat a collared animal.\n\n\u201cWe had a lot of questions regarding if a python would and could eat a study animal,\u201d Crandall says. She notes that the team has collared only perhaps 2 percent to 5 percent of the island\u2019s total population of raccoons and opossums. \u201cWe didn\u2019t know if they\u2019d be running into big snakes,\u201d Crandall says. \u201cWe didn\u2019t know how many really large snakes that are taking down raccoons and opossums are on the landscape. I also had concerns about whether they would be deterred by the collar.\u201d\n\nBut Prairie Dog isn\u2019t the only collared mammal that has faced a python. In January an alert from a raccoon\u2019s collar eventually led team members to a second large snake they were able to remove. In February a second opossum collar put out an alert, although project personnel tracked it and a few stray hairs down in a pile of snake poop, not a snake. Scientists think the python that snagged the opossum must have been about 16 feet long.\n\nWith three known encounters and two snakes out of the ecosystem, wildlife personnel want to expand the project and lean into the technique as a means of catching pythons, Cove says. But even on Key Largo, collaring prey will only ever be one of a suite of tactics experts use to try to keep pythons at bay.\n\n\u201cPython researchers generally subscribe to the same philosophy: there isn\u2019t one golden method to remove pythons from the landscape,\u201d says Guzy, the USGS ecologist. \u201cEach has its limitations, and so the more tools we have at our disposal, the better.\u201d\n\nAnd every python removal counts, even to Crandall, who loses a hard-earned study animal when a python strikes. \u201cThese ideas ended up removing these two huge snakes from a really delicate ecosystem,\u201d she says. \u201cIt feels amazing.\u201d",
        "summary": "An opossum nicknamed Prairie Dog met a gruesome fate last fall in Key Largo, Fla., when it was squeezed to death and then swallowed whole by a massive, 12-foot-long Burmese python.\nAnd the rodents are intriguing beyond that endangered status: Key Largo woodrats build huge nests from dirt and sticks that can house generations of the animals.\nScientists hoped that tracking the opossums and raccoons could determine which was the case.\nBut on Key Largo, midsize mammals are still abundant enough to study\u2014hence the collaring.\nBut even on Key Largo, collaring prey will only ever be one of a suite of tactics experts use to try to keep pythons at bay.",
        "keywords": [
            "12footlong",
            "largo",
            "snakes",
            "raccoons",
            "python",
            "invasive",
            "key",
            "snake",
            "tracking",
            "way",
            "pythons",
            "strange",
            "caught",
            "opossums",
            "project"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiaGh0dHBzOi8vYS16LWFuaW1hbHMuY29tL2Jsb2cvd29tYW4tY2FwdHVyZXMtaW5zYW5lLXZpZGVvLW9mLWEtZ2lhbnQtcHl0aG9uLWZhbGxpbmctb250by1oZXItcGF0aW8tdGFibGUv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Woman Captures Insane Video of a Giant Python Falling Onto Her Patio Table",
        "description": "\u2193 Continue Reading To See This Amazing Video\n\nThere\u2019s something so serene about enjoying the scenery outdoors from your patio with your family. In Australia, however, that may also mean you meet a large, slithering snake. Although this uninvited guest was a bit startling, it\u2019s known for its rather placid personality. Like true Australians, this family had a laugh throughout this unique encounter. Watch the whole video at the bottom of the page!\n\nAre Diamond Pythons Dangerous?\n\nDiamond pythons have an intimidating appearance because of how large they grow but they are non-venomous snakes. They are not considered a threat to humans. Although absent of venom, they still have fangs and can inflict a powerful, painful bite. In Australia, these snakes are well known for their gentle natures. It\u2019s rare for a diamond python to exhibit threatening behavior like hissing or striking. During the month of November, the females look for roof cavities to hang out in and wait for a potential mate to find her so she can lay eggs. These snakes are closely related to carpet pythons and have black, cream, and yellow colorations.\n\nWildlife in Australia\n\nIn Australia, snakes falling onto patio tables aren\u2019t the only encounters residents have with wildlife. Even those that live in major cities can travel a short distance to check out grassy plains and forests for a personal encounter with nature\u2019s beauties. You can make it a day trip to spot koalas and spotting kangaroos as well as wallabies and wombats. If you prefer an underwater adventure, you can head out to The Great Barrier Reef where over 1,500 fish species and six sea turtle types abound. Explore even deeper to find rays, reef sharks, mollusks, and whales. For a more specific adventure, be sure to plan ahead for the right outing during the appropriate season.\n\nThe Great Barrier Reef in Queensland, Australia. \u00a9iStock.com/Cavan Images\n\nDiamond Python Takes Unexpected Detour\n\nWhen the video below starts, you have a beautiful outdoor view with a huge diamond python cutting right through the center. It has a lush, leafy backdrop as it makes its way from a roof over to a tree branch. It\u2019s traveling a long distance, using its body as a bridge to make it over to the tree. It grabs hold of a branch and tries to steady itself as you hear children in the background watching it in awe. A warning comes through, \u201cIt\u2019s coming down, watch out,\u201d as the snake tries to make it all the way across.\n\nSuddenly, it loses its grip and hurdles over to the family\u2019s patio table. The children scream and all scurry inside. The woman keeps filming from behind the glass, giggling at the event. The python, as if stunned from the sudden relocation, takes a pause, reassessing and planning its next strategy. Its tail landed on the rail and its head landed just off the table. It stares at the deck for a moment then finds the tree it was originally headed for. In the background, one of the children asks, \u201cIs that a python snake?\u201d Yes, yes, it is!\n\nDiamond python pays an unexpected visit.\n\nUp Next:",
        "summary": "It\u2019s rare for a diamond python to exhibit threatening behavior like hissing or striking.\nWildlife in AustraliaIn Australia, snakes falling onto patio tables aren\u2019t the only encounters residents have with wildlife.\n\u00a9iStock.com/Cavan ImagesDiamond Python Takes Unexpected DetourWhen the video below starts, you have a beautiful outdoor view with a huge diamond python cutting right through the center.\nIn the background, one of the children asks, \u201cIs that a python snake?\u201d Yes, yes, it is!\nDiamond python pays an unexpected visit.",
        "keywords": [
            "tree",
            "snakes",
            "diamond",
            "python",
            "falling",
            "snake",
            "woman",
            "giant",
            "australia",
            "video",
            "captures",
            "insane",
            "reef",
            "pythons",
            "table",
            "children",
            "patio"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiOmh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vYnVpbGQtbXVzaWMtcGxheWVyLXVzaW5nLXB5dGhvbi_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiZWh0dHBzOi8vd3d3Lmtyb2xsLmNvbS9lbi9pbnNpZ2h0cy9wdWJsaWNhdGlvbnMvY3liZXIvcHlwaS1wYWNrYWdlcy1kZWxpdmVyLXB5dGhvbi1yZW1vdGUtYWNjZXNzLXRvb2xz0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "PyPi Packages Deliver Python Remote Access Tools",
        "description": "Key Takeaways\n\nKroll has identified a fully featured information stealer and remote access tool (RAT) in the Python Package Index (PyPI) that it is calling \u201cColour-Blind\u201d.\n\nThe malicious package was found as part of a project to obtain more awareness of initial attack vectors and uses a tool developed by Kroll\u2019s threat intelligence team.\n\nThe \u201cColour-Blind\u201d malware points to the democratization of cybercrime that could lead to an intensified threat landscape, as multiple variants can be spawned from code sourced from others.\n\nSummary\n\nAs part of a project to obtain more awareness of initial attack vectors outside of the common phishing and web application exploitation, Kroll\u2019s Cyber Threat Intelligence team has developed a tool to enable the enhanced monitoring of the Python Package Index (PyPI) to find and obtain malicious packages that are added to it.\n\nWe have discovered several packages with varying degrees of sophistication. In the following article, we analyze one of the more interesting malicious packages uncovered named \u201cColour-Blind\u201d by Kroll. Colour-Blind is a fully featured information stealer and remote access tool (RAT) written in Python. In our research, we present a detailed analysis of the functionality and an assessment of the skill level of the actors who have created the malware.\n\nInitial \u201cColourfool\u201d Discovery\n\nThe package \u201ccolourfool\u201d was detected by our tool, and a copy was archived for manual inspection shortly after it was uploaded to PyPI.\n\nThe package contained only one Python file of note, a suspiciously large \u201csetup.py\u201d last modified four days earlier.\n\nFigure 1 - Malicious Package Files and Meta Data\n\nThe sole purpose of the script seemed to be downloading a file from the internet, hiding from the user and executing it. The function, therefore, immediately seemed suspicious and likely malicious.\n\nFigure 2 \u2013 Second Stage Download and Execution\n\nThe function that provided the URL for download was also suspicious. It attempted to get a URL from a pastebin[.]com snippet and failing this returned a hardcoded discord content delivery network URL. Within a legitimate library, the use of hardcoded URLs for downloading executable resources \u201con the fly\u201d is uncommon. This is particularly true when those URLs aren\u2019t persistent and unlikely to be reachable after a short period of time.\n\nFigure 3 \u2013 Calculation of Second Stage URL\n\nOther suspicious aspects of this script were the redirection of the standard out process to a \u201cnull device,\u201d and the copying of the downloaded file into the same directory in which the interpreter \u201cpython.exe\u201d resides. The copy functionality is preceded by a check, resulting in a forced exit if the file already exists. This is a common method the malware uses to avoid reinfection.\n\nThe second stage archive contained only one file \u201ccode.py\u201d which was significantly larger than the script analyzed above; this new file was over 300 kilobytes (KB) and 2,038 lines of code.\n\nFigure 4 \u2013 Second Stage Meta Data\n\nThe new script contains a much larger imports section, including modules that enable malicious activity in the form of keylogging or stealing cookies.\n\nFigure 5 \u2013 Imports Section Showing Modules for Lower-Level Access\n\nOn looking through the code, some of it is blatantly malicious, for example, a function named \u201cdisable_antivirus\u201d where the code attempts to add its location to the Microsoft Defender Antivirus exclusion path in Windows.\n\nFigure 6 \u2013 Overtly Malicious Function Name\n\nDefense Evasion Behavior\n\nIn some other parts of the code, some attempt at obfuscation was made, although it mostly amounted to variables named with a simple pattern that contained only two characters. This was easy to turn \u201chuman readable\u201d by utilizing a regular expression.\n\nFigure 7 \u2013 Obfuscated Variable Names\n\nThe combination of obfuscation alongside blatant malicious code indicates that it is unlikely that all the code was developed by a single entity. It is possible that the final developer mostly utilized other people\u2019s code, adding it via copy and paste.\n\nThis is a similar function for obtaining a URL to that of the original script, however, in this second stage, the Pastebin snippet was encrypted.\n\nFigure 8 \u2013Similar Function to Figure 3, However, a Decryption Routine is Now Present\n\nThe key for decrypting this URL was hardcoded in the script, enabling us to obtain the following domain: \u201cclearstride[.]io\u201d.\n\nSSL information for this domain indicates that the certificate was created on the same date as the original \u201csetup.py\u201d script.\n\nFigure 9 \u2013 SSL/TLS Certificate for C2 Domain\n\nThe malware starts with a call to an external website to retrieve geolocation and other IP- related information.\n\nFigure 10 \u2013 Code for Obtaining Public IP Address Information of Victim Host\n\nA function that looks for indications of running inside a virtual machine is then called.\n\nFigure 11 \u2013 Code for Detection Virtualization Technologies\n\nThe final lookup is for the presence of any security research tools running in the system process list.\n\nFigure 12 \u2013 Security Tool Search\n\nTypically, this kind of defense evasion behavior is commonly seen where the actor is checking to make sure that the malicious code is not running in an automated security sandbox, to avoid it being identified as malicious. In this case, however, after the malware gets the information, it does nothing with most of it. For example, the result from the security research tool search is never referenced or checked. This behavior adds strength to the hypothesis that the code has been plagiarized from multiple sources, and the final developer might not be particularly sophisticated in their methods.\n\nFollowing this, the code tries to protect itself by using a combination of two functions to terminate processes it deems a threat. The first function is solely dedicated to killing Windows Task Manager.\n\nFigure 13 \u2013 Task Manger Kill Code\n\nThe second termination function loops through running processes and kills them based on the presence of hardcoded strings within the window\u2019s text.\n\nFigure 14 \u2013 Code to Find and Terminate Processes Based on Identifying Strings\n\nEstablishing Persistence\n\nThe persistence mechanism the malware uses is to add a Visual Basic (VB) script named \u201cEssentials.vbs\u201d to the \u201cStart Up\u201d folder within the user\u2019s \u201cStart Menu\u201d. The VB script runs a Windows batch file that the malware places in the same folder as \u201cpython.exe\u201d. This batch file will start the malware using Python every time the user logs in.\n\nThe malware\u2019s function for file exfiltration utilizes \u201ctransfer[.]sh,\u201d an anonymous file transfer website that seems to be becoming popular amongst threat actors.\n\nFigure 15 \u2013 Data Exfiltration\n\nThere appears to be some code related to social engineering, generating an error message trying to persuade the user to re-run as administrator. There is also an embedded \u201cSnake\u201d game that appears to be a direct copy of the code from a GitHub repository. This game doesn\u2019t seem to serve a purpose and didn\u2019t start when the malware was run during testing. This could be another artifact indicating the irregular sourcing of this code.\n\nFigure 16 \u2013 Social Engineering Present Within the Source Code\n\nThe malware triggers multiple subprocesses, including threads for cookies, passwords and cryptocurrency wallet theft.\n\nFigure 17 \u2013 Multithreading Code\n\nAs a method of remote control, the malware starts a Flask web application, which it makes accessible to the internet via Cloudflare\u2019s reverse tunnel utility \u201ccloudflared,\u201d bypassing any inbound firewall rules.\n\nColour-Blind Remote Access Tool (RAT) Functionality\n\nThe web application serves as a control panel for the malware, and the available options indicate functionality of a Remote Access Trojan (RAT). The web code for this page is basic and looks somewhat childish in aesthetic, giving rise to our tracking name for this malware \u201cColour-Blind,\u201d based on the original PyPI package name (\u201ccolourfool\u201d) and design choices made here.\n\nFigure 18 \u2013 Screenshot of the Malware Command Panel\n\nThe functionality of the RAT accessible from the control interface includes:\n\nTokens: Dumps to the screen login tokens for several application that use chromium via electron.io or chromium directly as an application framework, a notable example being Discord.\n\nPasswords: Dumps passwords extracted from web browsers to screen\n\nCookies: Dumps all browser cookies to screen\n\nKeys: Dumps to key loggers captured data to screen\n\nApplications: Provides a list of running applications and a button to terminate them\n\nData Dump: Sends all captured data to the C2 URL\n\nScreen: Shows screenshot of the user desktop and allows for rudimentary interaction such as key presses\n\nIP: Looks up IP information and displays it to screen (using a different function to earlier)\n\nOpen Browser: Opens a browser to a given webpage\n\nRun: Runs a command via operating system\n\nText Input: Sends keystroke to the machine\n\nPhantom/Metamask: Steals cryptocurrency wallet information\n\nFigure 19 \u2013 Screenshot of Remote Desktop Viewing Functionality\n\nFigure 20 \u2013 Process Terminate Panel\n\nFigure 21 \u2013 Real-Time Key Logger\n\nFigure 22 \u2013 The RAT running and accessible via Cloudflare Tunnel\n\nWe further examined the code and extracted all the endpoints of the web application and found several that were not linked from the interface.\n\nFigure 23 \u2013 List of all Web Application Endpoints\n\nThe /camera endpoint allows the attacker to spy on an unsuspecting user via a web camera.\n\nFigure 24 \u2013 Web Camera functionality being used to Snoop\n\nThere is also a series of endpoints starting with the letters \u201chvnc,\u201d which deal with a hidden desktop created on the victim\u2019s machine. \u201c/hvncmanager\u201d allows for the starting of a web browser on this hidden desktop.\n\nFigure 25 \u2013 Opening of Chrome Web Browser on Hidden Desktop and not Visible to User\n\n\u201c/hvnc\u201d will open the hidden desktop allowing for the threat actor to interact with it via a mouse and keyboard. The ability to open a web browser in a hidden manner allows the threat actor to interact with the victim\u2019s internet accounts, even those which lock a session cookie to an IP address or other unique host identifiers.\n\nFigure 26 \u2013 Screenshot of Chrome running inside the Hidden Desktop Visible to Actor\n\n\u201c/hvncitem\u201d enables custom commands to be executed on the hidden desktop via manipulation of the URL parameter \u201cstart\u201d.\n\nFigure 27 \u2013 Triggering a Process Start Via Manually Manipulating a Request to Malware\n\nFigure 28 \u2013 Manually Triggered Process Being Run on Hidden Desktop\n\nWhat Colour-Blind Tells Us\n\nFrom analysis of the Colour-Blind malware, it is evident that this RAT has a lot of interesting features. It shows us how the common functionality of malware can easily be written in modern languages such as Python. This malware also provides insights into how the democratization of cybercrime could lead to an intensified threat landscape, as multiple variants can be spawned from code sourced from others. As such, Kroll will continue to monitor open-source language repositories for further malware strains to enable further detection opportunities.\n\nKroll Recommendations",
        "summary": "Key TakeawaysKroll has identified a fully featured information stealer and remote access tool (RAT) in the Python Package Index (PyPI) that it is calling \u201cColour-Blind\u201d.\nColour-Blind is a fully featured information stealer and remote access tool (RAT) written in Python.\nThe package contained only one Python file of note, a suspiciously large \u201csetup.py\u201d last modified four days earlier.\nFigure 7 \u2013 Obfuscated Variable NamesThe combination of obfuscation alongside blatant malicious code indicates that it is unlikely that all the code was developed by a single entity.\nColour-Blind Remote Access Tool (RAT) FunctionalityThe web application serves as a control panel for the malware, and the available options indicate functionality of a Remote Access Trojan (RAT).",
        "keywords": [
            "malicious",
            "tools",
            "deliver",
            "code",
            "function",
            "script",
            "python",
            "hidden",
            "access",
            "threat",
            "pypi",
            "malware",
            "file",
            "tool",
            "packages",
            "remote",
            "web"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiQ2h0dHBzOi8vd3d3Lm5ld3N3ZWVrLmNvbS9naWFudC1zbmFrZS1weXRob24tdG9pbGV0LXRoYWlsYW5kLTE3ODkxNTTSAUlodHRwczovL3d3dy5uZXdzd2Vlay5jb20vZ2lhbnQtc25ha2UtcHl0aG9uLXRvaWxldC10aGFpbGFuZC0xNzg5MTU0P2FtcD0x?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiL2h0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcHl0aG9uLWdwdC0zLWhvdy11c2Uv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMif2h0dHBzOi8vcG9ydHN3aWdnZXIubmV0L2Jsb2cvYnVycC1zdWl0ZS1lbnRlcnByaXNlLWVkaXRpb24tcG93ZXItdG9vbHMtdW5sZWFzaGluZy10aGUtcG93ZXItdG8tdGhlLWNvbW1hbmQtbGluZS1weXRob24tYW5kLW1vcmXSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Burp Suite Enterprise Edition Power Tools: Unleashing the power to the command line, Python, and more",
        "description": "Burp Suite Enterprise Edition Power Tools: Unleashing the power to the command line, Python, and more\n\n\n\n\n\n\n\n\n\n\n\nOllie Whitehouse | 21 March 2023 at 14:30 UTC\n\ntl;dr\n\nWe have released BSEEPT - Burp Suite Enterprise Edition Power Tools which:\n\nIs a command line tool to drive all aspects of the BSEE GraphQL API.\n\nIs a Python client library to allow you to easily utilise the BSEE GraphQL API in your own code be it command line tooling, lambdas, or integration layers.\n\nReturns BSEE's JSON allowing you to parse on the command line with jq and similar.\n\nBackstory\n\nIn January I joined PortSwigger in a more involved capacity as Non-Executive Director++ (the ++ being I can still code whilst sitting in the boardroom). In my first month I spent time coming up to speed on the products, their features, roadmaps, and most importantly their APIs for extensibility and similar.\n\nThese first months saw me produce two extension prototypes using the Montoya API. These used the Google Safe Browsing API to identify known malicious sites in sitemaps and a YAML-powered regular expression engine to identify sensitive information presence / leakage. I then had the fortune of working with Hannah and Alex on the TOTP Authenticate extension to support multi-factor authentication in Burp Suite Enterprise Edition.\n\nI then turned my attention to the Burp Suite Enterprise Edition GraphQL API. It struck me that we had this amazing GraphQL API, which we both use in the product, but also expose to customers. But for DevOps teams and others in the security function to really utilize this required a bit of investment.\n\nSo an objective was born ... write the power tools that teams who work with Burp Suite Enterprise Edition would find valuable.\n\nQue A-Team building music, over 80 commits, lots of learning (I learnt to use a Mac at the same time) and out popped BSEEPT.\n\nBSEEPT allows you to use every aspect of the GraphQL API from the command line or in your own Python code.\n\nQuick Demo\n\nI have written an extensive readme on the GitHub project but I will give an example of how one might use it.\n\nIn this example we will run through several steps:\n\nQuery the run scans. Then pass through jq to just extract the issue titles. Then pass through jq to build a CSV of issue titles, site, and path they were found in.\n\nAll without writing any new code - just using command line tools!\n\nSo we first get the scan details:\n\nbseept % python3 bseept.py --getscans | jq\n\n{\n\n\"data\": {\n\n\"scans\": [\n\n{\n\n\"id\": \"123\",\n\n\"status\": \"succeeded\",\n\n\"site_id\": \"1\",\n\n\"schedule_item\": {\n\n\"id\": \"1\",\n\n\"site\": {\n\n\"id\": \"1\",\n\n\"name\": \"Gin & Juice\"\n\n},\n\n\"schedule\": {\n\n\"initial_run_time\": \"2022-09-02T13:51:14.550Z\",\n\n\"rrule\": \"FREQ=DAILY;INTERVAL=2\"\n\n},\n\n\"has_run_more_than_once\": true,\n\n\"scheduled_run_time\": \"2023-03-15T13:51:14.000Z\"\n\n},\n\n\"scheduled_start_time\": \"2023-03-13T13:51:14.000Z\",\n\n\"start_time\": \"2023-03-13T13:51:54.525Z\",\n\n\"end_time\": \"2023-03-13T14:37:50.525Z\",\n\n\"duration_in_seconds\": 2756,\n\n\"scan_failure_code\": null,\n\n\"scan_metrics\": {\n\n\"crawl_request_count\": 774,\n\n\"unique_location_count\": 54,\n\n\"audit_request_count\": 57437,\n\n\"crawl_and_audit_progress_percentage\": 100,\n\n\"scan_phase\": null,\n\n\"audit_start_time\": null,\n\n\"current_url\": \"https://ginandjuice.shop:443/robots.txt\"\n\n},\n\n\"scan_failure_message\": null,\n\n\"scan_delta\": {\n\n\"new_issue_count\": 0,\n\n\"repeated_issue_count\": 40,\n\n\"regressed_issue_count\": 0,\n\n\"resolved_issue_count\": 0\n\n},\n\n\"issue_counts\": {\n\n\"total\": 40,\n\n\"high\": {\n\n\"total\": 11,\n\n\"firm\": 4,\n\n\"tentative\": 0,\n\n\"certain\": 7\n\n},\n\n\"medium\": {\n\n\"total\": 0,\n\n\"firm\": 0,\n\n\"tentative\": 0,\n\n\"certain\": 0\n\n},\n\n\"low\": {\n\n\"total\": 10,\n\n\"firm\": 5,\n\n\"tentative\": 3,\n\n\"certain\": 2\n\n},\n\n\"info\": {\n\n\"total\": 19,\n\n\"firm\": 1,\n\n\"tentative\": 1,\n\n\"certain\": 17\n\n}\n\n},\n\n\"scanner_version\": \"2023.2.3\",\n\n\"scanner_build_number\": 19390\n\n},\n\n...\n\n\n\n\n\nSecond, extract the issues for the successful scan with the scan ID of 123:\n\nbseept % python3 bseept.py --getscanissues 123 | jq\n\n{\n\n\"data\": {\n\n\"scan\": {\n\n\"issues\": [\n\n{\n\n\"issue_type\": {\n\n\"name\": \"External service interaction (HTTP)\",\n\n\"description_html\": \"<p>External service interaction arises when it is possible to induce an application to interact with an arbitrary external service, such as a web or mail server. The ability to trigger arbitrary external service interactions does not constitute a vulnerability in its own right, and in some cases might even be the intended behavior of the application.\n\nHowever, in many cases, it can indicate a vulnerability with serious consequences.</p>\n\n<p>The ability to send requests to other systems can allow the vulnerable server to be used as an attack proxy.\n\nBy submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with.\n\nThis may include public third-party systems, internal systems within the same organization, or services available on the local loopback adapter of the application server itself.\n\nDepending on the network architecture, this may expose highly vulnerable internal services that are not otherwise accessible to external attackers. </p>\",\n\n\"remediation_html\": \"<p>You should review the purpose and intended use of the relevant application functionality,\n\nand determine whether the ability to trigger arbitrary external service interactions is intended behavior.\n\nIf so, you should be aware of the types of attacks that can be performed via this behavior and take appropriate measures.\n\nThese measures might include blocking network access from the application server to other internal systems, and hardening the application server itself to remove any services available on the local loopback adapter.</p>\n\n<p>If the ability to trigger arbitrary external service interactions is not intended behavior, then you should implement a whitelist of permitted services and hosts, and block any interactions that do not appear on this whitelist.</p>\n\n\n\n<p>Out-of-Band Application Security Testing (OAST) is highly effective at uncovering high-risk features, to the point where finding the root cause of an interaction can be quite challenging. To find the source of an external service interaction, try to identify whether it is triggered by specific application functionality, or occurs indiscriminately on all requests. If it occurs on all endpoints, a front-end CDN or application firewall may be responsible, or a back-end analytics system parsing server logs. In some cases, interactions may originate from third-party systems; for example, a HTTP request may trigger a poisoned email which passes through a link-scanner on its way to the recipient.</p>\",\n\n\"vulnerability_classifications_html\": \"<ul>\n\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/918.html\\\">CWE-918: Server-Side Request Forgery (SSRF)</a></li>\n\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/406.html\\\">CWE-406: Insufficient Control of Network Message Volume (Network Amplification)</a></li>\n\n</ul>\",\n\n\"references_html\": \"<ul>\n\n<li><a href=\\\"https://portswigger.net/blog/introducing-burp-collaborator\\\">Burp Collaborator</a></li>\n\n<li><a href=\\\"https://portswigger.net/burp/application-security-testing/oast\\\">Out-of-band application security testing (OAST)</a></li>\n\n<li><a href=\\\"https://portswigger.net/research/cracking-the-lens-targeting-https-hidden-attack-surface\\\">PortSwigger Research: Cracking the Lens</a></li>\n\n</ul>\"\n\n},\n\n\"confidence\": \"certain\",\n\n\"display_confidence\": null,\n\n\"serial_number\": \"5601616512020228096\",\n\n\"severity\": \"high\",\n\n\"description_html\": \"It is possible to induce the application to perform server-side HTTP and HTTPS requests to arbitrary domains.\n\n\n\nThe payload <b>http://s0t5stlr0i5p270b2o0hxzl1ksqlee24qzdq1f.oastify.com/</b> was submitted in the <b>Referer</b> HTTP header.\n\n\n\nThe application performed an HTTP request to the specified domain.\",\n\n\"remediation_html\": null,\n\n\"path\": \"/catalog\",\n\n\"origin\": \"https://ginandjuice.shop\",\n\n\"novelty\": \"repeated\",\n\n\"tickets\": null,\n\n\"generated_by_extension\": null\n\n},\n\n\n\nThird, we use jq to parse the JSON and print the issue titles from scan 123:\n\nbseept % python3 bseept.py --getscanissues 123 | jq \".[].scan.issues[].issue_type.name\"\n\n\"External service interaction (HTTP)\"\n\n\"External service interaction (HTTP)\"\n\n\"External service interaction (HTTP)\"\n\n\"HTTP response header injection\"\n\n\"External service interaction (HTTP)\"\n\n\"Cross-site scripting (reflected)\"\n\n\"Cross-site scripting (reflected)\"\n\n\"SQL injection\"\n\n\"XML external entity injection\"\n\n\"Cross-site scripting (reflected)\"\n\n\"Client-side template injection\"\n\n\"Strict transport security not enforced\"\n\n\"Password field with autocomplete enabled\"\n\n\"Iterable input\"\n\n\"Iterable input\"\n\n\"Iterable input\"\n\n\"Iterable input\"\n\n\"Iterable input\"\n\n\"Open redirection (DOM-based)\"\n\n\"Open redirection (DOM-based)\"\n\n\"Vulnerable JavaScript dependency\"\n\n\"Cookie without HttpOnly flag set\"\n\n\"Cookie without HttpOnly flag set\"\n\n\"Input returned in response (reflected)\"\n\n\"Cacheable HTTPS response\"\n\n\"TLS certificate\"\n\n\"TLS cookie without secure flag set\"\n\n\"External service interaction (DNS)\"\n\n\"External service interaction (DNS)\"\n\n\"Input returned in response (reflected)\"\n\n\"External service interaction (DNS)\"\n\n\"Input returned in response (reflected)\"\n\n\"Cross-site scripting (reflected)\"\n\n\"Input returned in response (reflected)\"\n\n\"External service interaction (DNS)\"\n\n\"Input returned in response (reflected)\"\n\n\"Input returned in response (reflected)\"\n\n\"Input returned in response (reflected)\"\n\n\"Client-side prototype pollution\"\n\n\"Request URL override\"\n\n\n\nFourth, we build a CSV-like output of issue names, their origin site and path:\n\nbseept % python3 bseept.py --getscanissues 123 | jq '.[].scan.issues[] | \"\\(.issue_type.name),\\(.origin),\\(.path)\"'\n\n\"External service interaction (HTTP),https://ginandjuice.shop,/catalog\"\n\n\"External service interaction (HTTP),https://ginandjuice.shop,/catalog/filter\"\n\n\"External service interaction (HTTP),https://ginandjuice.shop,/catalog/product\"\n\n\"HTTP response header injection,https://ginandjuice.shop,/catalog/product-search-results/5\"\n\n\"External service interaction (HTTP),https://ginandjuice.shop,/catalog/product/stock\"\n\n\"Cross-site scripting (reflected),https://ginandjuice.shop,/catalog/search/3\"\n\n\"Cross-site scripting (reflected),https://ginandjuice.shop,/catalog/search/4\"\n\n\"SQL injection,https://ginandjuice.shop,/catalog/filter\"\n\n\"XML external entity injection,https://ginandjuice.shop,/catalog/product/stock\"\n\n\"Cross-site scripting (reflected),https://ginandjuice.shop,/catalog/search/2\"\n\n\"Client-side template injection,https://ginandjuice.shop,/catalog/search/4\"\n\n\"Strict transport security not enforced,https://ginandjuice.shop,/\"\n\n\"Password field with autocomplete enabled,https://ginandjuice.shop,/login\"\n\n\"Iterable input,https://ginandjuice.shop,/post\"\n\n\"Iterable input,https://ginandjuice.shop,/post\"\n\n\"Iterable input,https://ginandjuice.shop,/post\"\n\n\"Iterable input,https://ginandjuice.shop,/post\"\n\n\"Iterable input,https://ginandjuice.shop,/post\"\n\n\"Open redirection (DOM-based),https://ginandjuice.shop,/catalog/product\"\n\n\"Open redirection (DOM-based),https://ginandjuice.shop,/catalog/product\"\n\n\"Vulnerable JavaScript dependency,https://ginandjuice.shop,/resources/js/angular_1-7-7.js\"\n\n\"Cookie without HttpOnly flag set,https://ginandjuice.shop,/\"\n\n\"Cookie without HttpOnly flag set,https://ginandjuice.shop,/\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/\"\n\n\"Cacheable HTTPS response,https://ginandjuice.shop,/\"\n\n\"TLS certificate,https://ginandjuice.shop,/\"\n\n\"TLS cookie without secure flag set,https://ginandjuice.shop,/\"\n\n\"External service interaction (DNS),https://ginandjuice.shop,/catalog\"\n\n\"External service interaction (DNS),https://ginandjuice.shop,/catalog/filter\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/filter\"\n\n\"External service interaction (DNS),https://ginandjuice.shop,/catalog/product\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/product-search-results/1\"\n\n\"Cross-site scripting (reflected),https://ginandjuice.shop,/catalog/product-search-results/1\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/product-search-results/5\"\n\n\"External service interaction (DNS),https://ginandjuice.shop,/catalog/product/stock\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/search/2\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/search/3\"\n\n\"Input returned in response (reflected),https://ginandjuice.shop,/catalog/search/4\"\n\n\"Client-side prototype pollution,https://ginandjuice.shop,/\"\n\n\"Request URL override,https://ginandjuice.shop,/\"\n\n\n\nThat's it. As mentioned there is an extensive help document with examples of both the command line and code.\n\nIssues and feedback\n\nPlease raise any bugs / feature requests as issues so they can be resolved.\n\nEmail with any questions / feedback to ollie.whitehouse at portswigger [.] net.\n\nGetting it\n\nScoot on over to the BSEEPT - BSEEPT - Burp Suite Enterprise Edition Power Tools GitHub project.",
        "summary": "Burp Suite Enterprise Edition Power Tools: Unleashing the power to the command line, Python, and moreOllie Whitehouse | 21 March 2023 at 14:30 UTCtl;drWe have released BSEEPT - Burp Suite Enterprise Edition Power Tools which:Is a command line tool to drive all aspects of the BSEE GraphQL API.\nIs a Python client library to allow you to easily utilise the BSEE GraphQL API in your own code be it command line tooling, lambdas, or integration layers.\nReturns BSEE's JSON allowing you to parse on the command line with jq and similar.\nBSEEPT allows you to use every aspect of the GraphQL API from the command line or in your own Python code.\nAs mentioned there is an extensive help document with examples of both the command line and code.",
        "keywords": [
            "server",
            "tools",
            "line",
            "service",
            "power",
            "enterprise",
            "application",
            "python",
            "burp",
            "suite",
            "external",
            "unleashing",
            "scripting",
            "response",
            "interaction",
            "returned",
            "command",
            "edition"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiUWh0dHBzOi8vdGhlc2hvdXQuY29tLmF1L2hvc2hpemFraS1sYW5jZXItbGF1bmNoZXMtbmV3LWJldmVyYWdlLWRpc3BlbnNpbmctcHl0aG9uL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Hoshizaki Lancer launches new beverage dispensing python",
        "description": "Hoshizaki Lancer has unveiled a new, state-of-the-art python manufacturing machine, which it has called \u2018a new standard in beverage dispensing\u2019.\n\nBeverage dispense trunk lines (more commonly known as python) transport beverages from storage, such as a cool room, to the dispensing point, such as a beer tap. Beverage dispensing and food services equipment supplier Hoshizaki Lancer\u2019s new machine is able to produce cabled python, which has significant advantages over the non-cabled python used in most venues.\n\nThe new python machine was designed and manufactured in Adelaide in partnership with Asytec. The machine is now housed in Hoshizaki Lancer\u2019s production facility in Beverley, South Australia.\n\n\u201cWe are extremely excited to unveil our new python machine, nicknamed \u2018Monty\u2019,\u201d said Laurie Boxwell, Managing Director ANZ, Hoshizaki Lancer. \u201cThis significant investment is just part of Hoshizaki Lancer\u2019s rich tradition of providing innovative new products for our customers that provide tangible benefits and strong ROI.\u201d\n\nCabled python requires around half as much force to pull it through the conduit, resulting in faster, easier, and safer installation. The diameter is also 25 per cent smaller when looped. This allows the python to be installed around tighter bends, which is of particular benefit to smaller venues.\n\nIn addition, the smaller diameter is easier to store and ship, offering freight and storage savings for customers. Finally, knuckling has been eliminated, meaning that pressure is evenly distributed across the python\u2019s internal tubing when it is packed for shipping. This ensures that each python looks just as good being rolled out at the venue as it did coming out of the python machine.\n\n\u201cThe addition of cabled python to Hoshizaki Lancer\u2019s industry leading beverage dispensing portfolio represents a game-changer in allowing for faster and more efficient installations, while ensuring that the beverage being dispensed is exactly as the producer intended,\u201d Boxwell concluded.\n\nThe new python machine will be able to manufacture Hoshizaki Lancer\u2019s full range of 24 python configurations. It will also quadruple Hoshizaki Lancer\u2019s current output volume, allowing the company to meet rising demand in the beverage industry.",
        "summary": "Hoshizaki Lancer has unveiled a new, state-of-the-art python manufacturing machine, which it has called \u2018a new standard in beverage dispensing\u2019.\nBeverage dispensing and food services equipment supplier Hoshizaki Lancer\u2019s new machine is able to produce cabled python, which has significant advantages over the non-cabled python used in most venues.\n\u201cWe are extremely excited to unveil our new python machine, nicknamed \u2018Monty\u2019,\u201d said Laurie Boxwell, Managing Director ANZ, Hoshizaki Lancer.\nThis ensures that each python looks just as good being rolled out at the venue as it did coming out of the python machine.\nThe new python machine will be able to manufacture Hoshizaki Lancer\u2019s full range of 24 python configurations.",
        "keywords": [
            "lancers",
            "smaller",
            "hoshizaki",
            "beverage",
            "dispensing",
            "python",
            "significant",
            "storage",
            "machine",
            "lancer",
            "launches"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiX2h0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjg3NzQ0L2hvdy10by13cml0ZS1weXRob24tZXh0ZW5zaW9ucy1pbi1ydXN0LXdpdGgtcHlvMy5odG1s0gFjaHR0cHM6Ly93d3cuaW5mb3dvcmxkLmNvbS9hcnRpY2xlLzM2ODc3NDQvaG93LXRvLXdyaXRlLXB5dGhvbi1leHRlbnNpb25zLWluLXJ1c3Qtd2l0aC1weW8zLmFtcC5odG1s?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to write Python extensions in Rust with PyO3",
        "description": "Every programming language has strengths and weaknesses. Python offers many convenient programming conventions but is computationally slow. Rust gives you machine-level speed and strong memory safety but is more complex than Python. The good news is, you can combine the two languages, wielding Python's ease of use to harness Rust's speed and power. The PyO3 project lets you leverage the best of both worlds by writing Python extensions in Rust.\n\nWith PyO3, you write Rust code, indicate how it interfaces with Python, then compile Rust and deploy it directly into a Python virtual environment, where you can use it unobtrusively with your Python code.\n\nThis article is a quick tour of how PyO3 works. You'll learn how to set up a Python project with a PyO3 create , how to expose Rust functions as a Python module, and how to create Python objects like classes and exceptions in Rust.\n\nSetting up a Python project with PyO3\n\nTo start creating a PyO3 project, you need to begin with a Python virtual environment, or venv. This is not just for the sake of having your Python project organized, but also to provide a place to install the Rust crate you'll be building with PyO3. (If you haven't already installed the Rust toolchain, do that now.)\n\nThe exact organization of the project directories can vary. In the examples shown in PyO3's documentation, the PyO3 project is built in a directory that contains the Python project and its virtual environment. Another approach is to create two subdirectories: one for your Python project and its venv, and the other for the PyO3 project. The latter approach makes it easier to keep things organized, so we'll do that:\n\nCreate a new directory to hold both your Python and Rust projects. We'll call them pyexample and rustexample , respectively. In the pyexample directory, create your virtual environment and activate it. We'll eventually add some Python code here. It's important that you perform all your work with both the Rust and Python code in your activated venv. In your activated venv, install the maturin package with pip install maturin . maturin is the tool we use to build our Rust project and integrate it with our Python project. Switch to the Rust project directory and type maturin init . When asked what bindings to select, choose pyo3 . maturin will then generate a Rust project in that directory, complete with a Cargo.toml file that describes the project. Note that the project will be given the same name as the directory it's placed in; in this case it'll be rustexample .\n\nRust functions in a PyO3 project\n\nWhen you create a PyO3 project's scaffolding with maturin , it auto-creates a code stub file in src/lib.rs . This stub contains code for two functions\u2014a single sample function, sum_as_string , and a function named after your project that exposes other functions as a Python module.\n\nHere's an example sum_as_string function:\n\n#[pyfunction] fn sum_as_string(a: usize, b: usize) -> PyResult<String> { Ok((a + b).to_string()) }\n\nThe #[pyfunction] macro, from the pyo3 crate, indicates a given function is to be wrapped with an interface to Python. The arguments it takes in and the results it returns are all translated from and to Python types automatically. (It's also possible to specify Python-native types to take in and return; more on this later.)\n\nIn this example, sum_as_string takes in two arguments that must be translatable to a Rust-native 64-bit integer. For such a case, a Python program would pass in two Python int types. But even then, you'd have to be careful: those int types would need to be expressable as a 64-bit integer. If you passed 2**65 to this function, you'd get a runtime error because a number that big can't be expressed as a 64-bit integer. (We'll talk about another way to get around this limitation later.)\n\nThe return value for this function is a native Python type\u2014a PyResult object that contains a String . The last line of the function returns a String , which the PyO3 wrapper automatically wraps as a Python object.\n\nIt's also possible for pyfunction to describe the signature that a given function will accept\u2014for instance, if you want to accept multiple positional or keyword arguments.\n\nPython and Rust types in PyO3 functions\n\nYou'll want to get famliar with how Python and Rust types map to each other, and make some choices about what types to use.\n\nYour function can accept Rust types that are converted automatically from Python types, but this means containers like dictionaries must be converted entirely at the function boundary. That might be slow if you pass a large object, such as a list with thousands of objects. To that end, this is best done if you're passing a single value, like an integer or a float, or container objects you know aren't going to have many elements.\n\nYou can also accept Python-native types at the function boundary, and use Python-native methods to access them within the function. This is faster at the function boundary, so it's a better choice if you're passing container objects with an indeterminate number of elements. But accessing container objects requires using Python-native methods that are bound by the GIL (Global Interpreter Lock), so you'll need to convert any values from the object into Rust-native types for speed.\n\nPython modules in a PyO3 project\n\npyfunction functions by themselves aren't directly exposed to Python by way of a module. To do this, we need to create a Python module object through PyO3 and expose our pyfunction functions through it.\n\nThe lib.rs file already has a basic version created for you, which looks like this:\n\n#[pymodule] fn rustexample(_py: Python, m: &PyModule) -> PyResult<()> { m.add_function(wrap_pyfunction!(sum_as_string, m)?)?; Ok(()) }\n\nThe pymodule macro indicates the function in question will be exposed as a module to Python, with the same name ( rustexample ). We take each of the previously defined functions and expose them through the module using the .add_function method. This may seem a little boilerplate, but it provides flexibility when creating the module\u2014for example, by allowing you to create submodules if needed.\n\nCompiling a PyO3 project\n\nCompiling your PyO3 project for use in Python is generally pretty simple:\n\nIf you haven't done so already, activate the virtual environment where you installed maturin . Set your Rust project as your current working directory. Run the command maturin dev to build your project.\n\nThe results should look something like this:\n\n(.env) PS D:\\Dev\\pyo3-article\\rustexample> maturin dev -r Updating crates.io index [ ... snip ... ] Downloaded 10 crates (3.2 MB) in 2.50s (largest was `windows-sys` at 2.6 MB) \ud83d\udd17 Found pyo3 bindings \ud83d\udc0d Found CPython 3.11 at D:\\Dev\\pyo3-article\\pyexample\\.env\\Scripts\\python.exe [ ... snip ... ] Compiling rustexample v0.1.0 (D:\\Dev\\pyo3-article\\rustexample) Finished release [optimized] target(s) in 10.86s \ud83d\udce6 Built wheel for CPython 3.11 to [ ... snip ...]\n\n\\.tmpUbXtlF\\rustexample-0.1.0-cp311-none-win_amd64.whl \ud83d\udee0 Installed rustexample-0.1.0\n\nBy default, maturin builds Rust code in pre-release mode. In this example, we passed the -r flag to maturin to build Rust in release mode.\n\nThe resulting code should then be installed directly in your virtual environment, and you should be able to see it with pip list :\n\n(.env) PS D:\\Dev\\pyo3-article\\rustexample> pip list Package Version ----------- ------- maturin 0.14.12 pip 23.0 rustexample 0.1.0 setuptools 67.1.0\n\nTo test out your built package, launch the Python instance in your virtual environment and try importing the package:\n\nPython 3.11.1 (tags/v3.11.1:a7a450f, Dec 6 2022, 19:58:39)\n\n[MSC v.1934 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import rustexample >>> rustexample <module 'rustexample' from 'D:\\\\Dev\\\\pyo3-article\\\\pyexample\\\\\n\n.env\\\\Lib\\\\site-packages\\\\rustexample\\\\__init__.py'>\n\nIt ought to import and run like any other Python package.\n\nAdvanced PyO3\n\nSo far, you've seen only the very basics of what PyO3 can do. But PyO3 supports a good many other Python features, many of which you will likely want to interface with Rust code.\n\nBig integer support\n\nPython automatically converts integers to \"big integers,\" or integers of arbitrary size. If you want to pass a Python integer object into a PyO3 function and use it as a Rust-native big integer, you can do this with pyo3::num_bigint, which uses the existing num_bigint crate. Just remember that big integers might not support all operations.\n\nParallelism\n\nAs with Cython, any purely Rust code that doesn't touch the Python runtime can be run outside of the Python GIL. You can wrap such a function in the Python::allow_threads method to suspend the GIL while it executes. Again, this has to be purely Rust code with no Python objects in use.\n\nHolding the GIL with Rust lifetimes\n\nPyO3 provides a way to hold the GIL by way of Rust's lifetimes mechanism, which gives you a way to take either mutable or shared access to Python objects. Different object types have different GIL rules.\n\nYou can access a generic Python object with the PyAny type, or you can use more precise types like PyTuple or PyList . These are a little faster, since PyO3 can generate code specific to those types. No matter which types you use, you should assume you need to hold the GIL for the entire time you're working with the object.\n\nIf you want a reference to a Python object outside the GIL\u2014for instance, if you're storing a Python object reference in a Rust struct\u2014you can use the Py<T> or PyObject (essentially Py<PyAny> ) types.\n\nFor a Rust object wrapped in a (GIL-holding) Python object\u2014yes, this is possible!\u2014you can use PyCell<T> . You'd typically do this if you wanted to access the Rust object while maintaining its Rust aliasing and reference rules. In that case, the wrapping Python object's behavior doesn't interfere with what you want to do. Likewise, you can use PyRef<T> and PyRefMut<T> to get borrowing references, static and mutable, to such objects.\n\nClasses\n\nYou can define Python classes in PyO3 modules. If you add the #[pyclass] attribute to a Rust struct or a fieldless enum, they can be treated as the basic data structure for a class. To add instance methods, you'd use #[pymethods] with an impl block for the class that contains the functions to use as methods. It's also possible to create class methods, attributes, magic methods, slots, callable classes, and many other common behaviors.\n\nKeep it in mind that Rust's behaviors impose some limitations. You can't provide lifetime parameters for classes; they all have to work as 'static . You also can't use generic parameters on types being used as Python classes.\n\nExceptions\n\nPython exceptions in PyO3 can be created in Rust code with the create_exception! macro, or by importing one of a few predefined standard exceptions with the import_exception! macro. Note that, as with functions, you have to manually add PyO3-created exceptions to a module to make them available to Python.\n\nConclusion\n\nFor a long time, building Python extensions typically meant learning C with all its minimalism and lack of native safeties. Or, you could use a tool like Cython with all its idiosyncrasies. But for developers who already know Rust and want to use it hand-in-hand with Python, PyO3 provides a convenient and powerful way to do it.",
        "summary": "With PyO3, you write Rust code, indicate how it interfaces with Python, then compile Rust and deploy it directly into a Python virtual environment, where you can use it unobtrusively with your Python code.\nYou'll learn how to set up a Python project with a PyO3 create , how to expose Rust functions as a Python module, and how to create Python objects like classes and exceptions in Rust.\nSetting up a Python project with PyO3To start creating a PyO3 project, you need to begin with a Python virtual environment, or venv.\nAnother approach is to create two subdirectories: one for your Python project and its venv, and the other for the PyO3 project.\nPython and Rust types in PyO3 functionsYou'll want to get famliar with how Python and Rust types map to each other, and make some choices about what types to use.",
        "keywords": [
            "code",
            "function",
            "object",
            "python",
            "rustexample",
            "extensions",
            "pyo3",
            "types",
            "maturin",
            "rust",
            "write",
            "project"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiMGh0dHBzOi8vYnVpbHRpbi5jb20vZGF0YS1zY2llbmNlL3B5dGhvbi1mLXN0cmluZ9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Guide to String Formatting in Python Using F-Strings",
        "description": "If you\u2019ve been practicing Python for a while, you likely use \" \" to create strings in Python.\n\nThere\u2019s nothing wrong with that. After all, our first line of Python code was a simple print(\u201cHello World\u201d) . That said, if you want to take your Python strings to the next level, you should use f-strings.\n\nWhat Is Python F-String? F-string is a way to format strings in Python. It was introduced in Python 3.6 and aims to make it easier for users to add variables, comma separators, do padding with zeros and date format.\n\nPython String. | Image: Frank Andrade\n\nF-string was introduced in Python 3.6 and provides a better way to format strings. In this guide, we\u2019ll see how to format strings in Python using f-string. We\u2019ll also learn how to add variables, comma separators, right/left padding with zeros, dates and more.\n\nHow to Format With Python F-String\n\nTo follow this tutorial, make sure you have Python 3.6 or above. Otherwise, f-strings won\u2019t work.\n\nSimple Formating With F-String\n\nF-string provides a better syntax for adding variables to strings.\n\nLet\u2019s print two messages using f-string in Python. To do that, we have to add the f in front of the \u2018\u2019 that we use to create regular strings. We also have to add {} to insert a variable in our string.\n\nage = 20 python_version = 3.8 >>> print(f'Your age is {age}') Your age is 20 >>> print(f'python_version={python_version}') python_version=3.8\n\nAs you can see, using f-string to add variables is simpler than using regular strings and the + operator.\n\nF-string also makes debugging easier too. Instead of printing the variable name and its value, as we did above for the python_version , we only need to write this inside the f-string: {variable_name=}\n\nage = 20 python_version = 3.8 >>> print(f'{age=}') age=20 >>> print(f'{python_version=}') python_version=3.8\n\nNow, let\u2019s see more advanced formatting. For the following sections, we\u2019ll be using the syntax below:\n\nSyntax: {:[width][.precision][type]} Type: d: integers f: floating point numbers *You need to specify precision only in case of floating point numbers\n\nMore on Python: 5 Types of Arguments in Python Function Definitions\n\nHow to Align With Python F-String\n\nThere are very few occasions when you\u2019d need to align a word or text to the right or left, but this is the foundation to fully understanding how to add zeros to the left or right of a number. F-string is very useful when formatting numbers.\n\nAlign to the Right\n\nSay we have a number, and we want to align it to the right. We can do that using the syntax above. In this case, we only need to add the width element.\n\nIf we want to add six blank spaces and align our text to the right, we only need to add a width of eight. The default behavior is to align the text to the right.\n\nnumber = 20 >>> print(f'{number}') 20 >>> print(f'{number:8}') 20 >>> print(f'{number:>8}') 20\n\nIf we want to be more specific, we can add the > , which indicates that the text should be aligned to the right.\n\nAlign to the Left\n\nNow, let\u2019s align our text to the left using _ as our padding character.\n\nnumber = 20 >>> print(f'{number:<8}') 20 >>> print(f'{number:_<8}') 20______\n\nTo complete the width of eight, we added six \u201c_\u201d using the code above.\n\nHow to Pad With Zeros Using Python F-Strings\n\nNow, it\u2019s time to use what we\u2019ve learned in the previous section to format numbers with zeros to the left/right.\n\nRight Padding With Zeros\n\nAs we\u2019ve seen before, we can pick the padding character. In this case, we\u2019ll choose the 0 as our padding character to have five decimals in our float below.\n\nx = 20.123 >>> print(f'{x:0<8}') 20.12300\n\nThis is cool, but sometimes using the width makes things complicated because we have to calculate the final width of our number after adding the zeros.\n\nIt\u2019s simpler to think of the number of decimals we want instead. We can get this using .precision from the syntax shown before. Let\u2019s add zeros until we have five decimals.\n\n>>> print(f'{x:.5f}') 20.12300\n\nIn the code above, 5 represents the precision and f stands for floating point numbers.\n\nLeft Padding With Zeros\n\nNow, let\u2019s add zeros to the left. This is very useful when we need to create customized formats using numbers.\n\nSay we want to obtain the following format: YYYYMMDD , and we have regular numbers from one-to-nine. In this case, we\u2019ll need to add zeros to the left of the month and day.\n\nHere are the two ways to do this with f-string.\n\nyear = 2022 month = 1 day = 5 # YYYYMMDD >>> print(f'{year}{month:0>2}{day:0>2}') 20220105 >>> print(f'{year}{month:02d}{day:02d}') 20220105\n\nHow to Round Float With Python F-Strings\n\nRound Float to \u201cn\u201d Decimals\n\nWhen it comes to rounding float numbers to \u201cn\u201d decimals, it\u2019s more practical to use the .precision with f type.\n\nLet\u2019s round the number below to one decimal.\n\nx = 20.123 >>> print(f'{x:.1f}') 20.1\n\nAn error occurred. Unable to execute JavaScript. Try watching this video on www.youtube.com , or enable JavaScript if it is disabled in your browser.\n\nA tutorial on how to use Python f-string. | Video: Corey Schafer\n\nMore on Python: 10 Python Cheat Sheets Every Developer Should Know\n\nFormat Float to Percentages\n\nNow, let\u2019s round the number and add the % sign.\n\nx = 20.123 >>> print(f'{x:.1f}%') 20.1%\n\nUse Commas as Thousands Separator\n\nWe can also add a comma as a thousands separator. We only need to add , .\n\nx = 1000000 >>> print(f'{x:,}') 1,000,000\n\nHow to Date Format With Python F-Strings\n\nLast but not least, we can import datetime and use the special characters inside our f-string to get proper date formatting.\n\nimport datetime now = datetime.datetime.now() >>> print(f'Today is {now:%B} {now:%-d}, {now:%Y}') Today is May 20, 2022 >>> print(f'{now=:%m-%d-%Y}') now=05-20-2022\n\nHere\u2019s a cheat sheet with more characters that you can use to format date variables in Python.",
        "summary": "That said, if you want to take your Python strings to the next level, you should use f-strings.\nWhat Is Python F-String?\nIn this guide, we\u2019ll see how to format strings in Python using f-string.\nLet\u2019s print two messages using f-string in Python.\nHow to Pad With Zeros Using Python F-StringsNow, it\u2019s time to use what we\u2019ve learned in the previous section to format numbers with zeros to the left/right.",
        "keywords": [
            "string",
            "need",
            "fstrings",
            "fstring",
            "strings",
            "python",
            "guide",
            "20",
            "padding",
            "using",
            "format",
            "zeros",
            "formatting",
            "add"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiWGh0dHBzOi8vdGhlbWVnaGFsYXlhbi5jb20vZW5kYW5nZXJlZC1weXRob24tcmVzY3VlZC1mcm9tLWdoYWRjLW1kY3MtaG91c2UtaW4tZ2Fyby1oaWxscy_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Endangered python rescued from GHADC MDC\u2019s house in Garo Hills",
        "description": "PHULBARI:\n\nA 5-feet long endangered Indian python was rescued from the house of the Member of the Garo Hills Autonomous District Council (GHADC) Habibuz Zaman by teams of GHADC forest staffs at Bolarbita village in Chibinang, the plain belt region of Phulbari, on March 22.\n\nAccording to Wildlife Divisional Forest Officer Rupankar Marak, the python was found in a firewood stack inside the MDC\u2019s house. He clarified that the rescued snake was not kept as a pet, as claimed by a few.\n\nHe further stated that the rescued snake is protected in Schedule I of the Wildlife Protection Act, 1972.\n\nSince the Wildlife department does not have any Range Office in the area, the rescue was conducted by the GHADC forest team. The snake was later handed over to the Wildlife department.",
        "summary": "PHULBARI:A 5-feet long endangered Indian python was rescued from the house of the Member of the Garo Hills Autonomous District Council (GHADC) Habibuz Zaman by teams of GHADC forest staffs at Bolarbita village in Chibinang, the plain belt region of Phulbari, on March 22.\nAccording to Wildlife Divisional Forest Officer Rupankar Marak, the python was found in a firewood stack inside the MDC\u2019s house.\nHe clarified that the rescued snake was not kept as a pet, as claimed by a few.\nHe further stated that the rescued snake is protected in Schedule I of the Wildlife Protection Act, 1972.\nSince the Wildlife department does not have any Range Office in the area, the rescue was conducted by the GHADC forest team.",
        "keywords": [
            "garo",
            "hills",
            "forest",
            "village",
            "rescued",
            "python",
            "mdcs",
            "snake",
            "endangered",
            "zaman",
            "house",
            "department",
            "ghadc",
            "wildlife"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiM2h0dHBzOi8vbWFzaGFibGUuY29tL3VrL2RlYWxzL2xlYXJuLXB5dGhvbi1mb3ItZnJlZdIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "5 of the best online Python courses you can take for free this week",
        "description": "Deal pricing and availability subject to change after time of publication. Learn more about how we select deals\n\nTL;DR: Udemy hosts a wide range of beginner-friendly Python courses(Opens in a new tab), and some of the best examples are available for free for a limited time.\n\nIf you want to learn to code, you should consider starting with Python. This programming language is massively popular and reads like English, making it comparatively easy to understand for someone who\u2019s completely new to the world of coding.\n\nIf you're interested in learning all about this language, your first stop should be Udemy. There is a massive bank of online courses covering Python on Udemy, with some of the best examples available for free. We've checked out all of these free online coding and programming courses, and highlighted a standout selection of beginner-friendly options to get you started.\n\nThese are the best free online Python courses this week:\n\nSo where's the catch? These free courses do not include things like a certificate of completion or direct messaging with the instructor, but that's it. You can still learn at your own pace with unlimited access to all the video content, so those missing features shouldn't hold you back. You don't even need a voucher code to enroll for free.\n\nKickstart a career in coding with the best free online Python courses(Opens in a new tab) on Udemy.",
        "summary": "There is a massive bank of online courses covering Python on Udemy, with some of the best examples available for free.\nWe've checked out all of these free online coding and programming courses, and highlighted a standout selection of beginner-friendly options to get you started.\nThese are the best free online Python courses this week:So where's the catch?\nThese free courses do not include things like a certificate of completion or direct messaging with the instructor, but that's it.\nKickstart a career in coding with the best free online Python courses(Opens in a new tab) on Udemy.",
        "keywords": [
            "online",
            "programming",
            "tab",
            "python",
            "week",
            "courses",
            "best",
            "learn",
            "language",
            "udemy",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiVmh0dHBzOi8vd3d3LnRlY2hyZXB1YmxpYy5jb20vYXJ0aWNsZS9sZWFybi1weXRob24tZnJvbS1zY3JhdGNoLW5vLWV4cGVyaWVuY2UtcmVxdWlyZWQv0gFaaHR0cHM6Ly93d3cudGVjaHJlcHVibGljLmNvbS9hcnRpY2xlL2xlYXJuLXB5dGhvbi1mcm9tLXNjcmF0Y2gtbm8tZXhwZXJpZW5jZS1yZXF1aXJlZC9hbXAv?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Learn Python from scratch for just $34.99, no experience required",
        "description": "Get a solid foundation in the easiest programming language then move on to advanced and specialized courses, including certification exam prep.\n\nWe may be compensated by vendors who appear on this page through methods such as affiliate links or sponsored partnerships. This may influence how and where their products appear on our site, but vendors cannot pay to influence the content of our reviews. For more info, visit our Terms of Use page\n\nCompanies need to keep up with the best tools and skills to stay competitive. And if your company could benefit by having a Python programmer on board, then you\u2019re in luck because it\u2019s the easiest programming language to learn. Now small business owners, freelancers and employees can go from total novice to advanced Python skill levels with The Premium Python Certification Bootcamp Bundle, currently on sale for just $34.99.\n\nThe bundle consists of 13 courses and five of them are geared to absolute beginners with no previous programming experience. You can choose to start with Python for Absolute Beginners & All Ages, or Python Language Fundamentals: Learn Python from Scratch. Or you could learn Python from scratch then go right into the cybersecurity path with Ethical Hacking: Using Python from A to Z.\n\nPython Foundations or the really fun Learn Python 3 by Making a Game are both student faves for total beginners, with ratings of 4.8 out of 5 stars. They\u2019re both taught by Zenva, a world-class online learning platform offering training for skills with the highest demand, such as virtual reality, machine learning, game development and more.\n\nIf you do have some familiarity with Python or another programming language, then you can go straight to Introduction to Python 3 Training and immediately follow up with Advanced Python 3 Training. Then once you have your Python skills firmly in place, you can go to the specialized courses, which have a specific focus.\n\nAutomation saves so much time and effort, so this bundle offers practical-oriented courses, Automate Excel Files with Python OpenPyXL and Web Automation with Selenium Python. You can also choose to dive into artificial intelligence with Artificial Intelligence (AI) in Python: An H2O Approach.\n\nThe Django Training for Python Developers course teaches you how to make web applications, while Image Processing with Python: Build an Instagram-Style Filter should be really appealing to Instagram enthusiasts. Finally, nothing validates your skills on a resume like a certification, and the Python MTA 98-381 Complete Preparation Course teaches what you need to pass an MTA 98-381 Python Certificate exam.\n\nDon\u2019t miss this chance to learn the easiest and one of the most in-demand programming languages in the industry. Get The Premium Python Certification Bootcamp Bundle today while it\u2019s on sale for just $34.99.\n\nPrices and availability are subject to change.",
        "summary": "And if your company could benefit by having a Python programmer on board, then you\u2019re in luck because it\u2019s the easiest programming language to learn.\nNow small business owners, freelancers and employees can go from total novice to advanced Python skill levels with The Premium Python Certification Bootcamp Bundle, currently on sale for just $34.99.\nYou can choose to start with Python for Absolute Beginners & All Ages, or Python Language Fundamentals: Learn Python from Scratch.\nOr you could learn Python from scratch then go right into the cybersecurity path with Ethical Hacking: Using Python from A to Z.Python Foundations or the really fun Learn Python 3 by Making a Game are both student faves for total beginners, with ratings of 4.8 out of 5 stars.\nGet The Premium Python Certification Bootcamp Bundle today while it\u2019s on sale for just $34.99.",
        "keywords": [
            "training",
            "3499",
            "programming",
            "experience",
            "easiest",
            "python",
            "required",
            "language",
            "courses",
            "learn",
            "skills",
            "certification",
            "bundle",
            "scratch"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiXGh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMy8zLWhhcmQtcHl0aG9uLWNvZGluZy1pbnRlcnZpZXctcXVlc3Rpb25zLWRhdGEtc2NpZW5jZS5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "3 Hard Python Coding Interview Questions For Data Science",
        "description": "No mercy today! I have three hard-level Python coding interview questions that require you to be on top of your game in Python and solve business problems.\n\n\n\nImage by Author\n\nIn today\u2019s article, I\u2019ll focus on Python skills for data science. A data scientist without Python is like a writer without a pen. Or a typewriter. Or a laptop. OK, how about this: A data scientist without Python is like me without an attempt at humor.\n\nYou can know Python and not be a data scientist. But the other way around? Let me know if you know someone who made it in data science without Python. In the last 20 years, that is.\n\nTo help you practice Python and interviewing skills, I selected three Python coding interview questions. Two are from StrataScratch, and are the type of questions that require using Python to solve a specific business problem. The third question is from LeetCode, and tests how good you are at Python algorithms.\n\nPython Coding Interview Question #1: Math in Python\n\n\n\nImage by Author\n\nTake a look at this question by Google.\n\n\n\n\n\nLink to the question: https://platform.stratascratch.com/coding/10067-google-fit-user-tracking\n\nYour task is to calculate the average distance based on GPS data using the two approaches. One is taking into consideration the curvature of the Earth, the other is not taking it into consideration.\n\nThe question gives you formulas for both approaches. As you can see, this python coding interview question is math-heavy. Not only do you need to understand this level of mathematics, but you also need to know how to translate it into a Python code.\n\nNot that easy, right?\n\nThe first thing you should do is recognize there\u2019s a math Python module that gives you access to the mathematical functions. You\u2019ll use this module a lot in this question.\n\nLet's start by importing necessary libraries and sine, cosine, arccosine, and radian functions. The next step is to merge the available DataFrame with itself on the user ID, session ID, and day of the session. Also, add the suffixes to IDs so you can distinguish between them.\n\nimport numpy as np import pandas as pd from math import cos, sin, acos, radians df = pd.merge( google_fit_location, google_fit_location, how=\"left\", on=[\"user_id\", \"session_id\", \"day\"], suffixes=[\"_1\", \"_2\"], )\n\nThen find the difference between the two step IDs.\n\ndf['step_var'] = df['step_id_2'] - df['step_id_1']\n\nThe previous step was necessary so we can exclude all the sessions that have only one step ID in the next step. That\u2019s what the questions tell us to do. Here\u2019s how to do it.\n\ndf = df.loc[ df[df[\"step_var\"] > 0] .groupby([\"user_id\", \"session_id\", \"day\"])[\"step_var\"] .idxmax() ]\n\nUse the pandas idxmax() function to access the sessions with the biggest difference between the steps.\n\nAfter we prepared the dataset, now comes the mathematics part. Create a pandas Series and then the for loop. Use the iterrows() method to calculate the distance for each row, i.e., session. This is a distance that takes the Earth's curvature into account, and the code reflects the formula given in the question.\n\ndf[\"distance_curvature\"] = pd.Series() for i, r in df.iterrows(): df.loc[i, \"distance_curvature\"] = ( acos( sin(radians(r[\"latitude_1\"])) * sin(radians(r[\"latitude_2\"])) + cos(radians(r[\"latitude_1\"])) * cos(radians(r[\"latitude_2\"])) * cos(radians(r[\"longitude_1\"] - r[\"longitude_2\"])) ) * 6371 )\n\nNow, do the same thing but considering the Earth is flat. This is the only occasion being a flat-Earther is beneficial.\n\ndf[\"distance_flat\"] = pd.Series() for i, r in df.iterrows(): df.loc[i, \"distance_flat\"] = ( np.sqrt( (r[\"latitude_2\"] - r[\"latitude_1\"]) ** 2 + (r[\"longitude_2\"] - r[\"longitude_1\"]) ** 2 ) * 111 )\n\nTurn the result into a DataFrame and start calculating the output metrics. The first one is the average distance with Earth's curvature. Then the same calculation without the curvature. The final metric is the difference between the two.\n\nresult = pd.DataFrame() result[\"avg_distance_curvature\"] = pd.Series(df[\"distance_curvature\"].mean()) result[\"avg_distance_flat\"] = pd.Series(df[\"distance_flat\"].mean()) result[\"distance_diff\"] = result[\"avg_distance_curvature\"] - result[\"avg_distance_flat\"] result\n\nThe complete code, and its result are given below.\n\nimport numpy as np import pandas as pd from math import cos, sin, acos, radians df = pd.merge( google_fit_location, google_fit_location, how=\"left\", on=[\"user_id\", \"session_id\", \"day\"], suffixes=[\"_1\", \"_2\"], ) df[\"step_var\"] = df[\"step_id_2\"] - df[\"step_id_1\"] df = df.loc[ df[df[\"step_var\"] > 0] .groupby([\"user_id\", \"session_id\", \"day\"])[\"step_var\"] .idxmax() ] df[\"distance_curvature\"] = pd.Series() for i, r in df.iterrows(): df.loc[i, \"distance_curvature\"] = ( acos( sin(radians(r[\"latitude_1\"])) * sin(radians(r[\"latitude_2\"])) + cos(radians(r[\"latitude_1\"])) * cos(radians(r[\"latitude_2\"])) * cos(radians(r[\"longitude_1\"] - r[\"longitude_2\"])) ) * 6371 ) df[\"distance_flat\"] = pd.Series() for i, r in df.iterrows(): df.loc[i, \"distance_flat\"] = ( np.sqrt( (r[\"latitude_2\"] - r[\"latitude_1\"]) ** 2 + (r[\"longitude_2\"] - r[\"longitude_1\"]) ** 2 ) * 111 ) result = pd.DataFrame() result[\"avg_distance_curvature\"] = pd.Series(df[\"distance_curvature\"].mean()) result[\"avg_distance_flat\"] = pd.Series(df[\"distance_flat\"].mean()) result[\"distance_diff\"] = result[\"avg_distance_curvature\"] - result[\"avg_distance_flat\"] result\n\navg_distance_curvature avg_distance_flat distance_diff 0.077 0.088 -0.01\n\nPython Coding Interview Question #2: Graph Theory in Python\n\n\n\nImage by Author\n\nThis is one of the very interesting Python coding interview questions from StrataScratch. It puts you in a very common yet complex situation of a real-life data scientist.\n\nIt\u2019s a question by Delta Airlines. Let\u2019s take a look at it.\n\n\n\n\n\nLink to the question: https://platform.stratascratch.com/coding/2008-the-cheapest-airline-connection\n\nThis question asks you to find the cheapest airline connection with a maximum of two stops. This sounds awfully familiar, doesn\u2019t it? Yes, it\u2019s a somewhat modified shortest path problem: instead of a path, there\u2019s cost instead.\n\nThe solution I\u2019ll show you extensively uses the merge() pandas function. I\u2019ll also use itertools for looping. After importing all the necessary libraries and modules, the first step is to generate all the possible combinations of the origin and destination.\n\nimport pandas as pd import itertools df = pd.DataFrame( list( itertools.product( da_flights[\"origin\"].unique(), da_flights[\"destination\"].unique() ) ), columns=[\"origin\", \"destination\"], )\n\nNow, show only combinations where the origin is different from the destination.\n\ndf = df[df['origin'] != df['destination']]\n\nLet\u2019s now merge the da_flights with itself. I\u2019ll use the merge() function, and the tables will be joined from the left on the destination and the origin. That way, you get all the direct flights to the first destination and then the connecting flight whose origin is the same as the first flight\u2019s destination.\n\nconnections_1 = pd.merge( da_flights, da_flights, how=\"left\", left_on=\"destination\", right_on=\"origin\", suffixes=[\"_0\", \"_1\"], )\n\nThen we merge this result with da_flights. That way, we\u2019ll get the third flight. This equals two stops, which is the maximum allowed by the question.\n\nconnections_2 = pd.merge( connections_1, da_flights[[\"origin\", \"destination\", \"cost\"]], how=\"left\", left_on=\"destination_1\", right_on=\"origin\", suffixes=[\"\", \"_2\"], ).fillna(0)\n\nLet\u2019s now tidy the merge result by assigning the logical column names and calculate the cost of the flights with one and two stops. (We already have the costs of the direct flights!). It\u2019s easy! The total cost of the one-stop flight is the first flight plus the second flight. For the two-stop flight, it\u2019s a sum of the costs for all three flights.\n\nconnections_2.columns = [ \"id_0\", \"origin_0\", \"destination_0\", \"cost_0\", \"id_1\", \"origin_1\", \"destination_1\", \"cost_1\", \"origin_2\", \"destination_2\", \"cost_2\", ] connections_2[\"cost_v1\"] = connections_2[\"cost_0\"] + connections_2[\"cost_1\"] connections_2[\"cost_v2\"] = ( connections_2[\"cost_0\"] + connections_2[\"cost_1\"] + connections_2[\"cost_2\"] )\n\nI will now merge the DataFrame I created with the given DataFrame. This way, I\u2019ll be assigning the costs of each direct flight.\n\nresult = pd.merge( df, da_flights[[\"origin\", \"destination\", \"cost\"]], how=\"left\", on=[\"origin\", \"destination\"], )\n\nNext, merge the above result with connections_2 to get the costs for the flights to destinations requiring one stop.\n\nresult = pd.merge( result, connections_2[[\"origin_0\", \"destination_1\", \"cost_v1\"]], how=\"left\", left_on=[\"origin\", \"destination\"], right_on=[\"origin_0\", \"destination_1\"], )\n\nDo the same for the two-stop flights.\n\nresult = pd.merge( result, connections_2[[\"origin_0\", \"destination_2\", \"cost_v2\"]], how=\"left\", left_on=[\"origin\", \"destination\"], right_on=[\"origin_0\", \"destination_2\"], )\n\nThe result of this is a table giving you costs from one origin to a destination with direct, one-stop, and two-stop flights. Now you only need to find the lowest cost using the min() method, remove the NA values and show the output.\n\nresult[\"min_price\"] = result[[\"cost\", \"cost_v1\", \"cost_v2\"]].min(axis=1) result[~result[\"min_price\"].isna()][[\"origin\", \"destination\", \"min_price\"]]\n\nWith these final lines of code, the complete solution is this.\n\nimport pandas as pd import itertools df = pd.DataFrame( list( itertools.product( da_flights[\"origin\"].unique(), da_flights[\"destination\"].unique() ) ), columns=[\"origin\", \"destination\"], ) df = df[df[\"origin\"] != df[\"destination\"]] connections_1 = pd.merge( da_flights, da_flights, how=\"left\", left_on=\"destination\", right_on=\"origin\", suffixes=[\"_0\", \"_1\"], ) connections_2 = pd.merge( connections_1, da_flights[[\"origin\", \"destination\", \"cost\"]], how=\"left\", left_on=\"destination_1\", right_on=\"origin\", suffixes=[\"\", \"_2\"], ).fillna(0) connections_2.columns = [ \"id_0\", \"origin_0\", \"destination_0\", \"cost_0\", \"id_1\", \"origin_1\", \"destination_1\", \"cost_1\", \"origin_2\", \"destination_2\", \"cost_2\", ] connections_2[\"cost_v1\"] = connections_2[\"cost_0\"] + connections_2[\"cost_1\"] connections_2[\"cost_v2\"] = ( connections_2[\"cost_0\"] + connections_2[\"cost_1\"] + connections_2[\"cost_2\"] ) result = pd.merge( df, da_flights[[\"origin\", \"destination\", \"cost\"]], how=\"left\", on=[\"origin\", \"destination\"], ) result = pd.merge( result, connections_2[[\"origin_0\", \"destination_1\", \"cost_v1\"]], how=\"left\", left_on=[\"origin\", \"destination\"], right_on=[\"origin_0\", \"destination_1\"], ) result = pd.merge( result, connections_2[[\"origin_0\", \"destination_2\", \"cost_v2\"]], how=\"left\", left_on=[\"origin\", \"destination\"], right_on=[\"origin_0\", \"destination_2\"], ) result[\"min_price\"] = result[[\"cost\", \"cost_v1\", \"cost_v2\"]].min(axis=1) result[~result[\"min_price\"].isna()][[\"origin\", \"destination\", \"min_price\"]]\n\nHere\u2019s the code output.\n\norigin destination min_price SFO JFK 400 SFO DFW 200 SFO MCO 300 SFO LHR 1400 DFW JFK 200 DFW MCO 100 DFW LHR 1200 JFK LHR 1000\n\nPython Coding Interview Question #3: Binary Tree in Python\n\n\n\nImage by Author\n\nBesides graphs, you\u2019ll also work with binary trees as a data scientist. That\u2019s why it would be useful if you knew how to solve this Python coding interview question asked by likes of DoorDash, Facebook, Microsoft, Amazon, Bloomberg, Apple, and TikTok.\n\n\n\n\n\nLink to the question: https://leetcode.com/problems/binary-tree-maximum-path-sum/description/\n\nThe constraints are:\n\n\n\n\n\nclass Solution: def maxPathSum(self, root: Optional[TreeNode]) -> int: max_path = -float(\"inf\") def gain_from_subtree(node: Optional[TreeNode]) -> int: nonlocal max_path if not node: return 0 gain_from_left = max(gain_from_subtree(node.left), 0) gain_from_right = max(gain_from_subtree(node.right), 0) max_path = max(max_path, gain_from_left + gain_from_right + node.val) return max(gain_from_left + node.val, gain_from_right + node.val) gain_from_subtree(root) return max_path\n\nThe first step towards the solution is defining a maxPathSum function. To determine if there is a path from the root down the left or right node, write the recursive function gain_from_subtree.\n\nThe first instance is the root of a subtree. If the path is equal to a root (no child nodes), then the gain from a subtree is 0. Then do the recursion in the left and the right node. If the path sum is negative, the question asks not to take it into account; we do that by setting it to 0.\n\nThen compare the sum of the gains from a subtree with the current maximum path and update it if necessary.\n\nFinally, return the path sum of a subtree, which is a maximum of the root plus the left node and the root plus the right node.\n\nThese are the outputs for Cases 1 & 2.\n\n\n\n\n\nSummary\n\nThis time, I wanted to give you something different. There are plenty of Python concepts you should know as a data scientist. This time I decided to cover three topics I don\u2019t see that often: mathematics, graph data structures, and binary trees.\n\nThe three questions I showed you seemed ideal for showing you how to translate these concepts into Python code. Check out \u201cPython coding interview questions\u201d to practice such more Python concepts.\n\n\n\n\n\nNate Rosidi is a data scientist and in product strategy. He's also an adjunct professor teaching analytics, and is the founder of StrataScratch, a platform helping data scientists prepare for their interviews with real interview questions from top companies. Connect with him on Twitter: StrataScratch or LinkedIn.\n\n",
        "summary": "I have three hard-level Python coding interview questions that require you to be on top of your game in Python and solve business problems.\nTo help you practice Python and interviewing skills, I selected three Python coding interview questions.\nPython Coding Interview Question #1: Math in PythonImage by AuthorTake a look at this question by Google.\nAs you can see, this python coding interview question is math-heavy.\nCheck out \u201cPython coding interview questions\u201d to practice such more Python concepts.",
        "keywords": [
            "questions",
            "question",
            "coding",
            "result",
            "python",
            "pdmerge",
            "destination",
            "interview",
            "hard",
            "science",
            "data",
            "howleft"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiYmh0dHBzOi8vd3d3LmNyb3dkc3RyaWtlLmNvbS9ibG9nL3RlY2gtY2VudGVyL2hvdy10by1pbmdlc3QtZGF0YS1pbnRvLWZhbGNvbi1sb2dzY2FsZS11c2luZy1weXRob24v0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to Ingest Data into Falcon LogScale Using Python",
        "description": "This post covers how to ingest data into CrowdStrike Falcon\u00ae LogScale from your MacOS platform using Python. This guide is great for setting up a one-node proof of concept (POC) so you can take advantage of LogScale\u2019s free trial.\n\nBefore you can write your ingest client, you must prepare a good foundation. That means preparing your MacOS instance via the following steps:\n\nDownload Homebrew\n\nUpdate your default MacOS Python\n\nInstall Python Package Manager\n\nDownload LogScale\u2019s libraries\n\nReady? Let\u2019s get started.\n\nPrepare your MacOS instance\n\nOne of the methods of ingestion is to use LogScale\u2019s software libraries that are available in a variety of languages. Today we\u2019ll be working with Python and MacOS.\n\nStep 1: Install Homebrew, a package manager for MacOS. Installing new packages with Homebrew is a simple command line in Terminal, similar to installing new packages in Linux. Follow the instructions on the Homebrew site.\n\nStep 2: Use Homebrew and update your default MacOS Python. As you may know, MacOS 10.15 (Catalina) is currently running on Python 2.7, even though newer releases are available. It\u2019s essential to MacOS that the default Python remains at 2.7. We\u2019ll need to update your Python to the latest version while retaining version 2.7 for essential MacOS functions.\n\nFollow these instructions from Matthew Broberg: The right and wrong way to set Python 3 as default on your Mac.\n\nUpdate for Ventura: For the latest version of MacOS 13.2.1 (Ventura) Python 3.9.x is available, but it isn\u2019t installed by default. You will need to install XCode to install Python using the terminal with the following command:\n\nxcode-select \u2013install\n\nYou can find more information here: Python3 now included with Ventura\n\nStep 3: Once we have the appropriate version of Python running in your MacOS, we\u2019ll need to install Python Package Manager, pip, so that we can install LogScale\u2019s Client Library. Usually pip comes packaged with Python and there\u2019s no additional step to install.\n\nTo see if pip is installed, run the following command in your Terminal:\n\npython -m pip --version\n\nIf pip is installed, you\u2019ll see the following output:\n\nAlternatively, you can manually install pip by opening Terminal and run the following command:\n\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\nThen run python -m pip --version again to verify pip is installed and you have the latest version.\n\nStep 4: Install LogScale\u2019s Python software library. The humiolib library is a wrapper for LogScale\u2019s web API, supporting easy interaction with LogScale directly from Python. You can find more information in our humiolib github.\n\nYou can start the install by running the following this pip command in your Terminal:\n\npip install humiolib\n\nThis command will give you a series of outputs that tells you the files being installed. Once installation is complete, you\u2019ve finished the prep work for your MacOS instance. Now we can move on to the fun stuff.\n\nBuild your ingest client\n\nIt\u2019s time to start writing to an ingest client. Take a look at this example program:\n\nLet\u2019s break down some of the pieces of the code.\n\nAt a minimum, you\u2019ll need to add humiolib to be able to run the codes required to send logs to LogScale.\n\nfrom humiolib.HumioClient import HumioIngestClient\n\nYou\u2019ll also need to create an ingest client with attributes that tells the client where to ship this log.\n\nclient = HumioIngestClient( base_url= \"The url where LogScale resides\", ingest_token=\"An API token from LogScale\" )\n\nAPI Token can be retrieved from your LogScale instance.\n\nStructured log messages\n\nThere are two types of messages you can send to LogScale: structured and unstructured.\n\nIn most of our use cases, LogScale receives structured data as a JSON object. There\u2019s no strict format as to how the JSON object is structured, but you do need to ensure the JSON object is valid. You can check the structure of a JSON object using a tool like JSONLint.\n\nAdditionally, with structured data, you can send valid timestamps as part of the log entry, and LogScale will use the timestamp provided instead of inserting one of its own. Therefore, please ensure that the timestamp for the log entry is less than 24 hours from the time it is sent. Otherwise LogScale will assume it\u2019s older data and drop the log entry without an error message.\n\nBelow is an example of structured data:\n\nstructured_data = [ { \"tags\": { \"host\": \"str(ip)\", \"host_name\": \"str(host)\", \"filename\": \"str(caller.filename)\", \"line\": \"str(caller.lineno)\", \"error_level\": \"INFO\" }, \"events\": [ { \"timestamp\": str(datetime.now(timezone(\"EST\")).isoformat()), #.strftime(\"%Y-%m-%d %H:%M:%S %Z\"), \"attributes\": { \"message\": \"Structured message\", } } ] } ]\n\nOnce the structured data is validated, you can send it to LogScale using the following function where the variable structured_data is the object you created above to store your JSON:\n\nclient.ingest_json_data(structured_data)\n\nSupport for unstructured data\n\nAlternatively, you can send unstructured data to LogScale. Unstructured data are timestamped at ingestion since it\u2019s a long comma delimited string. Thus the timestamp that you may or may not provide in the log entry has no impact on the ingestion timestamp. Below is an example of unstructured data:\n\nunstructured_data = [\"Unstructured message\",\"Hello Python World\",str(datetime.now(timezone(\"EST\")).isoformat())]\n\nYou can send it to LogScale using the following function where unstructured_data is the object that contains your message. Please note the differences in the syntax between ingesting structured and unstructured data.\n\nclient.ingest_messages(unstructured_data)\n\nIf you completed all the steps above, you should start seeing messages appearing in your LogScale instance. Happy logging!",
        "summary": "This post covers how to ingest data into CrowdStrike Falcon\u00ae LogScale from your MacOS platform using Python.\nStep 2: Use Homebrew and update your default MacOS Python.\nStructured log messagesThere are two types of messages you can send to LogScale: structured and unstructured.\nIn most of our use cases, LogScale receives structured data as a JSON object.\nUnstructured data are timestamped at ingestion since it\u2019s a long comma delimited string.",
        "keywords": [
            "pip",
            "falcon",
            "following",
            "install",
            "unstructured",
            "python",
            "ingest",
            "macos",
            "data",
            "using",
            "logscale",
            "send",
            "structured"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiQGh0dHBzOi8vdmlzdWFsc3R1ZGlvbWFnYXppbmUuY29tL2FydGljbGVzLzIwMjMvMDMvMDMvcHl0aG9uLmFzcHjSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python: VS Code Update, Why It's So Popular (& Famous Easter Egg) -- Visual Studio Magazine",
        "description": "News\n\nPython: VS Code Update, Why It's So Popular (& Famous Easter Egg)\n\nPython, the dominant language among Visual Studio Code developers, just received a new update, along with a GitHub post that explains its popularity while also detailing how to enact an easter egg \"inside joke\" with a bit of code.\n\nVS Code March 2023 Update\n\nThat Python is the dominant programming language for VS Code is not even open for debate, backed up by a quick glance at the open-source-based code editor's marketplace, where five of the six most popular tools are related to Python.\n\n[Click on image for larger view.] VS Code Marketplace (source: Microsoft).\n\nAs you can see, the popularity ladder is topped by the main Python extension itself, which is closing in on a whopping 79 million downloads. In total, the top five extensions account for some 273 million downloads. That's pretty much the definition of dominance.\n\n[Click on image for larger view.] The Main VS Code Python Extension (source: Microsoft).\n\nThe VS Code dev team stewards all of those extensions, and this week announced what's new in the latest update to the main extension:\n\nBack button and cancel support added to Create Environment command\n\ncommand Python extension no longer ships isort by default\n\nImprovements to kernel picker selection in Jupyter notebooks\n\nPython for VS Code team on the Python Pulse\n\nExplaining that first item, yesterday's (March 2) post said: \"In this release, we have added functionality that enables you to go Back or Cancel while using the Python: Create Environment command. This change will allow you to return to previous steps to make changes to environment creation or cancel the action altogether by pressing the Escape key or Cancel button. This enhancement has been applied to all Create Environment UI and will be present in the Jupyter extension as well.\"\n\nAbout That Popularity\n\nOn the exact same day, Microsoft-owned GitHub published a post on \"Why Python keeps growing, explained,\" described as \"A deep dive into why more people are using Python than ever, its key use cases, and why it's still so popular 30-plus years after it was first released.\"\n\nGitHub said, \"Python can be used for just about anything, from web and software development to machine learning and artificial intelligence (AI).\"\n\nBesides being a general-purpose language that can be used for projects ranging from web sites to software, it's primarily known for data-analysis projects, especially in the arcane data science field. For example, it's frequently featured in Visual Studio Magazine's Data Science Lab by pre-eminent data scientist James McCaffrey of Microsoft Research. He posts twice-monthly, step-by-step, full-source-code, project posts such as:\n\nGitHub said other characteristics that make it so popular include:\n\nIt's easy to read. Python code uses English keywords rather than punctuation, and its line breaks help define the code blocks. In practice, this means you can identify what the code is designed to do simply by looking at it.\n\nPython code uses English keywords rather than punctuation, and its line breaks help define the code blocks. In practice, this means you can identify what the code is designed to do simply by looking at it. It's open source. You can download the source code, modify it, and use it however you want.\n\nYou can download the source code, modify it, and use it however you want. It's portable. Some languages require you to modify code to run on different platforms, but Python is a cross-platform language, which means you can run the same code on any operating system with a Python interpreter.\n\nSome languages require you to modify code to run on different platforms, but Python is a cross-platform language, which means you can run the same code on any operating system with a Python interpreter. It's extendable. Python code can be written in other languages (such as C++), and users can add low-level modules to the Python interpreter to customize and optimize their tools.\n\nPython code can be written in other languages (such as C++), and users can add low-level modules to the Python interpreter to customize and optimize their tools. It has a broad standard library. This library is available for anyone to access and means that users don't have to write code for every single function -- they can access built-in modules that help with issues in everyday programming and more.\n\nA Sense of Humor\n\nWhat's more, the Python creator and dev team have a sense of humor. The language is not named after a snake. Python documentation explains: \"When he began implementing Python, Guido van Rossum was also reading the published scripts from 'Monty Python's Flying Circus,' a BBC comedy series from the 1970s. Van Rossum thought he needed a name that was short, unique, and slightly mysterious, so he decided to call the language Python.\" (As a totally off-topic aside for a bit of Friday fun: this reporter loved that series and related movies and still laughs to himself when recalling scenes such as when the group of knights fought a vicious rabbit, a wild skirmish ended by a holy hand grenade.)\n\nAnd as far as the name of the Pylance tool, the third-most popular extension, the dev team in 2020 explained: \"The name Pylance serves as a nod to Monty Python's Lancelot, who is the first knight to answer the bridgekeeper's questions in the Holy Grail.\" (Another classic scene.)\n\nFurther speaking to the team's sense of humor, GitHub's blog post detailed the code to enact a famous easter egg (\"Run this command to check out an inside joke among Python developers\"):\n\nimport antigravity def main(): antigravity.fly() if __name__ == '__main__': main()\n\nCurious, this reporter and non-Python programmer installed the requisite tooling and ran the command, which brought up this in a browser:\n\n[Click on image for larger view.] xkcd, A Webcomic of Romance, Sarcasm, Math, and Language (source: xkcd.com).\n\nThere's actually a whole host of Python easter eggs that have been documented over the years, which are detailed in posts like this and this and which even have been curated in a GitHup repo.\n\nTaking into account all of the above, Python would definitely be this reporter's favorite programming language, too, if he could code.",
        "summary": "The Main VS Code Python Extension (source: Microsoft).\nPython code uses English keywords rather than punctuation, and its line breaks help define the code blocks.\nPython code uses English keywords rather than punctuation, and its line breaks help define the code blocks.\nPython code can be written in other languages (such as C++), and users can add low-level modules to the Python interpreter to customize and optimize their tools.\nPython code can be written in other languages (such as C++), and users can add low-level modules to the Python interpreter to customize and optimize their tools.",
        "keywords": [
            "visual",
            "egg",
            "code",
            "update",
            "extension",
            "python",
            "famous",
            "popular",
            "team",
            "run",
            "vs",
            "studio",
            "source",
            "language",
            "easter",
            "magazine",
            "means"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMibWh0dHBzOi8vd3d3LmJsZWVwaW5nY29tcHV0ZXIuY29tL29mZmVyL2RlYWxzL2tpY2tzdGFydC15b3VyLWNvZGluZy1jYXJlZXItd2l0aC10aGlzLTE5LXB5dGhvbi1ib290LWNhbXAtZGVhbC_SAXFodHRwczovL3d3dy5ibGVlcGluZ2NvbXB1dGVyLmNvbS9vZmZlci9kZWFscy9raWNrc3RhcnQteW91ci1jb2RpbmctY2FyZWVyLXdpdGgtdGhpcy0xOS1weXRob24tYm9vdC1jYW1wLWRlYWwvYW1wLw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Kickstart your coding career with this $19 Python boot camp deal",
        "description": "Is there anything Python can't do? If so, nobody has told the countless programmers that depend on it every day. This language has always been versatile, and today you can find Python code behind the most popular smartphone games and on the front lines of the latest cyberwarfare skirmishes.\n\nNeedless to say, Python experts can find work in nearly every area of the tech sector. If you're looking to join them, you should know that this tool can be easier to learn than you think - especially when you've got help. Enter the 2023 Complete Python Certification Bootcamp Bundle.\n\nWhat you've got in this e-learning collection are 12 courses that can advance your coding expertise no matter where you're starting off.\n\nIf you're brand new to Python, you can jump right in with a one-hour foundations course. Here's where you'll learn not just the syntax of Python but the fundamentals of object-oriented programming in general.\n\nFrom there you can move on to mastery of Turtle, Tensorflow, and other tools that work in tandem with Python to create the building blocks of machine learning and other cutting-edge tech.\n\nOnce you're confident enough, you can start putting all this knowledge on a resume by taking a four-hour PCEP prep course.\n\nThese are the lessons that will help you pass that entry exam the first time and prove to prospective employers that you're qualified and ready to join any development team.\n\nIn total, you'll find 130 hours of Python programming training in the full bundle. You can get it all right now for $19, down $20 from the previous sale price.\n\nPrices subject to change.\n\nDisclosure: This is a StackCommerce deal in partnership with BleepingComputer.com. In order to participate in this deal or giveaway you are required to register an account in our StackCommerce store. To learn more about how StackCommerce handles your registration information please see the StackCommerce Privacy Policy. Furthermore, BleepingComputer.com earns a commission for every sale made through StackCommerce.",
        "summary": "Needless to say, Python experts can find work in nearly every area of the tech sector.\nIf you're brand new to Python, you can jump right in with a one-hour foundations course.\nHere's where you'll learn not just the syntax of Python but the fundamentals of object-oriented programming in general.\nIn total, you'll find 130 hours of Python programming training in the full bundle.\nIn order to participate in this deal or giveaway you are required to register an account in our StackCommerce store.",
        "keywords": [
            "programming",
            "coding",
            "19",
            "sale",
            "stackcommerce",
            "boot",
            "python",
            "youve",
            "kickstart",
            "deal",
            "learn",
            "work",
            "right",
            "camp",
            "youre",
            "youll",
            "career"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiNWh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcXVldWUtcHl0aG9uLWltcGxlbWVudC1ob3cv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiQWh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMy9maW5kLXNldC1kaWZmZXJlbmNlLXB5dGhvbi5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to Find Set Difference in Python",
        "description": "Learn how to find the set difference between two Python sets using the difference() method and the difference (-) operator.\n\n\n\nImage by Author\n\nIn Python, sets are built-in data structures that store an unordered collection of non-repeating and immutable elements. You can perform common operations from set theory such as union, intersection, and set difference on Python sets.\n\nThis tutorial will teach you how to compute set difference in Python. You will learn how to use the built-in set method difference() and - operator to find the set difference, and how to debug common errors during the process.\n\nLet\u2019s get started.\n\nWhat Is Set Difference?\n\nBefore computing set difference on Python sets, let's quickly review the set difference operation.\n\nGiven two sets A and B, we can define the following:\n\nA - B : (read as A difference B) is the set of all elements that are present in set A but not in set B.\n\n: (read as A difference B) is the set of all elements that are present in set A but not in set B. B - A: (read as B difference A) is the set of all elements that are present in set B but not in set A.\n\nSet difference is not a commutative operation. Therefore, A - B is not the same as A - B unless the sets A and B are equal, that is, A and B contain the same elements.\n\nWe can see this from the simple example below:\n\n\n\n\n\n\n\nImage by Author\n\nIn this example:\n\nSet A: {2,1,3,12,7}\n\nSet B: {21,3,12,10}\n\nTherefore, A - B is {1,2,7}, the set of elements present only in A. And B - A is {21,10}, the set of elements present only in B.\n\nSet Difference Using the difference() Method\n\nLet us define fruits and to_eat , two Python sets containing strings as the individual elements.\n\n\n\n\n\n\n\nImage by Author\n\nfruits = {\"apples\",\"oranges\",\"berries\",\"cherries\"} to_eat = {\"apples\",\"cereals\",\"berries\",\"bread\"}\n\nNow to find fruits - to_eat, let\u2019s call the difference() method on the fruits set with to_eat as the argument:\n\nprint(fruits.difference(to_eat)) Output >> {'cherries', 'oranges'}\n\nSimilarly, to find to_eat - fruits, let\u2019s call the difference() method on the to_eat set, as shown:\n\nprint(to_eat.difference(fruits)) Output >> {'cereals', 'bread'}\n\nSet Difference Using the Difference Operator (-)\n\nWe can also use the difference operator (-) to find the set difference.\n\nLet\u2019s revisit the same example: For the sets fruits and to_eat , using the difference operator (-) performs an equivalent operation and returns the same results:\n\nprint(fruits - to_eat) Output >> {'cherries', 'oranges'}\n\nprint(to_eat - fruits) Output >> {'cereals', 'bread'}\n\nDebugging Common Set Difference Errors\n\nIn the examples we have coded so far, we computed the difference between two Python sets. But did not emphasize how the difference() method works differently than the difference operator.\n\nYou can call the difference() method on any valid set object. However, you can pass in one or more sets or other Python iterables. Here\u2019s an example.\n\nLet\u2019s define set1 , list1 , list2 , and list3 :\n\nset1 = {1,2,3,4,5} list1 = [2,4,6] list2 = [3,6,9] list3 = [10,11]\n\nNow we can call the difference() method on the set1 and pass in list1 , list2 , and list3 in the method call.\n\nprint(set1.difference(list1,list2,list3)) Output >> {1, 5}\n\nThe difference method, in this case, returns the elements {1,5} from the set that are present only in set1 and not in list1 , list2 , and list3 .\n\nHowever, if you try doing the same thing with the difference operator, you will run into a TypeError exception. As - is a binary operator that operates on two operands, let\u2019s concatenate the three lists, and then try computing the set difference:\n\n>>> set1 - (list1 + list2 + list3) Traceback (most recent call last): File \" \", line 1, in TypeError: unsupported operand type(s) for -: 'set' and 'list'\n\nAs seen above, unlike the difference() method, the - operator only works with Python sets. So you\u2019ll have to cast other iterables into Python sets before computing the difference, as shown:\n\nprint(set1 - set(list1 + list2 + list3)) Output >> {1, 5}\n\nConclusion\n\nLet us quickly review what we\u2019ve learned in this tutorial. To find the set difference, we can use either the difference() method on a Python set or the - operator. While the difference() method call acts on a set and takes in one or more Python iterables as the arguments, the - operator lets you perform set difference operation between two Python sets only. If you\u2019re looking to learn Python, check out this list of free resources.\n\n\n\n\n\nBala Priya C is a technical writer who enjoys creating long-form content. Her areas of interest include math, programming, and data science. She shares her learning with the developer community by authoring tutorials, how-to guides, and more.",
        "summary": "Learn how to find the set difference between two Python sets using the difference() method and the difference (-) operator.\nBefore computing set difference on Python sets, let's quickly review the set difference operation.\nGiven two sets A and B, we can define the following:A - B : (read as A difference B) is the set of all elements that are present in set A but not in set B.: (read as A difference B) is the set of all elements that are present in set A but not in set B.\nImage by Authorfruits = {\"apples\",\"oranges\",\"berries\",\"cherries\"} to_eat = {\"apples\",\"cereals\",\"berries\",\"bread\"}Now to find fruits - to_eat, let\u2019s call the difference() method on the fruits set with to_eat as the argument:print(fruits.difference(to_eat)) Output >> {'cherries', 'oranges'}Similarly, to find to_eat - fruits, let\u2019s call the difference() method on the to_eat set, as shown:print(to_eat.difference(fruits)) Output >> {'cereals', 'bread'}Set Difference Using the Difference Operator (-)We can also use the difference operator (-) to find the set difference.\nTo find the set difference, we can use either the difference() method on a Python set or the - operator.",
        "keywords": [
            "elements",
            "set",
            "python",
            "to_eat",
            "sets",
            "difference",
            "present",
            "operator",
            "b",
            "method"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiL2h0dHBzOi8vbWFzaGFibGUuY29tL3VrL2RlYWxzL2hvdy10by11c2UtcHl0aG9u0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "7 of the best Python courses available for free this week",
        "description": "Deal pricing and availability subject to change after time of publication. Learn more about how we select deals\n\nTL;DR: A wide range of beginner-friendly Python courses(Opens in a new tab) are available for free on Udemy.\n\nUnderstanding Python might seem like something that's completely out of reach, but even masters of this popular coding language had to start somewhere. Everyone is a beginner at some stage, and the good news is that there has never been a better time to be a total coding novice.\n\nThere is a massive bank of online courses covering Python on Udemy, with some of the best examples available for absolutely nothing. We've checked out everything on offer from Udemy, and lined up a selection of the best free online coding and programming courses to get you started with Python.\n\nThese are the best free online Python courses this week:\n\nSomething to note is that these free courses do not include things like a certificate of completion or direct messaging with the instructor, but that shouldn't stop you from enrolling. You can still enroll and start learning at your own pace with unlimited access to all the video content. You don't even need a voucher code to get started.\n\nLearn all about Python with these free online courses on Udemy.",
        "summary": "Learn more about how we select dealsTL;DR: A wide range of beginner-friendly Python courses(Opens in a new tab) are available for free on Udemy.\nThere is a massive bank of online courses covering Python on Udemy, with some of the best examples available for absolutely nothing.\nWe've checked out everything on offer from Udemy, and lined up a selection of the best free online coding and programming courses to get you started with Python.\nThese are the best free online Python courses this week:Something to note is that these free courses do not include things like a certificate of completion or direct messaging with the instructor, but that shouldn't stop you from enrolling.\nLearn all about Python with these free online courses on Udemy.",
        "keywords": [
            "start",
            "online",
            "coding",
            "python",
            "wide",
            "best",
            "week",
            "courses",
            "available",
            "udemy",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMilQFodHRwczovL3d3dy5naGFuYXdlYi5jb20vR2hhbmFIb21lUGFnZS9idXNpbmVzcy9VbmxvY2stdGhlLXBvd2VyLW9mLVB5dGhvbi1FYXN5LWluc3RhbGxhdGlvbi1ndWlkZS1mb3Itd2luZG93cy1hbmQtTWFjLXVzZXJzLXdpdGgtUHlDaGFybS1JREUtMTczNTUxMdIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiUWh0dHBzOi8vc3Rvcmllcy51cS5lZHUuYXUvbmV3cy8yMDIzL3VxLXZldHMtc2F2ZS1nbG9yaW91cy1ncmVlbi1weXRob24vaW5kZXguaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "UQ VETS save glorious green python",
        "description": "Warning: this story contains images and video of surgical procedures.\n\nGloria, a beloved pet green tree python, bit off more than she could chew and ingested a puppy pee pad along with her dinner.\n\nLuckily, her attentive owners noticed something was amiss, and took the snake to the UQ VETS clinic at Gatton for treatment.\n\nIffy Glendinning, UQ VETS avian and exotics veterinary technician, said the puppy pad was being used as bedding in Gloria\u2019s enclosure and was ingested as she ate a rat as part of her routine diet.",
        "summary": "Warning: this story contains images and video of surgical procedures.\nGloria, a beloved pet green tree python, bit off more than she could chew and ingested a puppy pee pad along with her dinner.\nLuckily, her attentive owners noticed something was amiss, and took the snake to the UQ VETS clinic at Gatton for treatment.\nIffy Glendinning, UQ VETS avian and exotics veterinary technician, said the puppy pad was being used as bedding in Gloria\u2019s enclosure and was ingested as she ate a rat as part of her routine diet.",
        "keywords": [
            "ingested",
            "vets",
            "tree",
            "green",
            "python",
            "warning",
            "pad",
            "video",
            "uq",
            "used",
            "glorious",
            "puppy",
            "save",
            "veterinary"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiWGh0dHBzOi8vd3d3LmFuYWx5dGljc2luc2lnaHQubmV0LzEwLWVzc2VudGlhbC1weXRob24tbGlicmFyaWVzLWZvci1kYXRhLXNjaWVuY2UtaW4tMjAyMy_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "You are being redirected...",
        "description": "",
        "summary": "",
        "keywords": [
            "redirected"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiS2h0dHBzOi8vd3d3LnRlY2hyZXB1YmxpYy5jb20vYXJ0aWNsZS9zdGFydC1idWlsZGluZy13ZWJzaXRlcy1weXRob24tZGphbmdvL9IBT2h0dHBzOi8vd3d3LnRlY2hyZXB1YmxpYy5jb20vYXJ0aWNsZS9zdGFydC1idWlsZGluZy13ZWJzaXRlcy1weXRob24tZGphbmdvL2FtcC8?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Start building your own websites with Python and Django",
        "description": "The seven-course Python & Django Web Development Bundle is on sale for less than $30 for a limited time online.\n\nWe may be compensated by vendors who appear on this page through methods such as affiliate links or sponsored partnerships. This may influence how and where their products appear on our site, but vendors cannot pay to influence the content of our reviews. For more info, visit our Terms of Use page\n\nPython is the world\u2019s most popular programming language for good reason. Not only is it easier to learn than other programming languages, but its general-purpose and highly scalable nature makes it an especially valuable tool for a programmer.\n\nIf you\u2019re looking to improve your skills this year, learning Python is a great step to take. What better way to learn Python than to understand how to apply it to web development? In The Python & Django Web Development Bundle, you\u2019ll get seven courses and 10 hours of training teaching you how to use Python and Django to build complete websites.\n\nThese courses are taught by John Elder, creator of one of the first internet advertising networks in 1997. Starting out, you\u2019ll download and install Python 3 for free, understand basic computer science concepts, learn object-oriented programming and get familiar with the basics of Python. From there, you\u2019ll get a basic introduction to Django and how it works with Python. You\u2019ll install Django and learn how to build simple websites, learn basic CSS with Bootstrap, and discover how to create views and pages and use templates.\n\nAs you progress, you\u2019ll dive into real-life projects to build out your skills and resume. Some of the projects you\u2019ll take on include a web authentication app, cryptocurrency news site, crypto portfolio app, to-do app and more. Through your work, you\u2019ll get familiar with a range of tools that will help you streamline your workflow.\n\nBecome a web development expert in Python. For a limited time, you can get The Python & Django Web Development Bundle for a major discount at just $29.\n\nPrices and availability are subject to change.",
        "summary": "The seven-course Python & Django Web Development Bundle is on sale for less than $30 for a limited time online.\nWhat better way to learn Python than to understand how to apply it to web development?\nIn The Python & Django Web Development Bundle, you\u2019ll get seven courses and 10 hours of training teaching you how to use Python and Django to build complete websites.\nYou\u2019ll install Django and learn how to build simple websites, learn basic CSS with Bootstrap, and discover how to create views and pages and use templates.\nFor a limited time, you can get The Python & Django Web Development Bundle for a major discount at just $29.",
        "keywords": [
            "start",
            "building",
            "programming",
            "websites",
            "development",
            "python",
            "basic",
            "web",
            "learn",
            "build",
            "bundle",
            "django",
            "youll"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiYGh0dHBzOi8vd3d3LmFuYWx5dGljc2luc2lnaHQubmV0L2RlYnVnZ2luZy1pbi1weXRob24tYmVzdC1wcmFjdGljZXMtZm9yLWZpbmRpbmctYW5kLWZpeGluZy1idWdzL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "You are being redirected...",
        "description": "",
        "summary": "",
        "keywords": [
            "redirected"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMigAFodHRwczovL2NyYWNrbWFnYXppbmUubmV0LzIwMjMvMDMvcGVhY29jay1zb2NpZXR5LWNvbmZpcm1zLWp1bGlhbmEtaHV4dGFibGUtZGotcHl0aG9uLWFuZC1pLWpvcmRhbi1mb3ItMTB0aC1hbm5pdmVyc2FyeS1lZGl0aW9uL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Peacock Society confirms Juliana Huxtable, DJ Python and I. JORDAN for 10th anniversary edition",
        "description": "The Paris festival turns 10 this summer.\n\nPeacock Society has shared the full line-up for its 10th anniversary celebrations, taking place on 8-9 July across four stages at open-air setting Parc de Choisy. For 2023, the festival is calling on a plethora of French acts and international artists, including the likes of I. JORDAN, SHERELLE, Eris Drew, Dixon and Bambounou, who will go back-to-back with Bradley Zero.\n\nElsewhere, the line-up for this year\u2019s edition is completed by Juliana Huxtable, Mall Grab, Richie Hawtin, Gabber Eleganza, DJ Python and more, with organisers taking a \u201cback to its basics\u201d approach as they mark its milestone birthday. \u201cAs always, Peacock makes it a point of honour to represent a wide variety of electronic cultures, from historical styles to new alternative trends,\u201d stated programmer Paul Bonabesse. \u201cNew trends are to be explored every year, and we are lucky to have a French scene that is at the cutting-edge, full of talent.\u201d\n\nPeacock Society returns from 8-9 July. Visit the festival\u2019s website for more information and listen back to recent mix from SHERELLE and I. JORDAN, recorded at London\u2019s FOLD, below.",
        "summary": "Peacock Society has shared the full line-up for its 10th anniversary celebrations, taking place on 8-9 July across four stages at open-air setting Parc de Choisy.\nFor 2023, the festival is calling on a plethora of French acts and international artists, including the likes of I. JORDAN, SHERELLE, Eris Drew, Dixon and Bambounou, who will go back-to-back with Bradley Zero.\nElsewhere, the line-up for this year\u2019s edition is completed by Juliana Huxtable, Mall Grab, Richie Hawtin, Gabber Eleganza, DJ Python and more, with organisers taking a \u201cback to its basics\u201d approach as they mark its milestone birthday.\n\u201cNew trends are to be explored every year, and we are lucky to have a French scene that is at the cutting-edge, full of talent.\u201dPeacock Society returns from 8-9 July.\nVisit the festival\u2019s website for more information and listen back to recent mix from SHERELLE and I. JORDAN, recorded at London\u2019s FOLD, below.",
        "keywords": [
            "taking",
            "peacock",
            "sherelle",
            "trends",
            "jordan",
            "dj",
            "89",
            "python",
            "lineup",
            "society",
            "festival",
            "confirms",
            "anniversary",
            "french",
            "juliana",
            "zeroelsewhere",
            "edition",
            "huxtable"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMixAFodHRwczovL2Jsb2cuYWRhZnJ1aXQuY29tLzIwMjMvMDMvMjIvaWN5bWktcHl0aG9uLW9uLW1pY3JvY29udHJvbGxlcnMtbmV3c2xldHRlci1taWNyb3B5dGhvbi1waWNvLXctYmx1ZXRvb3RoLWNpcmN1aXRweXRob24tOC0wLTQtYW5kLW11Y2gtbW9yZS1jaXJjdWl0cHl0aG9uLXB5dGhvbi1taWNyb3B5dGhvbi1pY3ltaS1yYXNwYmVycnlfcGkv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "ICYMI Python on Microcontrollers Newsletter: MicroPython Pico W Bluetooth, CircuitPython 8.0.4 and much more! #CircuitPython #Python #micropython #ICYMI @Raspberry_Pi",
        "description": "If you missed this week\u2019s Python on Microcontrollers Newsletter, here is the ICYMI (in case you missed it) version.\n\nTo never miss another issue, subscribe now! \u2013 You\u2019ll get one terrific newsletter each Tuesday (which is out before this post). 10,416 subscribers worldwide.\n\nThe next newsletter goes out in a week and subscribing is the best way to keep up with all things Python for hardware. No spam, no selling lists, leave any time.\n\nWelcome to the latest Python on Microcontrollers newsletter! I am surprised and pleased with the amount of news and activity in the Python on Hardware community this past week. Improvements in the Python ecosphere keep getting better while community involvement grows. Please check out this issue, I hope you enjoy it \u2013 Ed.\n\nWe\u2019re on Discord, Twitter, and for past newsletters \u2013 view them all here. If you\u2019re reading this on the web, subscribe here. Here\u2019s the news this week:\n\nMicroPython Support for the Raspberry Pi Pico W is Progressing\n\nPeter Harper of Raspberry Pi is adding Bluetooth support for the Raspberry Pi Pico W in MicroPython, and has a pull request in progress. Phil Howard at Pimoroni has created experimental builds of Peter\u2019s work in his own repo.\n\nPhil notes \u2018Bluetooth works, you\u2019ll want Adafruit\u2019s \u201cBluefruit Connect\u201d and the MicroPython \u201cble_simple_peripheral.py\u201d and \u201cble_advertising.py\u201d from here\u2019 if you experimentally want to kick the tires \u2013 Twitter and GitHub, although apparently they\u2019re waiting for a stability fix from Infineon \u2013 Twitter.\n\nAnd here is an article that discusses the situation \u2013 skanta-blog.de (German).\n\nCircuitPython 8.0.4 Released\n\nCircuitPython 8.0.4 is the latest bugfix revision of CircuitPython and is a new stable release. \u2013 Adafruit Blog and GitHub Release Notes.\n\nChanges since 8.0.3\n\nFIXES AND ENHANCEMENTS\n\nFix printing of \u201csoft reboot\u201d message\n\nPORT AND BOARD-SPECIFIC CHANGES\n\nEspressif\n\nPrevent recursive calls during websocket background processing\n\nSet socket to non-blocking more carefully\n\nKnown issues\n\nESP32-S3 has significant issues with I2C devices that sleep or use clock stretching. Retry operations on these devices as necessary, or use ESP32-S2 boards.\n\nEspressif boards have ESP-IDF storage leaks and occasionally crash after extended WiFi use.\n\nSee https://github.com/adafruit/circuitpython/issues for other issues, including issues still to be addressed for: 8.1.0 8.x.x long term\n\n\n\nPython-based Compiler Achieves Orders-of-Magnitude Speedups\n\nA Python-based compiler achieves orders-of-magnitude speedups. Codon compiles Python code to run more efficiently and effectively while allowing for customization and adaptation to various domains. Codon is currently publicly available on GitHub \u2013 MIT News.\n\nMicroPython Switches to a New Package Manager: mip\n\nmip has been chosen as the new MicroPython Package Manager. mip (\u201cmip installs packages\u201d) is similar in concept to Python\u2019s pip tool, however it does not use the PyPI index. Rather it uses micropython-lib as its index by default. mip will automatically fetch a compiled .mpy file when downloading from micropython-lib \u2013 Documentation.\n\nNew Book: Robotics at Home with Raspberry Pi Pico\n\nA new book just came out: Robotics at Home with Raspberry Pi Pico: Build autonomous robots with the versatile low-cost Raspberry Pi Pico controller and Python, by Danny Staple \u2013 Amazon via Twitter.\n\nDesign, build, and program a mobile robot platform while gaining an understanding of the Raspberry Pi Pico, Free CAD, and robot sensors using CircuitPython to code, Bluetooth to connect and smartphone to control your projects.\n\nPiDog: a Raspberry Pi 4 Dog Running Python\n\nPiDog, a robotic dog using servos and a Raspberry Pi 4 programmed in Python \u2013 Documentation and Python Docs, via Twitter (French).\n\nPiDog is a Raspberry Pi pet robot with a aluminum alloy structure. It can act as a mechanical pet, show cuteness to you, and interact with you. It is equipped with a camera module, which can perform color recognition, face detection and other projects; 12 metal gear servos support it to walk, stand, sit, shake its head, and pose in various poses; The ultrasonic module on the head enables it to quickly detect obstacles ahead; Special touch sensors allow it to respond to your touch; The Light Board on the chest can emit colorful light effects, and with the speaker equipped with the robot HAT, PiDog can express emotions such as happiness and excitement. In addition, PiDog is also equipped with a sound direction sensor and a 6-DOF IMU module to realize more complex and interesting usage scenarios.\n\nCircuitPythonista Charlyn Gonda Interviewed on Embedded.fm\n\nEmbedded.fm spoke with CircuitPythonista Charlyn Gonda about making things glow, dealing with imposter syndrome, and using origami. Charlyn\u2019s website is charlyn.codes and the projects talked about are documented there. You can find her on Instagram (@chardane) and Mastodon. Adafruit came up a lot in this episode \u2013 embedded.fm.\n\nThis Week\u2019s Python Streams\n\nPython on Hardware is all about building a cooperative ecosphere which allows contributions to be valued and to grow knowledge. Below are the streams within the last week focusing on the community.\n\nCircuitPython Deep Dive Stream\n\nThis week, Tim streamed work on the Disk Info API for Web Workflow.\n\nYou can see the latest video and past videos on the Adafruit YouTube channel under the Deep Dive playlist \u2013 YouTube.\n\nCircuitPython Parsec\n\nJohn Park\u2019s CircuitPython Parsec this week is on One Liners \u2013 Adafruit Blog and YouTube.\n\nCatch all the episodes in the YouTube playlist.\n\nProject of the Week: The LoRa Mail Boombox\n\nThe LoRa Mail Boombox is a snailmail box notifier using two Adafruit LoRa transceivers, a distance sensor, sound, lights, and a servo, programmed in CircuitPython \u2013 GitHub.\n\n\u201cLoRa, BT classic, and notification MP3\u2019s. Adafruit Feather RP2040 with a RFM95 FeatherWing. Adafruit I2S audio module is connected to a 20W amp with two 10W speakers. Servo, MP3, and Neopixels activate from mailbox activity\u201d \u2013 Twitter.\n\nNews from around the web!\n\nCPToml: a CircuitPython module for managing toml files \u2013 GitHub via Twitter.\n\nI had way too much fun making today\u2019s MVP Buzz reminder. It\u2019s brought to you on Adafruit PyPortal Titano using CircuitPython written in VS Code. You\u2019ve got less than 144 hours (or 6 days!!!) to enter your contributions! Be kind to yourself (and your CPM) & enter them now \u2013 Twitter.\n\nUpdate Time on a Raspberry Pi Pico with CircuitPython: Parse JSON, format dates/times, and schedule jobs \u2013 YouTube.\n\nBuild a ChatGPT-Like language model in Python on a Raspberry Pi \u2013 YouTube via Twitter.\n\nA next generation railway signaling system for public safety in Kazakhstan. With a cost of less than $100 per train using LoRa, ESP32 and MicroPython \u2013 Twitter.\n\nWhat is MicroPython? A guide which explores what MicroPython is, how it differs from Python, and some of its unique features \u2013 Kev\u2019s Robots.\n\nGetting an HTTP (web) server running with CircuitPython on the Raspberry Pi Pico W to control robot motors with a simple REST API \u2013 Twitter.\n\nmicropython_nunchuk is a MicroPython module for interfacing with Nintendo Nunchuk controllers, ported from CircuitPython. It allows for reading of joystick position, button states, and accelerometer state \u2013 GitHub.\n\nUsing a Blues Wireless cellular card and note carrier to send accelerometer data from a Raspberry Pi Pico programmed in MicroPython powered by a 5V/6W solar panel \u2013 Twitter.\n\nControl a Pico W from a web dashboard. Turn NeoPixels on/off using CircuitPython and Adafruit IO \u2013 YouTube.\n\nMaking a Pico Giant Magic 8 Ball. It uses a 20\u00d74 LCD display for snarky responses. Tilt ball switch activated, it has a Raspberry Pi Pico W and NeoPixel LEDs \u2013 Twitter.\n\nA PCB for creating a small tabletop display using Raspberry Pi Pico and 1.8 inch TFT LCD via CircuitPython \u2013 GitHub via Twitter.\n\nA DIY Open Source handheld battery-powered Thermal Camera. It uses the Adafruit ESP32-S3 Reverse TFT Feather and a MLX90640 IR camera module running CircuitPython \u2013 Guide via Twitter.\n\nButtons and LEDs with MicroPython for the Raspberry Pi Pico \u2013 Simon Prickett.\n\nCommand Line Interface Guidelines: an open-source guide to help you write better command-line programs, taking traditional principles and updating them for the modern day \u2013 clig.dev.\n\nConway\u2019s Game of Life on Galactic Unicorn programmed in MicroPython \u2013 Instructables and YouTube.\n\nMake a giant Pomodoro timer using Galactic Unicorn and MicroPython \u2013 Raspberry Pi.\n\nMercury: turn your Jupyter Notebooks into beautiful Web Apps \u2013 GitHub via Y Combinator.\n\nPySol Fan Club Edition \u2013 a Python Solitaire Game Collection of 1,200 programs \u2013 Sourceforge via Twitter.\n\nPyDev of the Week: Pierre Raybaut on Mouse vs Python.\n\nCircuitPython Weekly Meeting for March 20th, 2023 (notes) on YouTube\n\n#ICYDNCI What was the most popular, most clicked link, in last week\u2019s newsletter? Gaming Console on a Stick to Feature Dual Raspberry Pi Chips.\n\nComing Soon\n\nThere will be a sneak peek at the Kitronik\u2019s new coded gamer, the ZIP96 for Raspberry Pi Pico only at Bett UK \u201823 from 29-31 March at the London ExCel Centre, stand NQ39 \u2013 Twitter.\n\nTexas Instruments releasing an Arm Cortex-M0+ for just $0.39, with its MSPM0L and MSPM0G. TI is hoping its latest Arm Cortex-M0+ microcontrollers will find broad use \u2013 hackster.io.\n\nPortenta C33 is a lower cost Arduino Pro board based on Renesas RA6M5 Arm Cortex-M33 MCU running at 200 MHz. It is equipped with a ESP32-C3 WiFi and Bluetooth Low Energy module and can be programmed in MicroPython \u2013 CNX Software.\n\nNew Boards Supported by CircuitPython\n\nThe number of supported microcontrollers and Single Board Computers (SBC) grows every week. This section outlines which boards have been included in CircuitPython or added to CircuitPython.org.\n\nThis week, there were no new boards added, but several are in process.\n\nNote: For non-Adafruit boards, please use the support forums of the board manufacturer for assistance, as Adafruit does not have the hardware to assist in troubleshooting.\n\nLooking to add a new board to CircuitPython? It\u2019s highly encouraged! Adafruit has four guides to help you do so:\n\nNew Learn Guides!\n\nStar Fragment IoT Lamp from Noe Ruiz\n\nMini Weather Station ESP32-S2 TFT from Trevor Beaton\n\nCircuitPython Libraries!\n\nCircuitPython support for hardware continues to grow. We are adding support for new sensors and breakouts all the time, as well as improving on the drivers we already have. As we add more libraries and update current ones, you can keep up with all the changes right here!\n\nFor the latest libraries, download the Adafruit CircuitPython Library Bundle. For the latest community contributed libraries, download the CircuitPython Community Bundle.\n\nIf you\u2019d like to contribute, CircuitPython libraries are a great place to start. Have an idea for a new driver? File an issue on CircuitPython! Have you written a library you\u2019d like to make available? Submit it to the CircuitPython Community Bundle. Interested in helping with current libraries? Check out the CircuitPython.org Contributing page. We\u2019ve included open pull requests and issues from the libraries, and details about repo-level issues that need to be addressed. We have a guide on contributing to CircuitPython with Git and GitHub if you need help getting started. You can also find us in the #circuitpython channels on the Adafruit Discord.\n\nYou can check out this list of all the Adafruit CircuitPython libraries and drivers available.\n\nThe current number of CircuitPython libraries is 413!\n\nNew Libraries!\n\nHere\u2019s this week\u2019s new CircuitPython libraries:\n\nUpdated Libraries!\n\nHere\u2019s this week\u2019s updated CircuitPython libraries:\n\nLibrary PyPI Weekly Download Statistics\n\nTotal Library Stats\n\n132657 PyPI downloads over 309 libraries\n\nTop 10 Libraries by PyPI Downloads\n\nAdafruit CircuitPython BusDevice (adafruit-circuitpython-busdevice): 10065\n\nAdafruit CircuitPython Requests (adafruit-circuitpython-requests): 9461\n\nAdafruit CircuitPython Register (adafruit-circuitpython-register): 1952\n\nAdafruit CircuitPython Display Text (adafruit-circuitpython-display-text): 1850\n\nAdafruit CircuitPython NeoPixel (adafruit-circuitpython-neopixel): 1815\n\nAdafruit CircuitPython MiniMQTT (adafruit-circuitpython-minimqtt): 1245\n\nAdafruit CircuitPython Motor (adafruit-circuitpython-motor): 1219\n\nAdafruit CircuitPython BLE (adafruit-circuitpython-ble): 1030\n\nAdafruit CircuitPython ADS1x15 (adafruit-circuitpython-ads1x15): 1026\n\nAdafruit CircuitPython DHT (adafruit-circuitpython-dht): 1005\n\nWhat\u2019s the team up to this week?\n\nWhat is the team up to this week? Let\u2019s check in!\n\nDan\n\nI released CircuitPython 8.0.4 on Tuesday March 14. The most important change is a fix for network sockets on Espressif boards. I\u2019m continuing to work on fixes and additions for the 8.1.0 release.\n\nMelissa\n\nThis past week, much of my focus has been on improvements to the CircuitPython installer to make it more usable in other places. This includes writing a script that generates a JSON file with all of the board information so that not so many parameters are required to get it working. In fact, now if there aren\u2019t any parameters specified, it will display a full list of boards for you to choose from. It has also been moved to a separate repository to make updating easier. Watch out for the installer to start appearing in more places.\n\nTim\n\nI\u2019ve continued working on the bitmaptools boundary fill fix, the hurdle with the Unix port has been overcome thanks to a tip from Scott. I also began working on a new API endpoint for the web workflow to return disk information about the storage space.\n\nJeff\n\nI\u2019ve continued working on the next new functionally for i.MX RT (audio out with I2S).\n\nScott\n\nI\u2019m continuing to investigate i.MX RT optimizations. I thought I was finished, but managed to get a build that is about twice as fast as others, but I\u2019m not sure why! I can\u2019t reproduce it in other builds. So, I\u2019m trying to figure out what makes that build magically faster. If I can\u2019t by the end of the week, then I\u2019ll PR what I have and move onto supporting other chips in the i.MX RT family.\n\nLiz\n\nThis week I wrote the code for the Star Fragment Lamp project. It uses the Open-Meteo API to get the sunrise and sunset timestamps. Then, the NeoPixels turn on at sunset and turn off at sunrise to mimic the star fragments in the Legend of Zelda games.\n\nUpcoming events!\n\nThe next MicroPython Meetup in Melbourne will be on March 22nd \u2013 Meetup and Slides.\n\nHackaday Berlin 2023 is scheduled for Saturday, March 25 \u2013 Adafruit Blog and announcement.\n\nPyCon US 2023 will be April 19-17, 2023, again in Salt Lake City, Utah USA \u2013 PyCon US 2023.\n\nEuroPython 2023 will be July 17-23, 2023, in Prague, Czech Republic and Remote \u2013 EuroPython 2023.\n\nSend Your Events In\n\nIf you know of virtual events or upcoming events, please let us know via email to cpnews(at)adafruit(dot)com.\n\nLatest releases\n\nCircuitPython\u2019s stable release is 8.0.4 and its unstable release is 8.1.0-beta.0. New to CircuitPython? Start with our Welcome to CircuitPython Guide.\n\n20230320 is the latest CircuitPython library bundle.\n\nv1.19.1 is the latest MicroPython release. Documentation for it is here.\n\n3.11.2 is the latest Python release. The latest pre-release version is 3.12.0a6.\n\n3,444 Stars Like CircuitPython? Star it on GitHub!\n\nCall for help \u2013 Translating CircuitPython is now easier than ever!\n\nOne important feature of CircuitPython is translated control and error messages. With the help of fellow open source project Weblate, we\u2019re making it even easier to add or improve translations.\n\nSign in with an existing account such as GitHub, Google or Facebook and start contributing through a simple web interface. No forks or pull requests needed! As always, if you run into trouble join us on Discord, we\u2019re here to help.\n\n36,961 thanks!\n\nThe Adafruit Discord community, where we do all our CircuitPython development in the open, reached over 36,961 humans \u2013 thank you! Adafruit believes Discord offers a unique way for Python on hardware folks to connect. Join today at https://adafru.it/discord.\n\nICYMI \u2013 In case you missed it\n\nPython on hardware is the Adafruit Python video-newsletter-podcast! The news comes from the Python community, Discord, Adafruit communities and more and is broadcast on ASK an ENGINEER Wednesdays. The complete Python on Hardware weekly videocast playlist is here. The video podcast is on iTunes, YouTube, IGTV (Instagram TV), and XML.\n\nThe weekly community chat on Adafruit Discord server CircuitPython channel \u2013 Audio / Podcast edition \u2013 Audio from the Discord chat space for CircuitPython, meetings are usually Mondays at 2pm ET, this is the audio version on iTunes, Pocket Casts, Spotify, and XML feed.\n\nCodecademy \u201cLearn Hardware Programming with CircuitPython\u201d\n\nCodecademy, an online interactive learning platform used by more than 45 million people, has teamed up with Adafruit to create a coding course, \u201cLearn Hardware Programming with CircuitPython\u201d. The course is now available in the Codecademy catalog.\n\nContribute!\n\nThe CircuitPython Weekly Newsletter is a CircuitPython community-run newsletter emailed every Tuesday. The complete archives are here. It highlights the latest CircuitPython related news from around the web including Python and MicroPython developments. To contribute, edit next week\u2019s draft on GitHub and submit a pull request with the changes. You may also tag your information on Twitter with #CircuitPython.\n\nJoin the Adafruit Discord or post to the forum if you have questions.",
        "summary": "Here\u2019s the news this week:MicroPython Support for the Raspberry Pi Pico W is ProgressingPeter Harper of Raspberry Pi is adding Bluetooth support for the Raspberry Pi Pico W in MicroPython, and has a pull request in progress.\nNew Book: Robotics at Home with Raspberry Pi PicoA new book just came out: Robotics at Home with Raspberry Pi Pico: Build autonomous robots with the versatile low-cost Raspberry Pi Pico controller and Python, by Danny Staple \u2013 Amazon via Twitter.\nPiDog: a Raspberry Pi 4 Dog Running PythonPiDog, a robotic dog using servos and a Raspberry Pi 4 programmed in Python \u2013 Documentation and Python Docs, via Twitter (French).\nUpdate Time on a Raspberry Pi Pico with CircuitPython: Parse JSON, format dates/times, and schedule jobs \u2013 YouTube.\nTilt ball switch activated, it has a Raspberry Pi Pico W and NeoPixel LEDs \u2013 Twitter.",
        "keywords": [
            "raspberry_pi",
            "circuitpython",
            "micropython",
            "microcontrollers",
            "bluetooth",
            "newsletter",
            "python",
            "raspberry",
            "pi",
            "week",
            "icymi",
            "pico",
            "adafruit",
            "hardware",
            "latest",
            "w"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiR2h0dHBzOi8vYnVpbHRpbi5jb20vc29mdHdhcmUtZW5naW5lZXJpbmctcGVyc3BlY3RpdmVzL3B5dGhvbi1jYWxjdWxhdG9y0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to Make a Python Calculator",
        "description": "Making a calculator is a classic beginner project for those who are just starting to learn to program with Python. This project can be completed in a relatively short amount of time, making it a great stepping stone for building more complex programs and exploring other areas of software development.\n\nWhy Build a Python Calculator? Building a Python calculator allow for hands-on experience with the language and provides an opportunity to understand the basics of coding logic, arithmetic operations and user-input functions.\n\nWe will build a basic calculator that takes in two input numbers and an operator from the user, but the project can be built upon in the future if you are interested in exploring more complex logic or graphical user interfaces.\n\nMore From Max ReynoldsDifferences Between SQL and SOQL Explained\n\nMake a Python Calculator\n\nHere\u2019s what you need to get started with this exercise.\n\nA text editor or integrated development environment. I like VS Code. Others include Pycharm, Spyder, vim, etc. Python installed on your computer. (See python.org) A basic understanding of Python syntax, variables, and data types (integer, float, boolean, etc.)\n\nUser Input in Python\n\nLet\u2019s start by getting familiar with input and output in Python, or I/O. For collecting user input in Python, we can use the input() function. For output, we use print() .\n\nLet\u2019s take a user\u2019s input and print it out.\n\ninp = input('Welcome, please enter a number ') print('You entered:',inp)\n\nFirst our program prompts the user with \u201cWelcome, please enter a number\u201d and then prints the user\u2019s input (stored in the variable inp ).\n\nNote: to run a Python program, put the code into a file with the .py extension. In the command line, run python <filename>.py .\n\nOur user input stored in inp is a string. This is fine if we are just printing out the user\u2019s input. But we need to convert it if we want to do any sort of math with the input. Let\u2019s convert our input to a float .\n\ninp = float(input('Welcome, please enter a number ')) print('You entered:',inp)\n\nDefining Operators\n\nNow let\u2019s talk about the math we want to build into the calculator. We\u2019ll allow our calculator to use five operations: addition, subtraction, multiplication, division and exponents.\n\nLet\u2019s prompt the user to enter their two numbers and an operator. We store the three inputs and then output the whole equation by passing multiple arguments to print() .\n\nnumber1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,^): ') number2 = float(input('Enter second number: ')) print(number1,op,number2)\n\nNote: we don\u2019t convert op to a float.\n\nConditionally Select an Operation\n\nWe now have two numbers and an operator selected by the user. Now we need to convert that input into Python code to compute the calculation.\n\nTo do this, we need to create a function. Our function will take in three arguments: the two numbers and the operator string. We\u2019ll call the function calculate .\n\ndef calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 return result\n\nThe calculate function uses conditional statements, which allow you to execute a certain block of code only if a certain condition is met. In our case, for example, we only need to add the two numbers if the \u2018+\u2019 operator is passed in. Depending on the operator, we store the calculation result using the result variable and return it.\n\nAs you can see, the basic math operations in Python using typical operators. The only irregular one is exponential, which uses ** rather than ^. a**b is the equivalent of ab.\n\nLet\u2019s call our function and put it all together!\n\ndef calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 return result number1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,**): ') number2 = float(input('Enter second number: ')) print(number1,op,number2) result=calculate(number1,number2,op) print('=',result)\n\nThe input and output will look something like this:\n\nEnter first number: 3 Enter operator (+,-,*,/,**): ^ Enter second number: 2 3.0 ^ 2.0 = 9.0\n\nMore Software Engineering Perspectives A Handy Guide to Python\n\nPython Calculator Bells and Whistles\n\nWe now have a basic functional Python calculator. But we can add a few simple things to make it a bit more user-friendly.\n\nSay we want to perform multiple calculations without having to re-run our script. One way to do this is to create a variable called continue_calculating . As long as continue_calculating is True , we keep on performing calculations.\n\ncontinue_calculating = True while continue_calculating is True: number1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,^): ') number2 = float(input('Enter second number: ')) result=calculate(number1,number2,op) print('=',result) yes_or_no = input('Continue? (y/n): ') if yes_or_no == 'n': continue_calculating = False\n\nWe\u2019ve done a few things here. First, we create continue_calculating and initialize it as True . Next we start a while loop which continues as long as continue_calculating is True . After performing the calculation, we ask the user if they want to continue using input again. If they enter \u2018n\u2019, then the process ends. If they enter \u2018y\u2019, we start the loop over again and do another calculation.\n\nIf our calculation result is equivalent to an integer (e.g. 3.0), we may want to just print the output without the decimal. We can use the built-in is_integer function for this, and our output becomes a bit cleaner.\n\nif result.is_integer(): result = int(result)\n\nFinally, we can raise an error if the user enters an invalid operator:\n\nif op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 else: raise ValueError('Invalid operator')\n\nOur finished calculator script:\n\ndef calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 else: raise ValueError('Invalid operator') if result.is_integer(): result = int(result) return result continue_calculating = True while continue_calculating is True: number1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,^): ') number2 = float(input('Enter second number: ')) print(number1,op,number2) result=calculate(number1,number2,op) print('=',result) yes_or_no = input('Continue? (y/n): ') if yes_or_no == 'n': continue_calculating = False\n\nCreating a basic calculator program in Python is a great starting point for beginners who are looking to familiarize themselves with the language and its logic. This project covered some basic concepts of variables, data types, user input, functions and conditional statements.\n\nThe calculator project can be completed in a relatively short amount of time and can be expanded upon by adding more complex logic or graphical user interfaces. For example, you might add the ability for a user to push buttons instead of entering text. Or, maybe you want to parse a single equation string instead of three separate inputs. Either way, I hope this project was a fun and helpful experience.",
        "summary": "Why Build a Python Calculator?\nBuilding a Python calculator allow for hands-on experience with the language and provides an opportunity to understand the basics of coding logic, arithmetic operations and user-input functions.\ndef calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 return resultThe calculate function uses conditional statements, which allow you to execute a certain block of code only if a certain condition is met.\ndef calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 return result number1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,**): ') number2 = float(input('Enter second number: ')) print(number1,op,number2) result=calculate(number1,number2,op) print('=',result)The input and output will look something like this:Enter first number: 3 Enter operator (+,-,*,/,**): ^ Enter second number: 2 3.0 ^ 2.0 = 9.0More Software Engineering Perspectives A Handy Guide to PythonPython Calculator Bells and WhistlesWe now have a basic functional Python calculator.\nif result.is_integer(): result = int(result)Finally, we can raise an error if the user enters an invalid operator:if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 else: raise ValueError('Invalid operator')Our finished calculator script:def calculate(n1,n2,op): if op == '+': result = n1+n2 elif op == '-': result = n1-n2 elif op == '*': result = n1*n2 elif op == '/': result = n1/n2 elif op=='^': result = n1**n2 else: raise ValueError('Invalid operator') if result.is_integer(): result = int(result) return result continue_calculating = True while continue_calculating is True: number1 = float(input('Enter first number: ')) op = input('Enter operator (+,-,*,/,^): ') number2 = float(input('Enter second number: ')) print(number1,op,number2) result=calculate(number1,number2,op) print('=',result) yes_or_no = input('Continue?",
        "keywords": [
            "number",
            "op",
            "result",
            "n1n2",
            "python",
            "calculator",
            "operator",
            "user",
            "input",
            "elif"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiSGh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMi9nZXR0aW5nLXN0YXJ0ZWQtcHl0aG9uLWdlbmVyYXRvcnMuaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Getting Started with Python Generators",
        "description": "\n\nImage by Author\n\nLearning how to work with Python generators can help you write more Pythonic and efficient code. Using generators can be especially useful when you need to work with large sequences.\n\nIn this tutorial, you\u2019ll learn how to use generators in Python by defining generator functions and generator expressions. You\u2019ll then learn how using generators can be a memory-efficient choice.\n\nDefining Generator Functions in Python\n\nTo understand how a generator function is different from a normal Python function, let's start with a regular Python function and then rewrite it as a generator function.\n\nConsider the following function get_cubes() . It takes in a number num as the argument and returns the list of cubes of the numbers 0, 1, 2 up to num -1:\n\ndef get_cubes(num): cubes = [] for i in range(num): cubes.append(i**3) return cubes\n\nThe above function works by looping through the list of numbers 0, 1, 2, up to num -1 and appending the cube of each number to the cubes list. Finally, it returns the cubes list.\n\nYou can already tell this is not the recommended Pythonic way to create a new list. Instead of looping through using a for loop and using the append() method, you can use a list comprehension expression.\n\nHere is the equivalent of the function get_cubes() that uses list comprehension instead of an explicit for loop and the append() method:\n\ndef get_cubes(num): cubes = [i**3 for i in range(num)] return cubes\n\nNext let\u2019s rewrite this function as a generator function. The following code snippet shows how the get_cubes() function can be rewritten as a generator function get_cubes_gen() :\n\ndef get_cubes_gen(num): for i in range(num): yield i**3\n\nFrom the function definition, you can tell the following differences:\n\nWe have the yield keyword instead of the return keyword.\n\nkeyword instead of the return keyword. We are not returning a sequence or populating an iterable such as a Python list to get the sequence.\n\nSo how does the generator function work? To understand, let\u2019s call the above-defined functions and take a closer look.\n\nUnderstanding Function Calls\n\nLet us call the get_cubes() and get_cubes_gen() functions and see the differences in the respective function calls.\n\nWhen we call the get_cubes() function with the number 6 as the argument, we get the list of cubes as expected.\n\ncubes_gen = get_cubes_gen(6) print(cubes_gen)\n\nOutput >> [0, 1, 8, 27, 64, 125]\n\nNow call the generator the function with the same number 6 as the argument and see what happens. You can call the generator function get_cubes_gen() just the way you would call a normal Python function.\n\ncubes_gen = get_cubes_gen(6) print(cubes_gen)\n\nIf you print out the value of cubes_gen() , you\u2019ll get a generator object as opposed to the entire resultant list that contains the cube of each of the numbers.\n\nOutput >> <generator object get_cubes_gen at 0x011B6530>\n\nSo how do you access the elements of the sequence? To code along, start a Python REPL and import the generator function. Here, I have my code in the gen_example.py file, so I\u2019m importing the get_cubes_gen() function from the get_cubes_gen() module.\n\n>>> from gen_example import get_cubes_gen >>> cubes_gen = get_cubes_gen(6)\n\nYou can call next() with the generator object as the argument. Doing so returns 0, the first element in the sequence\n\n>>> next(cubes_gen) 0\n\nNow when you call next() again, you\u2019ll get the next element in the sequence, which is 1.\n\n>>> next(cubes_gen) 1\n\nTo access the subsequent elements in the sequence, you can continue to call next() , as shown:\n\n>>> next(cubes_gen) 8 >>> next(cubes_gen) 27 >>> next(cubes_gen) 64 >>> next(cubes_gen) 125\n\nFor num = 6 , the resultant sequence is the cube of the numbers 0, 1, 2, 3, 4, and 5. Now that we\u2019ve reached 125, the cube of 5, what happens when you call next again?\n\nWe see that a StopIteration exception is raised.\n\n>>> next(cubes_gen) Traceback (most recent call last): File \" \", line 1, in StopIteration\n\nUnder the hood, the generator function executes until the execution reaches the yield statement, and the control returns to the call site. However, unlike a normal Python function that returns control to the call site once the return statement, a generator function suspends execution temporarily. And it keeps track of its state that helps us get the subsequent elements by calling next() .\n\nYou can also loop through the generator object using a for loop. The control exits the loop when the StopIteration exception is raised (that\u2019s how for loops work under the hood).\n\nfor cube in cubes_gen: print(cube) # Output 0 1 8 27 64 125\n\ncubes_gen = (i**3 for i in range(num))\n\nGenerator Expressions in Python\n\nAnother common way to use generators is using generator expressions. Here\u2019s the generator expression equivalent of the get_cubes_gen() function:\n\ncubes_gen = (i**3 for i in range(num))\n\nThe above generator expression may look similar to list comprehension, except for the use of () in place of []. However, as discussed, the following key differences hold:\n\nA list comprehension expression generates the entire list and stores it in memory.\n\nThe generator expression, on the other hand, yields the elements of the sequence on demand.\n\nPython Generators vs. Lists: Understanding Performance Improvements\n\nIn the sample function call in the previous section, we generated a sequence of cubes of the numbers zero through five. For such small sequences, using a generator may not give you significant performance gains. However, generators are certainly a memory-efficient choice when you work with longer sequences.\n\nTo see this in action, generate the sequence of cubes for value of num in a wider range:\n\nsize_l = [] size_g = [] # run for various values of num for i in [10, 100, 1000, 10000, 100000, 1000000]: cubes_l = [j**3 for j in range(i)] cubes_g = (j**3 for j in range(i)) # get the sizes of static list and generator expression size_l.append(sys.getsizeof(cubes_l)) size_g.append(sys.getsizeof(cubes_g))\n\nNow let us print out the size of the size in memory of the static list and the generator object for the when num changes (as in the snippet above):\n\nprint(f\"size_l: {size_l}\") print(f\"size_g: {size_g}\")\n\nFrom the output, we see that the generator object has a constant memory footprint unlike a list where the memory grows with num .This is because a generator performs lazy evaluation and yields the subsequent values in the sequence on demand. It does not compute all the values ahead of time.\n\n# Output size_l: [92, 452, 4508, 43808, 412228, 4348728] size_g: [56, 56, 56, 56, 56, 56]\n\nTo get a better idea of how the sizes of the static list and generator change with change in the value of num, we can plot the values of num and the sizes of the list and the generators, as shown below:\n\n\n\n\n\nIn the graph above, we see that when num increases, the size of the generator is constant, whereas the size of the list is prohibitively large.\n\nConclusion\n\nIn this tutorial, you\u2019ve learned how generators work in Python. The next time you need to work with a large file or dataset, you can consider using generators to iterate efficiently over it. When you use generators, you can iterate over the generator object, read in a line or a small chunk, process it or apply transformations as needed\u2014without having to store the original dataset in memory. However, keep in mind that you cannot store such values in memory for processing at a later time. If you need to, you\u2019ll have to use lists.\n\n\n\n\n\nBala Priya C is a technical writer who enjoys creating long-form content. Her areas of interest include math, programming, and data science. She shares her learning with the developer community by authoring tutorials, how-to guides, and more.",
        "summary": "Image by AuthorLearning how to work with Python generators can help you write more Pythonic and efficient code.\nDefining Generator Functions in PythonTo understand how a generator function is different from a normal Python function, let's start with a regular Python function and then rewrite it as a generator function.\nYou can call the generator function get_cubes_gen() just the way you would call a normal Python function.\nHowever, unlike a normal Python function that returns control to the call site once the return statement, a generator function suspends execution temporarily.\nPython Generators vs.",
        "keywords": [
            "list",
            "getting",
            "function",
            "generator",
            "python",
            "generators",
            "num",
            "sequence",
            "started",
            "using",
            "cubes",
            "get_cubes_gen"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiOWh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcHl0aG9uLXBhc3N3b3JkLXNlY3VyaXR5LWNoZWNrL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiQGh0dHBzOi8vYnVpbHRpbi5jb20vc29mdHdhcmUtZW5naW5lZXJpbmctcGVyc3BlY3RpdmVzL3BpcC1mcmVlemXSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Stop Using Pip Freeze For Your Python Projects",
        "description": "I came across pip freeze and virtualenv a couple years ago, and I was blown away. pip freeze is a Python command that saves packages that were installed using pip in the virtual environment. I had always been scared of virtual environments, but once I learned how easy it was to manage my dependencies, I couldn\u2019t stop. I felt like a senior developer making a virtualenv for all my projects. Ever since then my developer skills have increased manifold, and I found the perfect way to manage my Python projects. Or so I thought.\n\nWhat Is Pip Freeze? Pip freeze is a command in Python that allows you to save packages that were installed using pip in the virtual environment.\n\nA few months into this fairy tale, I started facing issues when I would go back to my old projects. They would either stop running or the available dependencies would throw compatibility errors. I was perplexed because I thought I had done everything right. I had separated the projects and their dependencies by creating virtual environments, so why weren\u2019t my old projects running? Turns out the very thing that made me a better Python developer was becoming my hurdle \u2014 pip freeze . This was because of the way sub-dependencies were handled using pip freeze .\n\nHow Pip Freeze Works\n\nWhen I first started a new project and installed the libraries, I would run my favorite command:\n\npip freeze > requirements.txt\n\nHere\u2019s why it caused issues. Let\u2019s say you install package A in your project, which might have sub-dependencies B, C and D. Now, your requirements.txt file with the above command would look like this:\n\nA==1.0 B==2.0 C==1.4 D==1.2\n\nNow say, the owner of library A releases a new version that uses a different version of library B and removes library C. Since B and C are already installed, pip freeze would pick it up automatically and dump them into the exact versions as they were originally installed. Now, in a project with hundreds of dependencies, your requirements file would become very problematic when you\u2019d change libraries. You would have to identify all the sub-dependencies and delete them accordingly. In this example, if A was now removed from the project, you would still be stuck with B, C and D even though they were only installed because of A. Deleting each of them is a mammoth task and can be very annoying on large projects.\n\nThere are other many issues that stem out of this problem which can break your project any day in the future.\n\nAn error occurred. Unable to execute JavaScript. Try watching this video on www.youtube.com , or enable JavaScript if it is disabled in your browser.\n\nA tutorial on pip freeze. | Video: CodingWithMitch\n\nMore on Python: Python Dictionary and Dictionary Methods: A Guide\n\nPip Freeze vs. Pipreqs\n\nI\u2019m not just here with problems, I also have a solution. I found a library called pipreqs , which fixes all the above issues and is very user-friendly.\n\nWhy Is Pipreqs Better?\n\nHere are reasons why switching to pipreqs is a better idea than using pip freeze for the requirements file.\n\n1. \u201c Pip freeze only saves the packages that were installed with pip install in the virtual environment,\u201d according to the pipreqs documentation in PyPi .\n\npip freeze only installs those packages which were installed using the pip install command. However, pip is not the only python package manager. We can also use Chocolatey, Conda and setuptools, etc., which are not supported by pip freeze . To use them, we\u2019d have to write them manually in the requirements.txt file. pipreqs , on the other hand, has no such restriction.\n\n2. pip freeze saves all packages and dependencies in the environment including those that you don\u2019t use in your current project\n\nThis is the biggest drawback of pip freeze . In a project, the dependencies constantly change and have to be added, updated and deleted. However, it\u2019s a monumental task to achieve this using pip freeze because it dumps whatever is already installed in the environment. pipreqs , on the other hand, only puts those libraries in the requirements file which have been used in the project through imports. This is extremely powerful when you are trying to change the requirements file later.\n\n3. pipreqs is extremely easy to use.\n\nTo install the library, run the following command\n\n$ pip install pipreqs\n\nTo generate a requirements.txt file, all you have to do is run the following command.\n\n$ pipreqs\n\nIf the requirements.txt file already exists, then run the following command:\n\n$ pipreqs --force\n\nThis generates a requirements.txt file in the home directory of your project. You can also provide a path if you want to save the file in a specific location.\n\n$ pipreqs /home/project/location\n\nThere are other alternatives like pip-tools and poetry, as well, which you can check out.\n\nMore on Python: 10 Python Cheat Sheets Every Developer Should Know\n\nDisadvantages of Pip Freeze\n\npip freeze might seem useful initially, but it can mess up your project for the following reasons:\n\nIt dumps all the libraries installed in your project including dependencies and sub-dependencies in the requirements.txt file. It still misses out on the libraries that are not installed using pip. It doesn\u2019t remove a library automatically if it isn\u2019t being used in a project.",
        "summary": "pip freeze is a Python command that saves packages that were installed using pip in the virtual environment.\nPip freeze is a command in Python that allows you to save packages that were installed using pip in the virtual environment.\nThis was because of the way sub-dependencies were handled using pip freeze .\npip freeze only installs those packages which were installed using the pip install command.\n2. pip freeze saves all packages and dependencies in the environment including those that you don\u2019t use in your current projectThis is the biggest drawback of pip freeze .",
        "keywords": [
            "pip",
            "pipreqs",
            "python",
            "projects",
            "stop",
            "using",
            "freeze",
            "installed",
            "file",
            "dependencies",
            "command",
            "project"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiRGh0dHBzOi8vYnVpbHRpbi5jb20vZGF0YS1zY2llbmNlL2JpbmFyeS1zZWFyY2gtaW1wbGVtZW50YXRpb24tcHl0aG9u0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to Implement Binary Search in Python",
        "description": "Binary search is an efficient algorithm to find an item from a sorted list of items. In comparison to other searching algorithms, binary search is the most popular algorithm for efficiently identifying the target element.\n\nBinary Search Explained Binary search is a method for searching a sorted list of data to find an item. It uses a divide-and-conquer algorithm, in which it selects a number in the middle of a sorted data array and splits the array. It then updates the array based on whether the target value is less than or greater than the middle element until it finds the desired value. It\u2019s a useful algorithm when dealing with large quantities of sorted data and has a time complexity of O(log(n)).\n\nWhat Is Binary Search?\n\nBinary search is a method of searching for the desired item in a sorted list of data. It is called binary because it splits an array into two halves as part of the algorithm.\n\nBinary search is used to find an element in O(log(n)) time in a sorted array, where n is the size of an array. The pre-requisite of the binary search algorithm is that the array must be sorted. The algorithm uses two pointers, representing the left and right endpoints of an array. It compares the target value with the middle element of an array and then updates the array based on whether the target value is less than or greater than the middle element. The process is repeated until the element is found.\n\nBinary search uses the divide and conquer algorithm for searching an element. Before diving into the implementation and how it works, it\u2019s important to understand what binary and divide and conquer mean.\n\nMore on Data ScienceHow Database B-Tree Indexing Works\n\nWhat Does Binary Mean?\n\nIn computer science, the term binary means 0,1 (we also call this bits). But in this algorithm, the term binary means if we have a long list of items and we split the list into two halves, then we call it a binary algorithm. In other words, it\u2019s a search algorithm that divides the search interval into two halves at each step of the search until it either finds or determines that the target element is not in the list. Each division cuts the remaining portion of the list in half, which results in a binary tree structure.\n\nLet\u2019s look at an example.\n\nSuppose we have a list of items inside an array. In the above definition, we understood that as part of the algorithm, binary means splitting an array into two halves.\n\nSo, let\u2019s divide the array into two halves while picturing the same thing in our minds.\n\nAn illustration of an array split into two halves in a binary search. | Image: Akshay Kumar\n\nIn the above example we have an array of sorted items.We divide the list into two halves. As a part of the binary search method, this is referred to as binary.\n\nWhat Is Divide and Conquer?\n\nDivide and conquer, as the names imply, mean splitting an array in half and merging. Let\u2019s use the same example to explain conquering (merging) visually.\n\nTwo split arrays, merged together representing the divide and conquer algorithm. | Image: Akshay Kumar\n\nDivide is the term used to describe splitting an array into two halves in the first image, while conquer is the term used to describe the merging. Two split arrays are combined into one large array in the second image.\n\nIs Binary Search Faster Than Linear Search?\n\nWhen it comes to search algorithms, binary search is generally considered the most common one. Indeed, it\u2019s a very useful algorithm to search an element from a list of sorted items.\n\nBinary search has a time complexity of O(log(n)). In contrast, a linear search algorithm has a time complexity of O(n). As a result, linear search will take linear time as the size of the array increases. What does that mean? Suppose we have 1000 elements in an array and the target element is 999. A linear search algorithm will take O(1000) time to search an element, whereas binary search will take O(9) time to search an element.\n\nAs a result, binary search is faster than linear search for large arrays. On every iteration, binary search eliminates half of the remaining elements from the search space, whereas linear search examines each element one by one.\n\nWe can use two different algorithms to search an element from the list. Those two algorithms are linear search and binary search.\n\nLinear search vs Binary Search\n\nLinear search and binary search are the two common algorithms used for searching for an element in an array.\n\nLinear is data that is connected one after another in a linear format. In the context of an algorithm, a linear search is a search that tries to find the element in a list one by one. Until a match is found, it will begin looking for an element from the beginning and move on to the next element.\n\nIn binary search, we split the array into two halves and find the target element. Binary search doesn\u2019t search for an element sequentially.\n\nIn terms of time and space efficiency, binary search is more effective because its time complexity is O(log(n)), whereas that of linear search is O(n). To compare the speeds, we use what\u2019s called an asymptotic analysis, otherwise known as a run-time performance, which involves calculating the running time of the algorithm.\n\nThe definition of logarithmic (log) in mathematics is: log(x) = y if 2^y = x . In computer science, we always assume the base is two for logs, i.e binary base two. Let\u2019s look at some different values of x, and see the result.\n\nWhen x = 1, log(1) = 0 [2^0 =1]\n\nWhen x = 2, log(2) = 1, [2^1 =2]\n\nWhen x = 4, log(4) = 2, [2^2 =4]\n\nWhen x = 8, log(8) = 3, [2^3 =8]\n\nWhen x = 16, log(16) = 4 [2^4 =16]\n\nThe observation from the above-calculated value is \u201cWhen we double x, we are only increasing y by 1.\u201d Now, what this really means is, as the input doubles, the elementary operations in the algorithm only increase by 1.\n\nLet\u2019s take the example of a binary search. Given an array of integer elements, search the target number in an array.\n\nThe binary search algorithm uses the divide and conquer algorithm for searching an element. It splits the array into two halves, and based on the target element and middle element of the array, it decides which half of the number will be present and repeats until the target element is not found.\n\nSuppose the number of elements in an array is 8 (n = 8). As we know: log(8) = 3 [2^3 =8]\n\nIf we do two to the third power we will get eight. So, to find the target element in a list, the algorithm will take only three operations. This proves that with three operations we get our target element. Let\u2019s analyze binary search and linear search graphically. The graph analysis of the linear search algorithm and binary search algorithm is as follows:\n\nTime complexity graph comparing linear and binary search algorithms. | Image: Akshay Kumar\n\nIn the above figure, the yellow line is the time complexity of the linear search algorithm(O(n)). The blue line is the time complexity of the binary search algorithm(O(log n)).\n\nHow Does the Binary Search Algorithm Work?\n\nThere are three possible scenarios to find the element in an array or list.\n\nSearch criteria = middle item : Item found.\n\nSearch criteria < middle item : Search the first half of the array.\n\nSearch criteria > middle item : Search the upper half of the array.\n\nThe steps followed by the binary search algorithm include:\n\nLet n = length of the array, let min = 0 and max = n-1. Calculate middle as the average of max and min, rounded down (so it\u2019s an integer). If array [middle] equals the target, then stop. You found it. Return guess. If the middle was too low, that is, array [middle] < target, then set min = middle + 1 . Otherwise, the middle was too high. Set max = middle - 1 . Go back to step 2.\n\nMore on Data ScienceHow Do You Use Data Structures and Algorithms in Python\n\nWhat Is Binary Search Algorithm\u2019s Time-Space Complexity?\n\nThe time complexity of the binary search algorithm is logn, and the space complexity is constant (1) because we don\u2019t use any extra auxiliary space to temporarily store data items.\n\nHow to Implement Binary Search in Python\n\nThe following is the code implementation of the binary search algorithm. Two solutions have been covered for the implementation.\n\nIn binary search, we look for an element X(target) in a sorted array by first comparing the target to the middle element of an array. If the target is less than the middle element, then we search the left half of the array. If the target is greater than the middle element, then we search the right half of the array. We then repeat this process, until we find our target.\n\nIf the target element isn\u2019t found in the list, it returns a null value based on the return type of the specific programming language. In Python, if the target value isn\u2019t in the list, it returns -1. This is because most binary search implementations return the index of the target element and -1 is not a valid index.\n\nRecursive Binary Search Implementation in Python\n\nA recursive implementation is the one that uses a function and calls itself to search for the target element. Here is an example implementation of binary search in Python using recursion.\n\ndef binarySearch(array, target): return binarySearchHelper(array, target, 0, len(array)-1); def binarySearchHelper(array, target, left, right): if left > right: return -1 middle = (left+right) // 2 potentialMatch = array[middle] if target == potentialMatch: return middle elif target < potentialMatch: return binarySearchHelper(array, target, left, middle - 1) else: return binarySearchHelper(array, target, middle + 1, right)\n\nIn this implementation, the function binarySearchHelper takes four parameters: the array to search, the target element to find, the lowest index to search in the array (initially 0), and the highest index to search in the array (initially len(arr) - 1 ).\n\nIf we recall all the steps of binary search working, the algorithm will calculate the middle value and compare with the target element and if it doesn\u2019t match, it will move the pointer left or right based on the middle value. The function uses recursion to call itself by passing new left and right values. The process continues until the target element found or search space is empty.\n\nIterative Binary Search Implementation in Python.\n\nAn iterative implementation is the one that uses a loop to search for the target element. Here\u2019s an example implementation of binary search in Python using iteration.\n\ndef binarySearch(array, target): left, right = 0, len(array)-1 while left <= right: middle = (left+right) // 2 potentialMatch = array[middle] if target == potentialMatch: return middle elif target < potentialMatch: right = middle - 1 else: left = middle + 1 return -1\n\nIn this implementation, the function binarySearch takes two parameters: the array to search, the target element to find. The function initializes the \u2018left\u2019 and \u2018right\u2019 indices to the beginning and the end of the array respectively.\n\nThe function enters the while loop. At each iteration, the middle value is calculated until it reaches the matching target number. Once it does, the algorithm will return the target element index. If the target number is less than the middle element, the function updates the left pointer to middle index +1. If the target element is greater than the middle element, the function updates the right pointer to middle index -1.\n\nIf the target element isn\u2019t found in the array, the function returns -1.\n\nAn error occurred. Unable to execute JavaScript. Try watching this video on www.youtube.com , or enable JavaScript if it is disabled in your browser.\n\nA tutorial on how to implement binary search in Python. | Video: Telusko\n\nAdvantages of Binary Search\n\nBinary search is a powerful and efficient algorithm that can be used to search datasets of any size. Its advantages include:\n\nIt\u2019s a very efficient search algorithm, especially when dealing with large data sets.\n\nIt\u2019s a simple algorithm to implement. It only requires basic loops and conditional statements, and it can be implemented with any programming language.\n\nIt can be used on a wide variety of data structures, including sorted arrays and binary trees. This makes it a versatile searching algorithm.\n\nIt doesn\u2019t require additional memory to perform its search.\n\nIt\u2019s guaranteed to find the target element if it exists in the list. If the target element doesn\u2019t exist in the list, it returns -1.\n\nBinary search is most useful in the following situations:\n\nWhen dealing with larger data sets. Binary search is much faster than other search algorithms. So, we can use this algorithm when we need to search in a huge data set.\n\nThe search is frequent. If a particular search needs to be performed multiple times on the same data set, then it may be worth using binary search to improve overall performance of the application.\n\nDisadvantages of Binary Search\n\nBinary search does have some limitations, and it may not be suitable for all situations. It\u2019s important to consider the size and nature of the data set. The disadvantages of binary search include:\n\nBinary search can only be used on sorted data.\n\nSorting can be an expensive operation and can take additional time and space.\n\nBinary search requires random access to elements in the data set, which means that it\u2019s not suitable for linked lists and data structures that don\u2019t use random access.\n\nIt can be memory inefficient in recursive implementation. When a function calls itself recursively, on every call, a new layer is added on the stack. This can be a problem if you\u2019re operating in a memory-constrained environment.\n\nBinary search is time-consuming when the data is dynamic.\n\nAnd that\u2019s the binary search algorithm.",
        "summary": "Binary Search Explained Binary search is a method for searching a sorted list of data to find an item.\nA linear search algorithm will take O(1000) time to search an element, whereas binary search will take O(9) time to search an element.\nLinear search vs Binary SearchLinear search and binary search are the two common algorithms used for searching for an element in an array.\nThe graph analysis of the linear search algorithm and binary search algorithm is as follows:Time complexity graph comparing linear and binary search algorithms.\nHow to Implement Binary Search in PythonThe following is the code implementation of the binary search algorithm.",
        "keywords": [
            "list",
            "element",
            "algorithm",
            "search",
            "python",
            "implement",
            "middle",
            "binary",
            "data",
            "array",
            "target",
            "linear"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiZ2h0dHBzOi8vd3d3LnNhcGVvcGxlLmNvbS8yMDIzLzAzLzIxL2NvdXBsZS1kb3VibGUtYm9va3Mtcm9vbS13aXRoLXB5dGhvbi1pbi1rcnVnZXItbmF0aW9uYWwtcGFyay13YXRjaC_SAWtodHRwczovL3d3dy5zYXBlb3BsZS5jb20vMjAyMy8wMy8yMS9jb3VwbGUtZG91YmxlLWJvb2tzLXJvb20td2l0aC1weXRob24taW4ta3J1Z2VyLW5hdGlvbmFsLXBhcmstd2F0Y2gvYW1wLw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Couple double-books room with PYTHON in Kruger National Park \u2013 WATCH",
        "description": "A couple recently got the shock of their lives when they looked up and saw a python on the beam of their bedroom roof in the Kruger National Park.\n\nThey were double booked with the python at Satara camp.\n\nPICTURES | Snake rescuer starts Human Rights Day by catching a boomslang\n\nMica Bafatakis shared their experience on the SANParks Facebook group.:\n\n\u201cMy boyfriend and I were staying at Satara and we went to have a lie down in the afternoon.\n\n\u201cWhen water fell from the ceiling on my boyfriend\u2019s leg we reported a water \u2018leak\u2019 to the reception and went for a beer. When we came back, I wanted to double-check the roof as I had a suspicion it may have been a snake.\n\n\u201cWhen I looked up it was a python in our roof. We slept with it the previous night!\u201d\n\nClick HERE to watch\n\nTHIS IS THE YEAR OF THE ANIMALS\n\nALSO READ: LOOK: Man gets SNAKE surprise in shower in Kruger National Park\n\nMeanwhile, a video of a hippo roaming on a high school\u2019s premises in Tzaneen in Limpopo went viral.\n\nThe video was taken at Merensky High School.\n\nIn the video, two vehicles stop as the hippo nonchalantly strolls by.\n\nAccording to sources, this is a regular occurrence as the school is near a river. Merensky High School is a dual medium school situated in Tzaneen, Limpopo.\n\nClick here to watch the video of the HIPPO",
        "summary": "A couple recently got the shock of their lives when they looked up and saw a python on the beam of their bedroom roof in the Kruger National Park.\nPICTURES | Snake rescuer starts Human Rights Day by catching a boomslangMica Bafatakis shared their experience on the SANParks Facebook group.\nThe video was taken at Merensky High School.\nMerensky High School is a dual medium school situated in Tzaneen, Limpopo.\nClick here to watch the video of the HIPPO",
        "keywords": [
            "doublebooks",
            "high",
            "national",
            "room",
            "tzaneen",
            "went",
            "park",
            "hippo",
            "python",
            "water",
            "snake",
            "video",
            "school",
            "couple",
            "kruger",
            "roof",
            "watch"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiRWh0dHBzOi8vd3d3Lm1ha2V1c2VvZi5jb20vcHl0aG9uLXdlaWdodC1jb252ZXJzaW9uLWFwcGxpY2F0aW9uLWJ1aWxkL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiMWh0dHBzOi8vd3d3LnBob3Jvbml4LmNvbS9uZXdzL1B5dGhvbi0zLjEyLUFscGhhLTbSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python 3.12 Alpha 6 Released With More Improvements",
        "description": "Show Your Support: This site is primarily supported by advertisements. Ads are what have allowed this site to be maintained on a daily basis for the past 18+ years. We do our best to ensure only clean, relevant ads are shown, when any nasty ads are detected, we work to remove them ASAP. If you would like to view the site without ads while still supporting our work, please consider our ad-free Phoronix Premium.\n\nPython 3.12 Alpha 6 was released on Tuesday as the newest development release toward this next major Python release.While it's only been a few months since Python 3.11 shipped with its big performance improvements , Python 3.12 continues working its way toward release. This next major update to Python is working on improved error messages, support for the Linux perf profiler, dropping several old/broken/deprecated functions, the internal representation of integers has been changed in preparing for future performance enhancements, and a variety of other highlights.\n\n\n\nAn example of the improved error messages with Python 3.12.\n\nDownloads and more details on all of the changes to find so far for Python 3.12 can be found via the Alpha 6 announcement The Python 3.12 schedule puts one more alpha release next month followed by the beta releases beginning in early May and that also marking the feature freeze. Following at least four betas and two release candidates, Python 3.12.0 final is expected to ship by early October.",
        "summary": "If you would like to view the site without ads while still supporting our work, please consider our ad-free Phoronix Premium.\nPython 3.12 Alpha 6 was released on Tuesday as the newest development release toward this next major Python release.While it's only been a few months since Python 3.11 shipped with its big performance improvements , Python 3.12 continues working its way toward release.\nAn example of the improved error messages with Python 3.12.\nDownloads and more details on all of the changes to find so far for Python 3.12 can be found via the Alpha 6 announcement The Python 3.12 schedule puts one more alpha release next month followed by the beta releases beginning in early May and that also marking the feature freeze.\nFollowing at least four betas and two release candidates, Python 3.12.0 final is expected to ship by early October.",
        "keywords": [
            "312",
            "site",
            "ads",
            "performance",
            "python",
            "released",
            "alpha",
            "working",
            "work",
            "release",
            "improvements",
            "support"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiVmh0dHBzOi8vZW5ld3Mud3Z1LmVkdS9hcnRpY2xlcy8yMDIzLzAzLzE1L3d2dS1zLXJlc2VhcmNoLW9mZmljZS1vZmZlcnMtcHl0aG9uLXdvcmtzaG9w0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "WVU Research Office offers Python Workshop",
        "description": "This introductory level, hands-on workshop will cover basic concepts and tools, including program design, version control, data management and task automation from 6-8 p.m. March 21-22 on Zoom.\n\nFind more information and register for the workshop.\n\nFor questions, contact: krb0073@mix.wvu.edu.",
        "summary": "This introductory level, hands-on workshop will cover basic concepts and tools, including program design, version control, data management and task automation from 6-8 p.m. March 21-22 on Zoom.\nFind more information and register for the workshop.\nFor questions, contact: krb0073@mix.wvu.edu.",
        "keywords": [
            "questions",
            "tools",
            "management",
            "workshopfor",
            "program",
            "office",
            "version",
            "python",
            "research",
            "offers",
            "task",
            "register",
            "zoomfind",
            "wvu",
            "workshop"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiTGh0dHBzOi8vd3d3Lm5ld3Nwb3J0LmNvbS5hdS8yMDIzL21hcmNoL3NhZGllLXRoZS1odWdlLXB5dGhvbi1wbHVzLW1vcmUtbmV3cy_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiVWh0dHBzOi8vd3d3Lm1pcnJvci5jby51ay9uZXdzL3dvcmxkLW5ld3MvaG9ycmlmeWluZy1tb21lbnQtd2hvbGUtc2hlZXAtZm91bmQtMjk1MTM3NjbSAVlodHRwczovL3d3dy5taXJyb3IuY28udWsvbmV3cy93b3JsZC1uZXdzL2hvcnJpZnlpbmctbW9tZW50LXdob2xlLXNoZWVwLWZvdW5kLTI5NTEzNzY2LmFtcA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Horrifying moment whole sheep found inside belly of python cut open by villagers",
        "description": "WARNING: DISTRESSING IMAGES. Villagers in the Amazon sliced open a 20-foot boa constrictor after suspecting it had eaten their livestock and found an entire sheep in its stomach\n\nThe horrifying moment an entire sheep was found inside the belly of a python as villagers cut it out, was captured on camera.\n\nAmazonian villagers had to slice open a 20-foot boa constrictor to retrieve the whole sheep.\n\nThe footage shows the grisly procedure where one shepherd is standing on the boa\u2019s head as another cuts into its belly with a knife.\n\nAs the animal is slowly sliced open, the sheep's legs pop out first, quickly followed by the entire animal.\n\nShockingly, the sheep seemed to be all in one piece and the snake\u2019s powerful digestive juices had not yet had time to dissolve it.\n\nImage: CEN) CEN) Image: CEN) CEN)\n\nThe butchery took place near the rural communities of Sitio Boa Vista and Povoado Santo Antonio, on the eastern edge of the Amazonian rainforest in the state of Alagoas, in north-eastern Brazil, on Saturday, 18th March.\n\nThe villagers were said to have killed the snake after spotting its swollen belly and suspecting it had eaten one of their livestock.\n\nIt can take up to five days for a boa to digest its prey, due to their unique eating style.\n\nImage: CEN) CEN) Image: CEN) CEN)\n\nContrary to popular belief, the snakes don\u2019t dislocate their jaws, but have the terrifying ability to open their mouths wide enough to swallow prey like the sheep whole.\n\nIn particularly morbid cases when humans are swallowed, it can take up to two weeks for snakes to digest them, before excreting only hair and bones.\n\nThe Brazilian authorities recommend that when a boa is found, people should not touch it and call the Environmental Police, the Environment Department or the Fire Department.",
        "summary": "Villagers in the Amazon sliced open a 20-foot boa constrictor after suspecting it had eaten their livestock and found an entire sheep in its stomachThe horrifying moment an entire sheep was found inside the belly of a python as villagers cut it out, was captured on camera.\nAmazonian villagers had to slice open a 20-foot boa constrictor to retrieve the whole sheep.\nAs the animal is slowly sliced open, the sheep's legs pop out first, quickly followed by the entire animal.\nThe villagers were said to have killed the snake after spotting its swollen belly and suspecting it had eaten one of their livestock.\nImage: CEN) CEN) Image: CEN) CEN)Contrary to popular belief, the snakes don\u2019t dislocate their jaws, but have the terrifying ability to open their mouths wide enough to swallow prey like the sheep whole.",
        "keywords": [
            "open",
            "belly",
            "sheep",
            "cut",
            "horrifying",
            "cen",
            "snakes",
            "python",
            "sliced",
            "inside",
            "suspecting",
            "boa",
            "villagers",
            "entire",
            "moment"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiVmh0dHBzOi8vY29pbnRlbGVncmFwaC5jb20vbmV3cy83LWZyZWUtbGVhcm5pbmctcmVzb3VyY2VzLXRvLWxhbmQtdG9wLWRhdGEtc2NpZW5jZS1qb2Jz0gFaaHR0cHM6Ly9jb2ludGVsZWdyYXBoLmNvbS9uZXdzLzctZnJlZS1sZWFybmluZy1yZXNvdXJjZXMtdG8tbGFuZC10b3AtZGF0YS1zY2llbmNlLWpvYnMvYW1w?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "7 free learning resources to land top data science jobs",
        "description": "Data science is an exciting and rapidly growing field that involves extracting insights and knowledge from data. To land a top data science job, it is important to have a solid foundation in key data science skills, including programming, statistics, data manipulation and machine learning.\n\nFortunately, there are many free online learning resources available that can help you develop these skills and prepare for a career in data science. These resources include online learning platforms such as Coursera, edX and DataCamp, which offer a wide range of courses in data science and related fields.\n\nCoursera\n\nData science and related subjects are covered in a variety of courses on the online learning platform Coursera. These courses frequently involve subjects such as machine learning, data analysis and statistics and are instructed by academics from prestigious universities.\n\nHere are some examples of data science courses on Coursera:\n\nApplied Data Science with Python Specialization: This specialization, offered by the University of Michigan, consists of five courses that cover the basics of data manipulation, analysis and visualization using Python.\n\nMachine Learning by Andrew Ng: This course, offered by Stanford University, provides an introduction to machine learning, including topics such as linear regression, logistic regression, neural networks and clustering.\n\nData Science Methodology: This course, offered by IBM, covers the basics of data science, including data preparation, data cleaning and data exploration.\n\nStatistics with R Specialization: This specialization, offered by Duke University, consists of four courses that cover statistical inference, regression modeling and machine learning using the R programming language.\n\nI started my ML career 2019 with Coursera IBM Data Science courses @coursera with MS engineering background. Fascinating to learn daily of AI \u2014 Risto Anton (@blogtheristo) March 17, 2023\n\nOne can apply for financial aid to earn these certifications for free. However, doing a course just for certification may not land a dream job in data science.\n\nKaggle\n\nKaggle is a platform for data science competitions that provides a wealth of resources for learning and practicing data science skills. One can refine their skills in data analysis, machine learning and other branches of data science by participating in the platform\u2019s challenges and host of datasets.\n\nHere are some examples of free courses available on Kaggle:\n\nPython: This course covers the basics of Python programming, including data types, control structures, functions and modules.\n\nPandas: This course covers the basics of data manipulation using Pandas, including data cleaning, data merging and data reshaping.\n\nData Visualization: This course covers the basics of data visualization using Matplotlib and Seaborn, including scatter plots, line plots and bar plots.\n\nIntro to Machine Learning: This course covers the basics of machine learning, including classification, regression and clustering.\n\nIntermediate Machine Learning: This course covers more advanced topics in machine learning, including feature engineering, model selection and hyperparameter tuning.\n\nSQL: This course covers the basics of SQL, including data querying, data filtering and data aggregation.\n\nDeep Learning: This course covers the basics of deep learning, including neural networks, convolutional neural networks and recurrent neural networks.\n\nRelated: 9 data science project ideas for beginners\n\nKaggle is a superb platform for Python & Machine Learning\n\n\n\nOpen this if you wish to use it to maximum potential \u23ec\u23ec\u23ec \u2014 Jaydeep (@_jaydeepkarale) March 15, 2023\n\nedX\n\nEdX is another online learning platform that offers courses in data science and related fields. Many of the courses on edX are taught by professors from top universities, and the platform offers both free and paid options for learning.\n\nSome of the free courses on data science available on edX include:\n\nData Science Essentials: This course, offered by Microsoft, covers the basics of data science, including data exploration, data preparation and data visualization. It also covers key topics in machine learning, such as regression, classification and clustering.\n\nIntroduction to Python for Data Science: This course, offered by Microsoft, covers the basics of Python programming, including data types, control structures, functions and modules. It also covers key data science libraries in Python, such as Pandas, NumPy and Matplotlib.\n\nIntroduction to R for Data Science: This course, offered by Microsoft, covers the basics of R programming, including data types, control structures, functions and packages. It also covers key data science libraries in R, such as dplyr, ggplot2 and tidyr.\n\nAll of these courses are free to audit, meaning that you can access all the course materials and lectures without paying a fee. Nevertheless, there will be a cost if you wish to access further course features or receive a certificate of completion. A comprehensive selection of paid courses and programs in data science, machine learning and related topics are also available on edX in addition to these courses.\n\nDataCamp\n\nDataCamp is an online learning platform that offers courses in data science, machine learning and other related fields. The platform offers interactive coding challenges and projects that can help you build real-world skills in data science.\n\nThe following courses are available for free on DataCamp:\n\nIntroduction to Python: This course covers the basics of Python programming, including data types, control structures, functions and modules.\n\nIntroduction to R: This course covers the basics of R programming, including data types, control structures, functions and packages.\n\nIntroduction to SQL: This course covers the basics of SQL, including data querying, data filtering and data aggregation.\n\nData Manipulation with Pandas: This course covers the basics of data manipulation using Pandas, including data cleaning, data merging and data reshaping.\n\nImporting Data in Python: This course covers the basics of importing data into Python, including reading files, connecting to databases and working with web APIs.\n\nAll of these courses are free and can be accessed through DataCamp\u2019s online learning platform. In addition to these courses, DataCamp also offers a wide range of paid courses and projects that cover topics such as data visualization, machine learning and data engineering.\n\nUdacity\n\nUdacity is an online learning platform that offers courses in data science, machine learning and other related fields. The platform offers both free and paid courses, and many of the courses are taught by industry professionals.\n\nHere are some examples of free courses on data science available on Udacity:\n\nIntroduction to Python Programming: This course covers the basics of Python programming, including data types, control structures, functions and modules. It also covers key data science libraries in Python, such as NumPy and Pandas.\n\nSQL for Data Analysis: This course covers the basics of SQL, including data querying, data filtering and data aggregation. It also covers more advanced topics in SQL, such as joins and subqueries.\n\nIntro to Data Science: This course covers the basics of data science, including data wrangling, exploratory data analysis and statistical inference. It also covers key machine-learning techniques, such as regression, classification and clustering.\n\nRelated: 5 high-paying careers in data science\n\nMIT OpenCourseWare\n\nMIT OpenCourseWare is an online repository of course materials from courses taught at the Massachusetts Institute of Technology. The platform offers a variety of courses in data science and related fields, and all of the materials are available for free.\n\nHere are some of the free courses on data science available on MIT OpenCourseWare:\n\nIntroduction to Computer Science and Programming in Python: This course covers the basics of Python programming, including data types, control structures, functions and modules. It also covers key data science libraries in Python, such as NumPy, Pandas and Matplotlib. Introduction to Probability and Statistics: This course covers the basics of probability theory and statistical inference, including probability distributions, hypothesis testing and confidence intervals. Machine Learning with Large Datasets: This course covers the basics of machine learning, including linear regression, logistic regression and k-means clustering. It also covers techniques for working with large data sets, such as map-reduce and Hadoop.\n\nGitHub\n\nGitHub is a platform for sharing and collaborating on code, and it can be a valuable resource for learning data science skills. However, GitHub itself does not offer free courses. Instead, one can explore the many open-source data science projects that are hosted on GitHub to find out more about how data science is used in practical situations.\n\nScikit-learn is a popular Python library for machine learning, which provides a range of algorithms for tasks such as classification, regression and clustering, along with tools for data preprocessing, model selection and evaluation. The project is open-source and available on GitHub.\n\nPlease don't apply for senior dev roles unless your GitHub looks like this pic.twitter.com/6wptzkrMb2 \u2014 Nat Miletic (@natmiletic) February 27, 2023\n\nJupyter is an open-source web application for creating and sharing interactive notebooks. Jupyter notebooks provide a way to combine code, text and multimedia content in a single document, making it easy to explore and communicate data science results.\n\nThese are just a few examples of the many open-source data science projects available on GitHub. By exploring these projects and contributing to them, one can gain valuable experience with data science tools and techniques, while also building their portfolio and demonstrating their skills to potential employers.",
        "summary": "Data Science Methodology: This course, offered by IBM, covers the basics of data science, including data preparation, data cleaning and data exploration.\nKaggleKaggle is a platform for data science competitions that provides a wealth of resources for learning and practicing data science skills.\nSome of the free courses on data science available on edX include:Data Science Essentials: This course, offered by Microsoft, covers the basics of data science, including data exploration, data preparation and data visualization.\nIntro to Data Science: This course covers the basics of data science, including data wrangling, exploratory data analysis and statistical inference.\nInstead, one can explore the many open-source data science projects that are hosted on GitHub to find out more about how data science is used in practical situations.",
        "keywords": [
            "land",
            "resources",
            "learning",
            "basics",
            "including",
            "python",
            "courses",
            "science",
            "data",
            "covers",
            "course",
            "machine",
            "jobs",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiR2h0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMi9kYXRhLWNsZWFuaW5nLXB5dGhvbi1jaGVhdC1zaGVldC5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Data Cleaning with Python Cheat Sheet",
        "description": "An intuitive guide that will help you to prepare and preprocess your dataset before applying the machine learning model.\n\nData cleaning is a very important and critical step in your data science project. The success of the machine model depends on how you preprocess the data. If you underestimate and skip the preprocessing of your dataset, the model won\u2019t perform well and you\u2019ll lose a lot of time searching to understand why it doesn\u2019t work as well as you would expect.\n\nLately, I began to create cheat sheets to speed up my data science activities, in particular a summary with the basics of data cleaning. In this post and cheat sheet, I am going to show five different aspects that characterize the preprocessing steps in your data science project.\n\n\n\n\n\n\n\nIn this cheat sheet, we go from detecting and handling missing data, dealing with duplicates and finding solutions to duplicates, outlier detection, label encoding and one-hot-encoding of categorical features, to transformations, such as MinMax normalization and standard normalization. Moreover, this guide exploits the methods provided by three of the most popular Python libraries, Pandas, Scikit-Learn and Seaborn for displaying plots.\n\nLearning these python tricks will help you to extract more information as possible from the dataset and, consequently, the machine learning model will be able to perform better by learning from a clean and preprocessed input.\n\n",
        "summary": "An intuitive guide that will help you to prepare and preprocess your dataset before applying the machine learning model.\nData cleaning is a very important and critical step in your data science project.\nThe success of the machine model depends on how you preprocess the data.\nLately, I began to create cheat sheets to speed up my data science activities, in particular a summary with the basics of data cleaning.\nIn this post and cheat sheet, I am going to show five different aspects that characterize the preprocessing steps in your data science project.",
        "keywords": [
            "preprocessing",
            "learning",
            "python",
            "dataset",
            "model",
            "sheet",
            "cleaning",
            "data",
            "science",
            "machine",
            "cheat"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMipwFodHRwczovL3d3dy5jb3VyaWVybWFpbC5jb20uYXUvbmV3cy9nYXR0b24tdXEtdmV0cy1tYWtlLXNob2NrLWRpc2NvdmVyeS1pbi1wZXQtdHJlZS1weXRob24tc25ha2UtYWZ0ZXItZWF0aW5nLXB1cHB5LXBlZS1wYWQvbmV3cy1zdG9yeS85ZmY2NzUxZDU5ZDllNzkyZTQ4ZTRkZmVmZDU2NzRmMtIBqwFodHRwczovL3d3dy5jb3VyaWVybWFpbC5jb20uYXUvbmV3cy9nYXR0b24tdXEtdmV0cy1tYWtlLXNob2NrLWRpc2NvdmVyeS1pbi1wZXQtdHJlZS1weXRob24tc25ha2UtYWZ0ZXItZWF0aW5nLXB1cHB5LXBlZS1wYWQvbmV3cy1zdG9yeS85ZmY2NzUxZDU5ZDllNzkyZTQ4ZTRkZmVmZDU2NzRmMj9hbXA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "",
        "description": "",
        "summary": "",
        "keywords": []
    },
    {
        "url": "https://news.google.com/articles/CBMiRmh0dHBzOi8vd3d3LnZ1bHR1cmUuY29tLzIwMjMvMDMvYnJva2VuLWxpemFyZC1xdWFzaS1tb3ZpZS10cmFpbGVyLmh0bWzSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "In the Quasi Trailer, the Super Troopers Gang Gets Medieval",
        "description": "Drop what you\u2019re doing right meow. Quasi, the new movie from the gang at Broken Lizard \u2014 the sketch group turned production company behind cult classics Super Troopers and Beerfest \u2014 is nearing its April 20 release on Hulu. The first trailer for the movie sees the gang \u2014 Kevin Heffernan, Steve Lemme, Jay Chandrasekhar, Paul Soter, and Erik Stolhanske \u2014 in medieval France for a reimagining of Quasimodo\u2019s story involving \u201clove, betrayal, and scandal.\u201d Also in this trailer? Jokes about hunchbacks, innuendos about a torture \u201crack,\u201d and illustrations of the pope engaged in scatological sex acts.\n\nDuring a Super Troopers reunion panel at Vulture Festival in 2022, Heffernan \u2014 who directed Quasi \u2014 spoke about the movie as a great opportunity to write a comedy inspired by Monty Python and play multiple characters, saying, \u201cWe got to wear stupid wigs and do bad accents and do a Monty Python kind of thing.\u201d He also shed light on the film\u2019s origins: \u201cWhile we were working on Super Troopers 3 with Searchlight, we said, \u2018We have this other movie that we like,\u2019 and we gave them the script and they really loved it. We said, \u2018We have this little window, we\u2019d love to shoot it.\u2019 And so we did \u2014 we went and shot medieval France right up in Santa Clarita.\u201d",
        "summary": "Drop what you\u2019re doing right meow.\nQuasi, the new movie from the gang at Broken Lizard \u2014 the sketch group turned production company behind cult classics Super Troopers and Beerfest \u2014 is nearing its April 20 release on Hulu.\nThe first trailer for the movie sees the gang \u2014 Kevin Heffernan, Steve Lemme, Jay Chandrasekhar, Paul Soter, and Erik Stolhanske \u2014 in medieval France for a reimagining of Quasimodo\u2019s story involving \u201clove, betrayal, and scandal.\u201d Also in this trailer?\nJokes about hunchbacks, innuendos about a torture \u201crack,\u201d and illustrations of the pope engaged in scatological sex acts.\nWe said, \u2018We have this little window, we\u2019d love to shoot it.\u2019 And so we did \u2014 we went and shot medieval France right up in Santa Clarita.\u201d",
        "keywords": [
            "troopers",
            "quasi",
            "super",
            "python",
            "gets",
            "monty",
            "trailer",
            "right",
            "love",
            "movie",
            "medieval",
            "gang"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiYGh0dHBzOi8vYS16LWFuaW1hbHMuY29tL2Jsb2cvd2F0Y2gtYS1naWdhbnRpYy1weXRob24tYXR0YWNrLWEtcmFuZ2Utcm92ZXItYW5kLXJlZnVzZS10by1naXZlLXVwL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Watch a Gigantic Python Attack a Range Rover and Refuse to Give Up",
        "description": "Think You Know Snakes? Take Our Snakes Quiz\n\n\u2193 Continue Reading To See This Amazing Video\n\nSo, now we know that pythons like white Range Rovers! Scroll down to watch the full video of this python seemingly get very attached to a Range Rover and get in the way of a group of people who were trying to uncouple their boat!\n\nAll About African Rock Pythons\n\nThe narrator refers to the snake in the clip below as a South African python. This is a subspecies of the Python sebae (rock python) species named after the Dutch zoologist called Albertus Seba.\n\nThe South African rock python is found in locations around southern Africa, (from Namibia to the coasts of Tanzania and Mozambique) and is smaller and less colorful than the Northern African rock python.\n\n60,794 People Couldn't Ace This Quiz Think You Can? Take Our Brand New A-Z-Animals Snakes Quiz\n\nHaving said that, these guys can grow to around 16 foot and weigh up to 120 pounds \u2013 they are a solid and heavily built snake and not the sort of thing you want on your car! They have no venom glands but can give a very nasty bite when they feel threatened. Grabbing hold of them, as the man in this clip attempts to do, is not a great idea unless you know what you are doing.\n\nSouthern African pythons detect chemicals in the air with their tongues \u00a9Bruce Crossey/Shutterstock.com\n\nSnake Climbing Onto the Car\n\nThe snake is clearly unhappy about the human company and may feel threatened by the vehicles. It may have been confused by the chemicals/odors that the vehicles and humans were emitting.\n\nThey use their sense of smell to detect prey and have a diet that includes cane rats, hares, monkeys and even small antelopes. There are also reports of them catching monitor lizards and crocodiles. The snake will ambush the prey and then constrict it before swallowing it whole. However, eating very large prey is not always the best plan. When they have consumed a huge meal, they are swollen and sluggish and this makes them a target for wild dogs and hyenas.\n\nBecause these snakes help to control rodent populations, they are of benefit to many farmers.\n\nThey have protected status in South Africa and must not be captured or killed. This one slipped quietly back into the undergrowth after its adventure.\n\nDiscover the \"Monster\" Snake 5X Bigger than an Anaconda Every day A-Z Animals sends out some of the most incredible facts in the world from our free newsletter. Want to discover the 10 most beautiful snakes in the world, a \"snake island\" where you're never more than 3 feet from danger, or a \"monster\" snake 5X larger than an anaconda? Then sign up right now and you'll start receiving our daily newsletter absolutely free.\n\n\n\nUp Next:",
        "summary": "Think You Know Snakes?\nTake Our Snakes Quiz\u2193 Continue Reading To See This Amazing VideoSo, now we know that pythons like white Range Rovers!\nAll About African Rock PythonsThe narrator refers to the snake in the clip below as a South African python.\nThis is a subspecies of the Python sebae (rock python) species named after the Dutch zoologist called Albertus Seba.\nThe South African rock python is found in locations around southern Africa, (from Namibia to the coasts of Tanzania and Mozambique) and is smaller and less colorful than the Northern African rock python.",
        "keywords": [
            "snakes",
            "rock",
            "attack",
            "python",
            "gigantic",
            "african",
            "snake",
            "know",
            "world",
            "rover",
            "refuse",
            "south",
            "range",
            "prey",
            "vehicles",
            "watch"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMidmh0dHBzOi8vd3d3Lm5iY25ld3lvcmsuY29tL25ld3MvbG9jYWwvcHl0aG9uLXNsaXRoZXJzLWludG8tamVyc2V5LWNpdHktYXBhcnRtZW50LWhpZGVzLXVuZGVyLXJlc2lkZW50cy1mcmlkZ2UvNDEzODQyNC_SAXxodHRwczovL3d3dy5uYmNuZXd5b3JrLmNvbS9uZXdzL2xvY2FsL3B5dGhvbi1zbGl0aGVycy1pbnRvLWplcnNleS1jaXR5LWFwYXJ0bWVudC1oaWRlcy11bmRlci1yZXNpZGVudHMtZnJpZGdlLzQxMzg0MjQvP2FtcD0x?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Four-Foot Python Wanders Into New Jersey Apartment \u2013 NBC New York",
        "description": "A pet wandered down the hall of the New Jersey apartment building it called home and into the home of another resident.\n\nOrdinarily, an escaped pet wouldn't be a big deal \u2014 except the pet in this instance was a 4-foot adult python, which was hiding under someone's fridge.\n\nThe snake was found inside an apartment in the Newport section of Jersey City, after it slithered down the hallway and through a roughly inch-and-a-half gap under a tenant's door. That happened on Saturday, when the building manager contacted police.\n\nGet Tri-state area news and weather forecasts to your inbox. Sign up for NBC New York newsletters.\n\nIt wasn't found until Monday, when it was spotted camping out under the refrigerator.\n\nThe Liberty Humane Society described the reptile as a hybrid West African ball python, which they said is not dangerous to humans at all.\n\n\"This is a domestic pet snake who unfortunately found themselves in the wrong place and the wrong apartment,\" said Irene Borngraeber of the Liberty Humane Society.\n\nBy late morning, the python was brough to a shelter in Jersey City, where it will be cared for until its owner is found. If no owner comes forward, the snake will be put up for adoption.\n\n\"They have been one of those species, an exotic pet that have traveled the globe and are now routinely bred illegally in New Jersey as well as many other states in the U.S.,\" said Borngraeber.\n\nThe snakes are legal to own in New Jersey with a permit, though any venomous snake such as a copperhead or rattlesnake are illegal.\n\nDespite not being harmful for humans, the python, which has been named Banana, put in quite the fright for those who live in the building.\n\n\"It makes me scared, I just run away,\" said Sunita Kapoor.\n\nAn eight-foot alligator was returned home after Texas Game Wardens discovered her living illegally in a house in Austin.",
        "summary": "A pet wandered down the hall of the New Jersey apartment building it called home and into the home of another resident.\nThe snake was found inside an apartment in the Newport section of Jersey City, after it slithered down the hallway and through a roughly inch-and-a-half gap under a tenant's door.\n\"This is a domestic pet snake who unfortunately found themselves in the wrong place and the wrong apartment,\" said Irene Borngraeber of the Liberty Humane Society.\nBy late morning, the python was brough to a shelter in Jersey City, where it will be cared for until its owner is found.\nDespite not being harmful for humans, the python, which has been named Banana, put in quite the fright for those who live in the building.",
        "keywords": [
            "apartment",
            "illegally",
            "nbc",
            "liberty",
            "python",
            "pet",
            "snake",
            "humans",
            "fourfoot",
            "owner",
            "jersey",
            "wanders",
            "wrong",
            "york"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMipwFodHRwczovL3d3dy5tYXJrdGVjaHBvc3QuY29tLzIwMjMvMDMvMDMvd2l0aC1qdXN0LTIwLWxpbmVzLW9mLXB5dGhvbi1jb2RlLXlvdS1jYW4tZG8tcmV0cmlldmFsLWF1Z21lbnRlZC1ncHQtYmFzZWQtcWEtdXNpbmctdGhpcy1vcGVuLXNvdXJjZS1yZXBvc2l0b3J5LWNhbGxlZC1wcmltZXFhL9IBqwFodHRwczovL3d3dy5tYXJrdGVjaHBvc3QuY29tLzIwMjMvMDMvMDMvd2l0aC1qdXN0LTIwLWxpbmVzLW9mLXB5dGhvbi1jb2RlLXlvdS1jYW4tZG8tcmV0cmlldmFsLWF1Z21lbnRlZC1ncHQtYmFzZWQtcWEtdXNpbmctdGhpcy1vcGVuLXNvdXJjZS1yZXBvc2l0b3J5LWNhbGxlZC1wcmltZXFhLz9hbXA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "With Just ~20 Lines of Python Code, You can Do \u2018Retrieval Augmented GPT Based QA\u2019 Using This Open Source Repository Called PrimeQA",
        "description": "Reddit Vote Flip Share 0 Shares\n\nOver the past few years, researchers have developed a keen interest in Question Answering (QA) related tasks when it comes to research in Natural Language Processing. Information retrieval (IR) systems, also known as retrievers, and machine reading comprehension (MRC) systems (also known as readers) make up the majority of the QA pipeline, The pipeline\u2019s input is often a query and a large document collection from which the retriever extracts sections pertinent to the query\u2019s context. On the other hand, the reader component mines such contexts for a precise response, which is then provided as the pipeline\u2019s final output. With the breakthrough of finer pre-trained language models and more advanced algorithms for retriever and reader components, the QA research field has made remarkable progress.\n\nAlthough the QA field has advanced rapidly over the past few years, there is still significant room for improvement. To undertake large-scale QA experiments, there is currently no centralized repository that makes it easy for researchers to train and analyze various state-of-the-art models. In order to create a one-stop solution for QA research and with the long-term aim of democratizing QA research by providing easy replicability, a team from IBM Research AI developed a QA repository known as \u2018The Prime Repository for State-of-the-Art Multilingual Question Answering Research and Development\u2019 or PrimeQA. It is an open-source repository that provides academics and researchers with all the necessary tools to easily and quickly create a custom QA application. Using PrimeQA, a researcher can obtain pre-trained models from various online sources and use them to execute the experiments described in a paper published at the most recent NLP conference.\n\nThe creation of the PrimeQA repository took into account several design patterns, including reproducibility, customization, etc. Users can blend different approaches with their respective companion modules to easily replicate state-of-the-art published results. For instance, combining a reader with a retriever, as done in several QA pipelines. PrimeQA also provides for customization to allow researchers to extend their models in accordance with the needs of their applications and employ unique data according to the supported data formats of the repository. To further make it simpler for developers to deploy pre-trained off-the-shelf models quickly, PrimeQA also includes many reusable components. As a result, there is less need for code modification, saving both time and labor. Moreover, PrimeQA models are built on top of Transformers, making them easy to integrate with Hugging Face Datasets and the Model Hub.\n\nPrimeQA is an end-to-end toolbox consisting of user-friendly implementations of state-of-the-art retrievers and readers at the top of major QA leaderboards. It can perform training, inference, and performance evaluation of these models. Moreover, a number of sibling repositories offer tools for tying together different retrievers and readers and building a front-end user interface (UI) for customers. PrimeQA supports core QA functionalities like information retrieval, reading comprehension, and auxiliary capabilities such as question generation, which are described in detail below:\n\n1. Information Retrieval: PrimeQA includes extensions for both dense (such as ColBERT) and sparse (such as BM25) retrievers. The repository consists of a single Python script to switch to different retriever algorithms by passing additional arguments.\n\n2. Reading Comprehension: The reader component predicts an answer for a given query and a retrieved paragraph that are either directly derived from the context or is generated based on it. PrimeQA allows the training and inference of extractive and generative readers via a single Python script.\n\n3. Question Generation: Question generation is a powerful method for enhancing the generalization of QA models. Modern sequence-to-sequence generation architectures are the foundation of PrimeQA\u2019s QG component, which accepts unstructured and structured input text through a single Python script.\n\nTo sum up, PrimeQA is an open-source library created by QA researchers and developers to make it simple to encourage the replication and reuse of past and present works. With contributions from significant academic institutions, PrimeQA already has a strong developer community and welcomes participation from both newcomers and professionals. PrimeQA\u2019s reusability and ease of access have attracted a lot of attention, allowing the library to develop naturally into a key tool for the quick advancement of QA community technology.\n\nCheck out the Paper and Github. All Credit For This Research Goes To the Researchers on This Project. Also, don\u2019t forget to join our 15k+ ML SubReddit, Discord Channel, and Email Newsletter, where we share the latest AI research news, cool AI projects, and more.",
        "summary": "To undertake large-scale QA experiments, there is currently no centralized repository that makes it easy for researchers to train and analyze various state-of-the-art models.\nThe creation of the PrimeQA repository took into account several design patterns, including reproducibility, customization, etc.\nMoreover, PrimeQA models are built on top of Transformers, making them easy to integrate with Hugging Face Datasets and the Model Hub.\nPrimeQA is an end-to-end toolbox consisting of user-friendly implementations of state-of-the-art retrievers and readers at the top of major QA leaderboards.\nQuestion Generation: Question generation is a powerful method for enhancing the generalization of QA models.",
        "keywords": [
            "open",
            "question",
            "stateoftheart",
            "lines",
            "models",
            "retrievers",
            "python",
            "qa",
            "research",
            "retriever",
            "repository",
            "using",
            "gpt",
            "primeqa",
            "source",
            "retrieval",
            "researchers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiJ2h0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy9uMDcuaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "KDnuggets News, February 22: Learning Python in Four Weeks: A Roadmap \u2022 Is Data Science a Dying Career?",
        "description": "KDnuggets News, February 22: Learning Python in Four Weeks: A Roadmap \u2022 Is Data Science a Dying Career?\n\nLearning Python in Four Weeks: A Roadmap \u2022 Is Data Science a Dying Career? \u2022 Hypothesis Testing in Data Science \u2022 7 Best Tools for Machine Learning Experiment Tracking \u2022 5 Genuinely Useful Bash Scripts for Data Science",
        "summary": "KDnuggets News, February 22: Learning Python in Four Weeks: A Roadmap \u2022 Is Data Science a Dying Career?\nLearning Python in Four Weeks: A Roadmap \u2022 Is Data Science a Dying Career?\n\u2022 Hypothesis Testing in Data Science \u2022 7 Best Tools for Machine Learning Experiment Tracking \u2022 5 Genuinely Useful Bash Scripts for Data Science",
        "keywords": [
            "tools",
            "kdnuggets",
            "dying",
            "learning",
            "python",
            "roadmap",
            "tracking",
            "weeks",
            "useful",
            "science",
            "data",
            "22",
            "career"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiQWh0dHBzOi8vd3d3LmdyZWVubWF0dGVycy5jb20vbmV3cy9idXJtZXNlLXB5dGhvbi1pbnZhc2l2ZS1zcGVjaWVz0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How Invasive Burmese Pythons Are Taking Over Southern Florida",
        "description": "Home > Big Impact > Community > Conservation Source: Getty Images How Invasive Burmese Pythons Are Taking Over Southern Florida By Eva Hagan Feb. 21 2023, Published 12:28 p.m. ET\n\nOne of the largest snakes in the world, the Burmese python, is now making its way through parts of Florida. And as the carnivorous giant continues to establish a breeding ground along the Florida coast, wildlife naturalists are concerned about the future of various plant and animal species in the Everglades.\n\nArticle continues below advertisement\n\nAs an invasive species in this area, the Burmese python is a growing threat to the equilibrium of native ecosystems.\n\nSource: Getty Images\n\nArticle continues below advertisement\n\nWhat is a Burmese python, and how did it end up in Florida?\n\nIn pictures, the carnivorous Burmese python looks more like a reptilic beast than a snake. The Python subspecies ranges anywhere from 16 to 23 feet in length, can weigh up to 200 pounds, and has an average life span of 20 to 25 years, per National Geographic.\n\nThey are native to the wetlands and marshes of Southeast Asia, but over 100,000 were imported to the U.S. for pet trading in the 1970s. Some were intentionally released, while others escaped, establishing wild populations of the Burmese python today, most existing in the South of Florida, per the U.S. Department of Agriculture.\n\nArticle continues below advertisement\n\nAre they an invasive species?\n\nAccording to the National Oceanic and Atmospheric Administration, (NOAA), an invasive species is \"an organism that causes ecological or economic harm in a new environment where it is not native.\"\n\nDue to the Burmese python's impact on the surrounding environment, the U.S. Department of Agriculture classified the animal as an invasive species to the United States. Particularly a threat to Southern Florida, the Burmese python's climbing swimming capabilities, along with its covert coloring, make its growing population concerning.\n\nArticle continues below advertisement\n\nSource: Getty Images\n\nAlthough they are not interested in attacking humans, and are luckily non-venomous, the snake feasts on all kinds of mammals. According to WBUR-FM, researchers at the University of Florida have discovered \"24 mammal species, 47 bird species, and three reptile species in the bellies of Burmese pythons.\" This includes remnants from an animal as large as a white-tailed deer.\n\nArticle continues below advertisement\n\nNot only are they incredibly large, but the snakes are also multiplying faster than surrounding populations with their ability to lay over 120 eggs at a time. In addition to their astonishing growth rate, their habitat range of anywhere from aquatic areas to trees makes them extremely hard to track down, making the capture and kill process even more difficult, per WBUR-FM.\n\nHow Floridians are addressing the issue:\n\nAccording to the Florida Fish and Wildlife Conservation Commission (FWC), \"members of the public may capture and humanely kill nonnative reptiles like Burmese pythons.\" Transporting live pythons is not allowed, and they must be killed after being captured.\n\nArticle continues below advertisement\n\nSource: Getty Images\n\nTraining and information on handling snakes and about how to safely capture and kill are all available within the \"Python Patrol\" program on the FWC website.",
        "summary": "Home > Big Impact > Community > Conservation Source: Getty Images How Invasive Burmese Pythons Are Taking Over Southern Florida By Eva Hagan Feb. 21 2023, Published 12:28 p.m.\nETOne of the largest snakes in the world, the Burmese python, is now making its way through parts of Florida.\nArticle continues below advertisementAs an invasive species in this area, the Burmese python is a growing threat to the equilibrium of native ecosystems.\nDue to the Burmese python's impact on the surrounding environment, the U.S. Department of Agriculture classified the animal as an invasive species to the United States.\nParticularly a threat to Southern Florida, the Burmese python's climbing swimming capabilities, along with its covert coloring, make its growing population concerning.",
        "keywords": [
            "taking",
            "continues",
            "snakes",
            "florida",
            "python",
            "invasive",
            "species",
            "getty",
            "burmese",
            "pythons",
            "kill",
            "southern"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMib2h0dHBzOi8vd3d3Lm5iYzE1LmNvbS8yMDIzLzAzLzEyL2ktd2FzLXNvLWhhcHB5LWJhbGwtcHl0aG9uLWZvdW5kLXUtaGF1bC10cnVjay1yZXVuaXRlZC13aXRoLTE0LXllYXItb2xkLW93bmVyL9IBfmh0dHBzOi8vd3d3Lm5iYzE1LmNvbS8yMDIzLzAzLzEyL2ktd2FzLXNvLWhhcHB5LWJhbGwtcHl0aG9uLWZvdW5kLXUtaGF1bC10cnVjay1yZXVuaXRlZC13aXRoLTE0LXllYXItb2xkLW93bmVyLz9vdXRwdXRUeXBlPWFtcA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "\u2018I was so happy\u2019: Ball python found in U-Haul truck reunited with 14-year-old owner",
        "description": "HENRICO, Va. (WWBT/Gray News) - A slithery surprise inside a U-Haul truck turned into a happy ending for a Virginia family as they were reunited with their pet ball python.\n\nThe reunion took place after Megan Hamm, an area field manager with U-Haul, found the creature on the passenger side of a U-Haul rental truck on Wednesday.\n\nVirginia Wildlife Management and Control then took the snake to his owner, 14-year-old Dion Jones.\n\nDion thought he had lost the pet python less than two weeks ago during his move from Winchester to Norfolk.\n\n\u201cWe have a little enclosure for our snake,\u201d he told WWBT. \u201cWhen he had to shut the lid, I guess the lid wasn\u2019t fully closed because there was already a little rip inside of it. So, the snake must\u2019ve got through that while we were sleeping.\u201d\n\nThe next morning, Dion said the snake was nowhere to be found.\n\n\u201cWe looked inside the back of the U-Haul, we couldn\u2019t find it nowhere,\u201d he said. \u201cWe looked inside the engine, under the floorboards, inside the little silver thing that holds the engine, and we couldn\u2019t find it nowhere.\u201d\n\nThe snake also has an emotional connection with Dion. The 14-year-old said the python is named after his father, Nate, who passed away last May.\n\n\u201cI got locked up for something dumb, so I was inside of a group home kind of thing,\u201d Dion said. \u201cOnce I was supposed to get out, my dad was supposed to buy me a snake, but it never happened.\u201d\n\nFor Dion, the pet python was considered a \u201cspiritual animal.\u201d\n\nSadness over losing his pet turned to hope when Hamm discovered the python.\n\n\u201cOpening up the truck, that was kind of a shock,\u201d Hamm said. \u201cI\u2019ve got to act quickly. It\u2019s too cold.\u201d\n\nVirginia Wildlife Management and Control stepped in to help the snake, which was found \u201cunresponsive.\u201d After crews stayed up all night with the snake, it began to show signs of improvement.\n\nHamm contacted Jones and his family to tell them their pet python was found.\n\n\u201cMy mom called me and said they found the snake,\u201d Dion said. \u201cI was so happy. I was like, for real? Like, they actually found it, and we can get the snake back?\u201d\n\nThe slithery surprise turned into a happy ending.\n\n\u201cThis entire journey over the last 48 hours has been surreal,\u201d Hamm said.\n\nRichard Perry, the owner of Virginia Wildlife Management and Control, said the reunion is a story he\u2019ll never forget.\n\n\u201cOne gentleman asked us, out of all the stories that we\u2019ve done over the years and everything, which one ranks the highest? This, by far, ranks at the top of the chart,\u201d he said.\n\nDion said his pet python is never leaving his side and he\u2019ll be keeping a closer eye on it.\n\nCopyright 2023 Gray Media Group, Inc. All rights reserved.",
        "summary": "HENRICO, Va. (WWBT/Gray News) - A slithery surprise inside a U-Haul truck turned into a happy ending for a Virginia family as they were reunited with their pet ball python.\nDion thought he had lost the pet python less than two weeks ago during his move from Winchester to Norfolk.\nHamm contacted Jones and his family to tell them their pet python was found.\n\u201cMy mom called me and said they found the snake,\u201d Dion said.\nDion said his pet python is never leaving his side and he\u2019ll be keeping a closer eye on it.",
        "keywords": [
            "dion",
            "happy",
            "hamm",
            "python",
            "pet",
            "uhaul",
            "snake",
            "14yearold",
            "inside",
            "wildlife",
            "owner",
            "truck",
            "turned",
            "reunited",
            "ball"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMihgFodHRwczovL25ld3M3bm9pZGEuY29tL2dyZWF0ZXItbm9pZGEtYmt1LXB5dGhvbi1hbm5vdW5jZWQtYS1wcm90ZXN0LWFnYWluc3QtdGhlLWFyYml0cmFyaW5lc3Mtb2Ytb2ZmaWNlcnMtcGFuY2hheWF0LWZvci10aGVzZS1kZW1hbmRzL9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Greater Noida: BKU Python announced a protest against the arbitrariness of officers, panchayat for these demands",
        "description": "\n\n\n\nGovernance and administration are also not serious about the problems related to JP. This conclusion came out in the panchayat of about 2 hours\u2026 .",
        "summary": "Governance and administration are also not serious about the problems related to JP.\nThis conclusion came out in the panchayat of about 2 hours\u2026 .",
        "keywords": [
            "protest",
            "related",
            "governance",
            "conclusion",
            "announced",
            "jp",
            "administration",
            "problems",
            "panchayat",
            "python",
            "serious",
            "bku",
            "noida",
            "officers",
            "arbitrariness",
            "came",
            "hours",
            "demands",
            "greater"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiW2h0dHBzOi8vd3d3Lm1zbi5jb20vZW4tY2EvbmV3cy92aWRlby9iYWxsLXB5dGhvbi1zbGl0aGVycy1vbi1taWNyb2ZpYmVyLWJsYW5rZXQvdmktQUExOFhKc1TSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Ball Python Slithers on Microfiber Blanket",
        "description": "You are using an older browser version. Please use a supported version for the best MSN experience.",
        "summary": "You are using an older browser version.\nPlease use a supported version for the best MSN experience.",
        "keywords": [
            "slithers",
            "experience",
            "blanket",
            "version",
            "browser",
            "python",
            "best",
            "older",
            "msn",
            "using",
            "supported",
            "ball",
            "microfiber"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiUWh0dHBzOi8vd2VhdGhlci5jb20vc2NpZW5jZS9lbnZpcm9ubWVudC9uZXdzLzIwMjMtMDMtMDYtcHl0aG9ucy1zcHJlYWQtaW4tZmxvcmlkYdIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Pythons Spreading In Florida, According to USGS",
        "description": "At a Glance More than 10,000 Burmese pythons have been captured in Florida in the past five years, according to the USGS.\n\nThey're spreading out from the Everglades to other parts of southern Florida.\n\nFlorida holds a state-sponsored hunt for them each year.\n\nSign up for the Morning Brief email newsletter to get weekday updates from The Weather Channel and our meteorologists.\n\nB\u200burmese pythons have been lurking in the Florida everglades for years.\n\nBut new research from the U.S. Geological Survey shows just how quickly the wild python population has exploded \u2014 and how far the snakes have spread.\n\nBurmese pythons are an invasive species that ambushes their prey, are elusive to trappers and may be genetically adapting to cooler temperatures than are usual in South Florida, according to the paper published in January.\n\nHere\u2019s a look at some of the key points in the USGS research.\n\nMore than 10,000 Burmese pythons have been captured in Florida in the past five years.\n\nThat\u2019s a rapid uptick from the time the first Burmese python was found in the wild there in 1979. After that lone snake was captured, another wasn\u2019t found for 16 years. That year, 1995, saw two captured.\n\nBy the mid-aughts, trappers were capturing more than 400 Burmese pythons a year in the Everglades. The annual catch has been in the thousands since 2017.\n\nB\u200but they aren't easy to find.\n\n\u201cThey spend 85% of their time not moving,\" Amy Siewe, a python hunter, told WINK-TV. \"And when they do move, it is very slow, and they don\u2019t like to be exposed,\u201d\n\nThey\u2019re spreading in every direction.\n\nA map published with the study shows that pythons have spread across nearly all of southern Florida. The USGS researchers call it the \"invasion front\"\n\nSome of the farther reaches of the front include agricultural areas around Lake Okeechobee, to the west near Naples, north past Fort Myers, east to Palm Beach County\u2019s Loxahatchee National Wildlife Refuge and south to the Upper Keys.\n\nThere are also several records of pythons further north on the Florida peninsula, but the scientists say those are more likely snakes that recently escaped or were released from captivity, versus those that are part of the wild population.\n\nA Burmese python is seen in this undated photo from the Florida Fish and Wildlife Conservation Commission. (Florida Fish and Wildlife Conservation Commission)\n\nThe first Everglades population probably started at a place called Flamingo.\n\nBurmese pythons are native to Southeast Asia, not South Florida. No one knows for sure when or how they got to the Everglades. The best guess is that a small group of them was released from captivity at the southernmost point of Everglades National Park, which is also the southernmost point of the Florida peninsula.\n\nThey prefer warmer temperatures, for now.\n\nAdvertisement Just how far they\u2019ll spread depends on several factors, including weather and climate change.\n\nA freeze in 2010 killed off many wild pythons. But since then, researchers have found evidence of rapid evolution in Everglades Burmese python genes associated with cold tolerance.\n\nIn other words, the snakes found a way to quickly adapt to cooler temperatures.\n\n\u201cOverall, potential range limits of Burmese pythons are uncertain,\u201d the study notes.\n\nPythons are blamed for the decline of several species in the Everglades.\n\nThe snakes have altered the food web throughout southern Florida. Their diet consists mostly of birds and smaller mammals, but they are also known to eat larger prey including alligators, deer, bobcat and wild pigs.\n\nThe winner of the annual Florida Python Challenge gets a $10,000 reward. (FWC photo by Avery Bristol)\n\nEach year there is a state-sponsored hunt called the Florida Python Challenge.\n\nThe 10-day competition includes a $10,000 prize for the hunter who bags the most Burmese pythons. Last year\u2019s challenge included 1,000 participants from 32 states, Canada and Latvia. Together, they captured about 231 pythons, a little less than 10% of all pythons captured in 2022.\n\nT\u200bhe state has also monthly \"python patrol\" training online, to teach people how to safely trap and kill the snakes.\n\nNo humans have ever been killed by a wild Burmese python in Florida.\n\nIn fact, such attacks are extremely rare anywhere in the world. The few deadly encounters that do happen between humans and pythons almost always involve snakes kept in captivity.\n\nW\u200bant to learn more?\n\nW\u200bATCH: Bobcats Might Save Florida from Pythons\n\nR\u200bEAD: Hybrid Python Could Pose Bigger Threat to Florida Everglades\n\nR\u200bEAD: Florida Restricts 16 Invasive Reptile Species, Including Pythons, Iguanas And Lizards\n\nW\u200bATCH: Giant Python Swims In Baby Pool\n\nThe Weather Company\u2019s primary journalistic mission is to report on breaking weather news, the environment and the importance of science to our lives. This story does not necessarily represent the position of our parent company, IBM.",
        "summary": "At a Glance More than 10,000 Burmese pythons have been captured in Florida in the past five years, according to the USGS.\nB\u200burmese pythons have been lurking in the Florida everglades for years.\nMore than 10,000 Burmese pythons have been captured in Florida in the past five years.\nBut since then, researchers have found evidence of rapid evolution in Everglades Burmese python genes associated with cold tolerance.\nTogether, they captured about 231 pythons, a little less than 10% of all pythons captured in 2022.",
        "keywords": [
            "snakes",
            "weather",
            "captured",
            "florida",
            "python",
            "everglades",
            "wild",
            "burmese",
            "spreading",
            "pythons",
            "10000",
            "according",
            "usgs"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMigwFodHRwczovL3d3dy5uZXd5b3JrdXBzdGF0ZS5jb20vb3V0ZG9vcnMvMjAyMy8wMy9kZWMtd291bGQtbGlrZS10by1rbm93LXdoby1taXNwbGFjZWQtMTQtZm9vdC1weXRob24tZm91bmQtb24tbmV3LXlvcmstcm9hZHNpZGUuaHRtbNIBkgFodHRwczovL3d3dy5uZXd5b3JrdXBzdGF0ZS5jb20vb3V0ZG9vcnMvMjAyMy8wMy9kZWMtd291bGQtbGlrZS10by1rbm93LXdoby1taXNwbGFjZWQtMTQtZm9vdC1weXRob24tZm91bmQtb24tbmV3LXlvcmstcm9hZHNpZGUuaHRtbD9vdXRwdXRUeXBlPWFtcA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "DEC would like to know who misplaced 14-foot python found on New York roadside",
        "description": "On Valentine\u2019s Day somebody reported seeing a 12-foot snake on the side of the road in the Long Island town of Medford, New York.\n\nDepartment of Environmental Conservation police officers investigating the report found the snake, a reticulated python, curled up in ball.\n\nPythons are native to South and Southeast Asia and cannot survive for long in cold temperatures. After determining that the snake was dead, the officers stretched it to its full length of 14-feet before disposing of it.\n\nIt\u2019s illegal to keep these types of snakes as pets in New York, DEC said, and only those with a Dangerous Animal License may possess them.\n\nAn investigation into the snake\u2019s owner is ongoing.\n\n\n\nSign up for the CNY Outdoors Newsletter\n\nEnter your email address to get weekly updates on CNY outdoors news delivered to your inbox:\n\n\n\n\n\n\n\n\n\nSteve Featherstone covers the outdoors for The Post-Standard, syracuse.com and NYUP.com. Contact him at sfeatherstone@syracuse.com or on Twitter @featheroutdoors. You can also follow along with all of our outdoors content at newyorkupstate.com/outdoors/ or follow us on Facebook at facebook.com/upstatenyoutdoors.",
        "summary": "On Valentine\u2019s Day somebody reported seeing a 12-foot snake on the side of the road in the Long Island town of Medford, New York.\nDepartment of Environmental Conservation police officers investigating the report found the snake, a reticulated python, curled up in ball.\nIt\u2019s illegal to keep these types of snakes as pets in New York, DEC said, and only those with a Dangerous Animal License may possess them.\nSign up for the CNY Outdoors NewsletterEnter your email address to get weekly updates on CNY outdoors news delivered to your inbox:Steve Featherstone covers the outdoors for The Post-Standard, syracuse.com and NYUP.com.\nYou can also follow along with all of our outdoors content at newyorkupstate.com/outdoors/ or follow us on Facebook at facebook.com/upstatenyoutdoors.",
        "keywords": [
            "roadside",
            "snakes",
            "dec",
            "weekly",
            "officers",
            "python",
            "know",
            "long",
            "14foot",
            "snake",
            "follow",
            "misplaced",
            "outdoors",
            "cny",
            "yorkdepartment",
            "york"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiX2h0dHBzOi8vd3d3LnRlY2h0YXJnZXQuY29tL3NlYXJjaGl0b3BlcmF0aW9ucy90aXAvQ29tcGFyZS1Hby12cy1QeXRob24tV2hhdC1hcmUtdGhlLWRpZmZlcmVuY2Vz0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Compare Go vs. Python: What are the differences?",
        "description": "Any developer knows there's no such thing as a perfect programming language. Each has upsides and downsides that should be carefully considered, depending on what's needed for a particular software project.\n\nPython has long been a popular option for those looking to learn their first programming language due to its clarity and readability. Whereas many predecessors of Python use special characters for control structures and are syntactically complex, Python uses white space and has a simpler syntax that resembles spoken language.\n\nMore recently, Go -- also known as Golang -- has risen in popularity. With supporters praising Go's developer-friendly features, frequent updates and simple-but-elegant mindset, more and more programmers are choosing to learn the language.\n\nPython and Go are both popular, versatile and suitable for beginners, but the two languages also have some important differences.\n\nPython and Go are two well-known options, but DevOps engineers have many languages to choose from.\n\nSyntax differences between Python and Go Syntactically, Python is much simpler than Go. Instead of curly braces, Python uses changes in indentation to denote functions and control flow. In the following example, which shows a function used to convert a string to uppercase, the tab space at the beginning of the second line indicates the function body: def to_uppercase(string):\n\nreturn string.upper() In contrast to Python's use of white space, Go relies on curly braces to indicate the function body, a more familiar design for programmers coming from C-like languages. The following example, which shows the same function as above written in Go, illustrates this syntactical difference: func toUppercase(str string) string {\n\nreturn strings.ToUpper(str)\n\n} Unlike in Python, the tab space at the beginning of the second line in the Go example is merely for style and readability. Without the white space, the program would still execute normally.\n\nTyping approaches in Python and Go Python and Go have different approaches to variable typing: Python is dynamically typed, whereas Go is statically typed. In the previous example of Go code, the function signature contains a type declaration: The types of the function's str argument and return value are both defined as string. In contrast, Python does not require type definition for function arguments. Some programmers prefer a typing system like Go's, where the compiler can validate that functions have been called with the proper types before the application is executed. When a Go program is successfully compiled, a developer can feel more assured that the program will function as intended, since the compiler checks for the types passed to functions and any unused variables. Because Python is an intrepreted, not compiled, language, it is executed without any of these preflight checks. As a result, Python programs can fail with many type-related errors that a Go program would catch during compilation.\n\nGo vs. Python: Command-line tools and dependencies Go programs use a built-in command-line tool called the go command. The go command can initialize new Go modules, download project dependencies and run test suites, among other uses described in the documentation. While there are similar command-line tools for Python, they are not built into the language and can often be a source of frustration. Ask a Python developer about versioning, and you'll often get a response of exasperation, as there is no officially supported solution to manage Python versions. Pyenv is an open source, third-party tool that can be used to manage multiple Python implementations. For dependency management, Python uses the package installer pip, which works well but not as well as Go's fully integrated package management. For developers who enjoy having a comprehensive command-line tool to assist in many aspects of development, Go is certainly the better choice. Python requires more research, configuration and maintenance on the developer's part to set up their preferred solution for package management.\n\nConcurrency and multithreading in Python and Go Concurrency and concurrent programs are becoming more popular as developers look to maximize performance and scale. Go is designed with concurrency at front of mind. Using goroutines, any function can run asynchronously, separate from the rest of the program. Python does support multithreaded execution, but it doesn't feel as polished and cleanly integrated as Go's goroutines. In Python, a thread uses the OS' threads, which results in greater overhead per thread compared with goroutines. Instead of reaching out to the OS, goroutines use lightweight threads managed by the Go runtime. The following is a basic example of a function written with multithreading in Python: import threading\n\n\n\ndef myFunc():\n\nprint(\"Hello World!\")\n\n\n\nt1 = threading.Thread(target=myFunc)\n\nt1.start() Below, the same function is shown in Go: func myFunc() {\n\nfmt.Println(\"Hello World!\")\n\n}\n\n\n\ngo myFunc() The Python program has to first import the threading library, then create a thread object and finally call start() on the thread object. In Go, however, any function can be called asynchronously with the go keyword, which runs the function in its own thread. As a result, a concurrent Go program is much simpler than an equivalent program written in Python.\n\nComparing Go and Python for containerized apps Python is often slower than Go, as shown in the above threading comparison. This means there are some differences between Go and Python worth considering when working with containerized applications. A key advantage of container architectures is the ability to scale an application quickly. Therefore, when working with containers, it's also most effective to choose a language that runs quickly. As a faster, more lightweight language, Go has the advantage over Python in a containerized tech stack that uses platforms such as Docker and Kubernetes, which are themselves written in Go.",
        "summary": "Syntax differences between Python and Go Syntactically, Python is much simpler than Go.\nInstead of curly braces, Python uses changes in indentation to denote functions and control flow.\nTyping approaches in Python and Go Python and Go have different approaches to variable typing: Python is dynamically typed, whereas Go is statically typed.\nFor dependency management, Python uses the package installer pip, which works well but not as well as Go's fully integrated package management.\nIn Python, a thread uses the OS' threads, which results in greater overhead per thread compared with goroutines.",
        "keywords": [
            "compare",
            "string",
            "function",
            "thread",
            "program",
            "space",
            "python",
            "written",
            "uses",
            "example",
            "vs",
            "differences",
            "language"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiPGh0dHBzOi8vd3d3LnNwaWNld29ya3MuY29tL3RlY2gvZGV2b3BzL2FydGljbGVzL3ItdnMtcHl0aG9uL9IBPGh0dHBzOi8vd3d3LnNwaWNld29ya3MuY29tL3RlY2gvZGV2b3BzL2FydGljbGVzL3ItdnMtcHl0aG9uLw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "The 12 Vital Differences Between R and Python",
        "description": "R and Python are among the most-used programming languages in the world, particularly in the era of data analysis and artificial intelligence. This article provides an analysis and evaluation of the programming languages R and Python. It discusses the advantages and disadvantages of each language. You will also learn the 12 key differences between R and Python and their five similarities.\n\nWhat Is R?\n\nR is an open-source programming language with an environment that is useful for performing statistical computing and data visualization. This environment is built around a basic command-line interface that programmers utilize to read data, specify commands, and receive results. The environment also allows programmers to combine individual operations into a single function that can be reused and perform looping functions.\n\nR runs and compiles on various operating systems such as UNIX platforms, macOS, and Windows. It is a popular language in academic settings due to its robust features. R has various statistical and graphical methods, such as time series, machine learning algorithms, and linear regression.\n\nRoss Ihaka and Robert Gentleman officially released the first version of R in 1995. Over the years, several versions have been released, with each introducing new or improved features. On 22nd April 2022, the latest R version was released: 4.2.0.\n\nCompanies such as Meta, Google, and Uber use the R programming language.\n\nPros and cons of R\n\nThe R programming language has the following advantages:\n\nThrough ggplot2 R, users can visualize their data with attractive graphs with notations and formulas.\n\nR users convert unstructured code into structured ones through packages such as readr and dplyr.\n\nR is an open-source language that allows several people to optimize and improve its source code and features.\n\nHowever, it does have a few drawbacks:\n\nR takes more time to give an output when compared to other languages, such as MATLAB , as it is a slowing processing language.\n\nR consumes more memory as objects are stored in the random access memory (RAM); the process slows down as more data is added.\n\nR is not ideal for use with big data . It also requires that all the data be in one place, thus making the process of data handling tedious. Although, users can use integration to make this process easier.\n\nSee More: What Is PowerShell? Meaning, Working, Uses, and Advantages\n\nWhat Is Python?\n\nPython is a high-level, general-purpose programming language. It is an open-source, flexible, and object-oriented programming language that emphasizes code readability with a decluttered visual structure and simple syntax.\n\nPython runs in operating systems such as macOS, UNIX- based systems, MS-DOS, and various versions of Windows. Python is a popular language applied in data science, data analysis, web application development, machine learning, and system scripting. It is preferred by programmers for its versatility, debugging capabilities, embeddable code, code efficiency, and other complex functionalities.\n\nOn 20th February 1991, Guido Van Rossum released the first version of Python language. Since then, several versions of Python have been released, as others have been discontinued due to security concerns. For example, on 7th September 2022, four new releases of Python were made due to a possible denial of service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14. Python 2.0 was released on 16th October 2000, while Python 3.0 was released on 3rd December 2008.\n\nPython programming language is used by companies such as Netflix, Spotify, and NASA.\n\nPros and cons of Python\n\nBy using Python, you can gain the following advantages:\n\nPython is open source, allowing several people to contribute and improve its libraries and features.\n\nPython has many essential libraries to perform data science-related functions.\n\nIt enhances productivity with its integration and control capabilities.\n\nUsers can embed Python codes with other programming languages, such as C++ when needed.\n\nHowever, do keep in mind the following shortcomings:\n\nIt is relatively slower than other programming languages as it is an interpreted language.\n\nIt consumes a large amount of memory which may cause it to respond slowly when more objects need to be accessed.\n\nPython\u2019s database access layers are underdeveloped compared to other databases, such as Java Database Connectivity (JDBC) and Open Database Connectivity (ODBC).\n\nSee More: Java vs. JavaScript: 4 Key Comparisons\n\n12 Key Differences Between R And Python\n\nThe following are the differences between R and Python programming languages.\n\n1. Differences in introduction\n\nPython is a general-purpose language for scientific computing and data analysis. It is primarily used to analyze data or code into machines for machine learning (ML). For instance, programmers can use python to develop ML or mobile applications.\n\nOn the other hand, R is a programming language and an environment for statistical programming, which includes statistical computing and graphics. Statisticians created R; thus, its functions lean heavily into statistical models and specialized analytics. Data scientists mostly use it to perform statistical analysis. Its output consists of beautiful data visualizations. For instance, it can be used by bioinformaticians to conduct genomics research.\n\n2. Overall objectives\n\nPython primarily creates graphical user interface (GUI) applications, web applications, machine learning, and data analysis. For instance, users can use Python\u2019s Tkinter GUI framework library to develop GUI applications. They can use Tkinter to create widgets to display text and images. Python frameworks such as Django, CherryPy, and Grok are used in web development. The Python SciPy package is used in machine learning in Python.\n\nIn contrast, R has several features that enable it to be primarily used in statistical analysis and representation. It has arrays, lists, vectors, and matrices that allow calculations. It also has packages such as ggplot2, lattice, highcharter, and plotly, enabling users to create data visualization. Additionally, R consists of tools such as bar graphs, histograms, scatter plots, and heat maps that are also useful in data representation.\n\n3. The degree of ease of use\n\nPython is a standard programming language that beginners can quickly learn and understand due to its simple syntax. It requires programmers to write fewer lines of code and is easy to read. Python uses a more streamlined approach for its data science projects. It has a robust array of libraries that enable users to input the library\u2019s action into the code, allowing it to perform matrix computations and optimization easily.\n\nR is less popular than Python but is still widely recognized. It is not beginner friendly and has a steep learning curve as its syntax is difficult to read and requires programmers to write more lines of code even for simple operations. R is mainly used for complex data analysis in data science. Its command-line scripting enables users to store complex analytical methods to be recalled later when needed.\n\n4. The degree of ease of learning\n\nThe ease with which an individual can learn programming hugely depends on background and programming mastery. However, there is a consensus that Python has a smoother learning curve, making learning more accessible. It is a time-efficient language that demands less coding time as its syntax is similar to the English Language, which allows programmers to finish coding tasks quickly and, in turn, get more time to explore Python.\n\nOn the other hand, beginners report finding it more challenging to learn and master the R programming language due to its non-standardized code. The non-standardized code makes R look clunky and awkward to these new programmers and thus may require an extended learning period. However, R is easier to learn for people with a background in statistics.\n\n5. Popularity of the language\n\nPython is more popular according to The Importance Of Being Earnest (TOIBE) index. It has a rating of 17.08% in the October 2022 report, representing an increase in demand of 5% in the past year. Its versatility, ease of use, and huge community have contributed to this immense growth. Python has a more extensive user base that is diverse; they include developers and programmers.\n\nPython is the go-to language in the production sector because its simple syntax allows programmers to perform complex operations using fewer lines of code. It is also ranked as one of the most in-demand tech skills by employers, making it an in-demand skill.\n\nR is less popular than Python. According to the October 2022 report by TIOBE, it ranks as the 12th most popular language with a rating of 1.27%, representing a 0.03% change in the past year. These percentage increases show the increased demand for Python language by programmers and data scientists. R\u2019s user base is mainly in the academic sector, consisting of data scientists and research and development (R&D) who perform data analytics.\n\n6. Use with integrated development environments (IDEs)\n\nAn integrated development environment is a software tool that equips users with an interface for coding, testing, and debugging features. An IDE comprises an editor for the source code, build automation tools, and a debugger. The source code editor is a text editor that assists programmers in writing code.\n\nIt has features that allow for checking bugs when writing code and an auto-completion feature. The build automation tools allow for the automation of recurring tasks, such as compiling source code into the eventual binary code and packaging the code. The debugger displays the location of the bug in the original code.\n\nThe IDE features enable programmers to organize their workflow and solve problems. Python uses IDEs such as Spyder, Eclipse+Pydev, and Atom, while R uses IDEs such as Rstudio, RKward, and R commander.\n\nSee More: Software Developer vs. Software Engineer: Top 10 Differences\n\n7. Libraries and packages\n\nLibraries and packages comprise a collection of precompiled codes that programmers can use to perform specific and defined operations. Library also includes documentation, message templates, classes, and configuration data. Python libraries and packages comprise a collection of related modules of code that are used repeatedly in different programs to perform specified tasks.\n\nThe Python Matplotib library is responsible for plotting numerical data, thus valuable for data analysis. The Pandas library provides flexible high-level data structures and tools that are useful in data analysis, cleaning, and manipulation. The NumPy library is a machine-learning library that supports multi-dimensional data and large matrices. It has in-built mathematical functions for computations.\n\nIn contrast, R has libraries such as the ggplot2 library that are useful in data visualization, the Shiny package that is used to create interactive web applications, and the Rcrawler package that is used for domain-based web crawling and web scraping. R stores its packages in repositories such as the comprehensive R archive network (CRAN), the official repository, Github, and Bioconductor for topic-specific repositories.\n\n8. Speed and performance\n\nPython is a high-level language that uses simple syntax. It is the preferred option when building critical and fast applications as it uses less code, which takes less time to execute. In contrast, R is a low-level programming language. It requires longer codes, even for simple processes. A long code takes longer to run. Thus, R can be said to execute code slower than Python.\n\n9. Data collection\n\nPython is more versatile as it allows users to use all data formats, including comma-separated value (CSV) files and Javascript Object Notation (JSON) files. It enables the importation of structured query language (SQL) tables into its code. The Python requests library allows web developers to grab data from the web to create datasets quickly.\n\nOn the contrary, R was developed to enable analysts to import data from Excel, text files, and CSV files. Unlike Python, R packages are designed for basic web scraping. Data frames in R can be created by turning files built in SPSS or Minitab format.\n\n10. Data exploration and manipulation\n\nData exploration involves exploring an extensive data set to discover initial patterns, characteristics, and points of interest. Data manipulation involves organizing the data into structured data so that computer programs can interpret it easily. The Pandas library in Python is used for data manipulation and exploration. It enables users to filter, sort, and display data quickly. Pandas also have capabilities that allow merging and joining datasets and indexing and subsetting data that facilitates data manipulation.\n\nIn contrast, R is purpose-built for the statistical analysis of vast datasets and thus offers a wide range of solutions for data exploration and manipulation. The dplyr package in R allows users to select, filter, mutate, group, summarize, and join data. R also enables users to create probability distributions, use different statistical tests, and use data mining techniques.\n\n11. Approach to data modeling\n\nPython comprises standard libraries for data modeling. For example, NumPy is used for numerical modeling analysis, SciPy is used to perform scientific computing and calculations, and scikit-learn is used for machine learning algorithms. The Tidyvserse package makes it easy to import, manipulate, visualize and report data in R. However, sometimes users rely on external packages to perform specific data modeling analyses in R.\n\n12. Data visualization\n\nPython does not enable users to visualize their data as attractively as R. Programmers can use the Matplotlib library to generate basic graphs and charts. At the same time, programmers can also use the Seaborn library to draw more attractive and informative statistical graphics to visualize data.\n\nOn the other hand, R was essentially created to visualize statistical analysis results. The base graphics module enables users to create basic charts and plots, while the ggplot2 and ggplot tools allow users to plot complex scatter plots with regression lines to visualize data.\n\nSee More: DevOps Engineer: Job Description, Key Skills, and Salary in 2022\n\n5 Similarities Between R And Python\n\nThe following are the similarities between R and Python programming languages.\n\n1. They are open-source programming languages\n\nPython is created under an open source license approved by the open source initiative (OSI); this makes it freely distributable, available, and usable even for commercial purposes. Similarly, the R programming language is also known as open-source software under the provisions of the GNU\u2019s Not Unix (GNU) general public license. Open-source languages allow users to contribute to improving and optimizing features, report bugs, or even provide bug fixes to the official sites.\n\n2. They are used for data analysis\n\nPython is used for data analytics due to its simple syntax, flexibility, and scalability. It has an extensive collection of libraries used for computation and data manipulation. Python also offers libraries for graphics and data visualization. Similarly, the R programming language is used for data analytics. It enables users to identify patterns and build practical models. It is used to create and develop software applications that perform statistical analysis. It also supports analytical modeling techniques such as clustering and classical statistical tests.\n\n3. They both have a high demand in the job market\n\nAccording to a report by TIOBE, Python remains the number one most in-demand programming language. It is also one of the most in-demand tech skills, with several companies using ML and AI to run critical operations. R programming language ranks 12th in that report making it one of the top 20 programming languages. R programmers are also in demand, though at a different rate than those with Python skills. They can apply for positions such as data analysts, data architects, data scientists, or data administrators.\n\n4. They are both suitable for AI and machine learning\n\nPython is often used to support machine learning (ML) and artificial intelligence (AI), as it can be coded to process data in real-time and interact with a wide range of technologies. It also uses simple syntax, has an extensive library, and has a large community of developers. Programmers can also use R to support AI and ML. It is open-sourced and has a growing community. These programming languages facilitate AI tasks such as image and speech recognition.\n\n5. They are both platform-independent\n\nBoth Python and R programming languages are platform-independent. They perform similar functions irrespective of the platform that the programmer uses. They are compatible with platforms such as Linux systems, Windows, and macOS versions.\n\nSee More: Terraform vs. Ansible: Understanding the Key Differences\n\nTakeaway\n\nPython and R are preferred languages for developers working with data, ML, and AI, and with good reason. They are both open-source, opening up a massive learning, discussion, and innovation community. However, R has its roots in statistical analysis, making it especially suited for data science applications and visualization. Python is simpler to work with, particularly in a production environment.\n\nDid this article clearly explain the differences between Python and R? Tell us on FacebookOpens a new window , TwitterOpens a new window , and LinkedInOpens a new window . We\u2019d love to hear from you!\n\nMORE ON DEVOPS",
        "summary": "You will also learn the 12 key differences between R and Python and their five similarities.\nPros and cons of RThe R programming language has the following advantages:Through ggplot2 R, users can visualize their data with attractive graphs with notations and formulas.\nSee More: Java vs. JavaScript: 4 Key Comparisons12 Key Differences Between R And PythonThe following are the differences between R and Python programming languages.\nSee More: DevOps Engineer: Job Description, Key Skills, and Salary in 20225 Similarities Between R And PythonThe following are the similarities between R and Python programming languages.\nR programming language ranks 12th in that report making it one of the top 20 programming languages.",
        "keywords": [
            "vital",
            "programming",
            "code",
            "r",
            "python",
            "users",
            "12",
            "data",
            "used",
            "differences",
            "language",
            "analysis",
            "programmers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiW2h0dHBzOi8vd3d3LnNpbXBsaWxlYXJuLmNvbS90dXRvcmlhbHMvcHl0aG9uLXR1dG9yaWFsL2hvdy10by1hdXRvbWF0ZS1leGNlbC1zaGVldC1pbi1weXRob27SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "How to Automate an Excel Sheet in Python? All You Need to Know",
        "description": "We all know that Python is dominant everywhere, and we also know that, compared to other languages, Python is beginner-friendly and simple to learn. Automation is one of the craziest things you can do with Python. Testing is made significantly easier by Python's variety of robust libraries, usable packages, and ready-to-use methods for automation. Python allows you to automate an excel sheet and is the best option for your project.\n\nThis article uses excel data and Python libraries to automate an excel sheet in python.\n\nBasics to Advanced - Learn It All! Caltech PGP Full Stack Development Explore Program\n\nOverview\n\nThe automation process will go more smoothly when we are familiar with Python and Microsoft excel. In this article, let\u2019s talk about python and excel, where they came from, how they started, and why you should choose to use them for this project.\n\nPython Overview\n\nPython is a sophisticated, object-oriented programming language with several features that use a mediator to manage code fragments. It very well may be used to carry out a framework method essentially to all operating frameworks because it operates at the order shortly.\n\nBy clicking on this link, Python installation is a guide on installing Python and testing it on your operating system, in case you haven't already.\n\nWhy is Python preferred over alternative programming languages?\n\nYou can download and use it for free from their website because it is an open-source, free programming language.\n\nPython is an easy language to learn and understand; newcomers with minimal programming experience can do so easily.\n\nIt also supports object-oriented programming, enabling users to create understandable and reusable codes.\n\nMS Excel Overview\n\nMS Excel is a bookkeeping spreadsheet program for Windows, macOS, Android, and iOS that was developed by Microsoft in 1987. Due to its simplicity in guiding 'CRUD' actions at the outset of information has filled in popularity over the years.\n\nAdditionally, it supports a wide range of formulas for obtaining data from MS Excel files.\n\nHow to Automate an Excel Sheet in Python\n\nConsider being required to create accounts on a website for 10,000 employees. What do you think? Performing this operation manually and frequently will eventually drive you crazy. It will also take too long, which is not a good idea.\n\nTry to consider what it's like for data entry workers. They take the data from tables (like those in Excel or Google Sheets) and insert it elsewhere.\n\nThey read various magazines and websites, get the data there, and then enter it into the database. Additionally, they must perform the calculations for the entries.\n\nIn general, this job's performance determines how much money is made. Greater entry volume, more pay (of course, everyone wants a higher salary in their job).\n\nHowever, don't you find doing the same thing over and over boring?\n\nThe question is now, \"How can I accomplish it quickly?\"\n\nHow to automate my work?\n\nSpend an hour coding and automating these kinds of chores to make your life simpler rather than performing these kinds of things by hand. By just writing fewer lines of Python code, you can automate your strenuous activity.\n\nOpenpyxl\n\nA Python module called Openpyxl is used to read from or write to Excel files. For data analysis, data copying, data mining, creating charts, styling sheets, adding formulas, and other tasks, data scientists utilize Openpyxl.\n\nWorkbook: In Openpyxl, a spreadsheet is referred to as a workbook. There may be one or many sheets in a workbook.\n\nSheet: A sheet is a single page made up of cells used to arrange data.\n\nCell: A cell is a point where a row and a column converge. The usual representations are A1, A3, B8, etc.\n\nRow: A row is a horizontal line that is represented by a number (1,2, etc.).\n\nColumn: A capital letter indicates a vertical line as a column (A, B, etc.).\n\nThe Preferred Installer Program (PIP) command can be used to install Openpyxl, and installing it in a virtual environment is advised.\n\nLearn 15+ In-Demand Tools and Skills! Automation Testing Masters Program Explore Program\n\nHow to Create New Workbook\n\nIn Openpyxl, a new spreadsheet - referred to as a workbook - is created first. We use the Workbook() function to create a new workbook after importing the Openpyxl workbook module.\n\nHow to Import a Workbook\n\nWe load the file using the function load_Workbook(), which accepts the filename as an input. It is necessary to store the file in the same working directory.\n\nChanging Sheet Name\n\nAfter loading the workbook, select the current sheet and by using sheet.title, you can change the sheet name of your workbook\n\nHow to Change the Color of Sheet Name Tab\n\nUsing sheet._properties.tabColor, you can change the tab color.\n\nHow to Read Cell Value from Workbook\n\nBy using .value, you can read cell value.\n\nHow to Change Cell Value\n\nHow to Merge Cells\n\nBy using merge_cells, we can merge two cells.\n\nHow to Write in the Cells by Giving Alignments\n\nBy using the alignment function, you can give alignments accordingly.\n\nHow to Set Dimensions of Cell\n\nUsing row_dimensions and column_dimension, we can set the height and width of the cell accordingly.\n\nGet the Coding Skills You Need to Succeed Full Stack Development-MEAN Explore Program\n\nHow to Add Row and Column\n\nUsing insert_rows, insert_column, and by giving a specific position, you can add rows and columns.\n\nHow to Delete Row and Column\n\nYou can add rows and columns using delete_rows, delete_column, and by giving a specific position.\n\nHow to Set Font Style\n\nHow to Color Cell\n\nUsing PatternFill, we can fill the color on cells.\n\nCreate and Showcase Your Portfolio from Scratch! Caltech PGP Full Stack Development Explore Program\n\nUsing \u2018time,\u2019 you can import the current time to excel and use time.sleep, you can set seconds after you want to print next time.\n\nHow You Can Insert Arrays Value\n\nUsing for loop for reading and Write for writing data, you can insert arrays values in your workbook.\n\nHow to Read a Particular Column\n\nHow to Import Image in Workbook\n\nHow to Perform Addition, Average, Product and Count in Excel Using Python\n\nBy using '=SUM(B1:B9)' '=AVERAGE(B1:B9)' '=PRODUCT(B1:B9)' '=COUNT(B1:B9)' we can perform operations.\n\nBecome a Skilled Web Developer in Just 9 Months! Caltech PGP Full Stack Development Explore Program\n\nHow to Make Charts in Workbook Using Python\n\nConclusion\n\nOverall, this article explains how to automate excel files in Python in a straightforward and easy-to-follow manner. Python Excel automation is a unique technique that enables you to easily create visual reports on Python, just like you would on excel. Python Excel automation can be used by businesses to streamline operations to their needs.\n\nIf you want to further enhance your skills, you can check Simplilearn\u2019s Python development training course. This course will help you hone the essential skills and make you job-ready.\n\nIf you are looking to enhance your software development skills further, we recommend you check Simplilearn's Post Graduate Program in Full Stack Web Development. This course can help you hone the right skills and make you job-ready.\n\nDo you have any questions for us? Please mention it in the comment section of the \"How to Automate an Excel Sheet in Python - All You Need to Know\" article, and we'll have our experts answer it for you.",
        "summary": "Python allows you to automate an excel sheet and is the best option for your project.\nThis article uses excel data and Python libraries to automate an excel sheet in python.\nHow to Automate an Excel Sheet in PythonConsider being required to create accounts on a website for 10,000 employees.\nPython Excel automation is a unique technique that enables you to easily create visual reports on Python, just like you would on excel.\nPlease mention it in the comment section of the \"How to Automate an Excel Sheet in Python - All You Need to Know\" article, and we'll have our experts answer it for you.",
        "keywords": [
            "workbook",
            "need",
            "development",
            "python",
            "know",
            "excel",
            "sheet",
            "skills",
            "data",
            "automate",
            "using",
            "automation"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiW2h0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjg1NjcyL2phdmFzY3JpcHQtamF2YS1hbmQtcHl0aG9uLXNraWxscy10b3AtZGVtYW5kLmh0bWzSAV9odHRwczovL3d3dy5pbmZvd29ybGQuY29tL2FydGljbGUvMzY4NTY3Mi9qYXZhc2NyaXB0LWphdmEtYW5kLXB5dGhvbi1za2lsbHMtdG9wLWRlbWFuZC5hbXAuaHRtbA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "JavaScript, Java, and Python skills top demand",
        "description": "JavaScript, Java, and Python skills are most in-demand by recruiters, according to a report published this week by tech hiring platforms CodinGame and CoderPad. But while the supply of those skills exceeds demand, the demand for TypeScript, Swift, Scala, Kotlin, and Go skills all exceed supply.\n\nThe State of Tech Hiring in 2023, a CodinGame-CoderPad report published January 10, draws on a survey of 14,000 professionals and offers insights into what 2023 may hold for tech industry recruiters and job seekers. The demand for JavaScript, Java, and Python skills is consistent with previous years, the report notes.\n\nAmong development frameworks, Node.js, React, and .NET Core proved to be the best-known and most in-demand. The survey found that Angular demand exceeds supply, while its popularity among developers has declined. Angular\u2019s declining popularity among developers was a finding of the just-released State of JavaScript 2022 report as well.\n\nAlso noted in the State of Tech Hiring 2023 report:",
        "summary": "JavaScript, Java, and Python skills are most in-demand by recruiters, according to a report published this week by tech hiring platforms CodinGame and CoderPad.\nBut while the supply of those skills exceeds demand, the demand for TypeScript, Swift, Scala, Kotlin, and Go skills all exceed supply.\nThe demand for JavaScript, Java, and Python skills is consistent with previous years, the report notes.\nAngular\u2019s declining popularity among developers was a finding of the just-released State of JavaScript 2022 report as well.\nAlso noted in the State of Tech Hiring 2023 report:",
        "keywords": [
            "java",
            "python",
            "supply",
            "skills",
            "demand",
            "report",
            "state",
            "tech",
            "2023",
            "survey",
            "hiring",
            "javascript"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiS2h0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMS9jaGF0Z3B0LXB5dGhvbi1wcm9ncmFtbWluZy1hc3Npc3RhbnQuaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "ChatGPT as a Python Programming Assistant",
        "description": "Is ChatGPT useful for Python programmers, specifically those of us who use Python for data processing, data cleaning, and building machine learning models? Let's give it a try and find out.\n\n\n\nOriginal image by Sigmund on Unsplash | Edits by author\n\nChatGPT from OpenAI is... you already know. You've read enough about it, and introductions are no longer needed. If you happen to not know what ChatGPT is, have a look at this first, and then come on back to continue.\n\nConversations with ChatGPT can be entertaining, even enlightening. But let's have a look at how helpful it can actually be.\n\nLet's see what ChatGPT can do when it comes to writing some code from specifications that we provide. We will start simple and build from there.\n\nSimple Data Processing Script\n\n\n\nI figured that a good place to start was a data processing script of some sort. Since I intend to have ChatGPT write some machine learning scripts afterwards using a variety of Python libraries, this seemed like a reasonable place to start.\n\nThe Goal\n\n\n\nFirst, I wanted to make some attempts at loading a dataset; ensuring all dataset values are numeric values, or converting them to be such; checking for missing values; and splitting the dataset into train and test sets.\n\nThe Prompt\n\n\n\nWrite a Python script that does the following:\n\n- loads a dataset from csv on disk to Pandas DataFrame\n\n- ensures that dataset is entirely numeric; converts string values to numeric and tracks this conversion in a dictionary to reference later\n\n- checks for missing values in the DataFrame and imputes missing values for any record that has one missing value; entirely drops a record that has more than one missing value\n\n- splits the dataset into test and training sets\n\nThe Response\n\nimport pandas as pd # Load dataset from csv to DataFrame df = pd.read_csv('dataset.csv') # Initialize dictionary to track string to numeric conversions conversions = {} # Convert string values to numeric and track conversions in dictionary for col in df.columns: if df[col].dtype == object: conversions[col] = {val: i for i, val in enumerate(df[col].unique())} df[col] = df[col].map(conversions[col]) # Check for missing values missing_values = df.isna().sum() # Impute missing values for records with one missing value for col in missing_values[missing_values == 1].index: df[col].fillna(df[col].median(), inplace=True) # Drop records with more than one missing value df.dropna(thresh=len(df.columns) - 1, inplace=True) # Split dataset into test and training sets from sklearn.model_selection import train_test_split train_df, test_df = train_test_split(df, test_size=0.2)\n\nNote: the script loads the dataset from csv file name \"dataset.csv\" and splits the dataframe into test and training sets with 80/20 ratio. If you want to use different file name or ratio, change the path/ratio accordingly.\n\nThe Analysis\n\n\n\nChatGPT produced a useful script. It decided on a dataset name, as well as a train/test split percentage, and noted both of these points and how to change them if desired. Overall, mission accomplished.\n\nRefactoring Our Code\n\nThe Goal\n\n\n\nNow that we have a script that does something, let's refactor it a little. A cornerstone of good coding is the use of functions to logically organize you code, facilitate reuse, and ensure you don't repeat yourself.\n\nThe Prompt\n\n\n\nRewrite the above script to use a series of functions that make sense\n\nThe Response\n\nimport pandas as pd from sklearn.model_selection import train_test_split def load_and_convert_data(file_path): # Load dataset from csv to DataFrame df = pd.read_csv(file_path) # Initialize dictionary to track string to numeric conversions conversions = {} # Convert string values to numeric and track conversions in dictionary for col in df.columns: if df[col].dtype == object: conversions[col] = {val: i for i, val in enumerate(df[col].unique())} df[col] = df[col].map(conversions[col]) return df, conversions def handle_missing_values(df): # Check for missing values missing_values = df.isna().sum() # Impute missing values for records with one missing value for col in missing_values[missing_values == 1].index: df[col].fillna(df[col].median(), inplace=True) # Drop records with more than one missing value df.dropna(thresh=len(df.columns) - 1, inplace=True) return df def split_data(df, test_size): return train_test_split(df, test_size=test_size) # Use the functions file_path = \"dataset.csv\" df, conversions = load_and_convert_data(file_path) df = handle_missing_values(df) train_df, test_df = split_data(df, 0.2)\n\nHere, I have used three functions:\n\n1. load_and_convert_data(file_path) loads the csv dataset and convert the string values to numeric.\n\n2. handle_missing_values(df) handles the missing values in the dataset.\n\n3. split_data(df, test_size) splits the dataset into test and training sets.\n\nThe main script uses these functions in order to load, convert and clean the dataset, then split it into test and train sets.\n\nThe path of the dataset and the test ratio are inputs for these functions.\n\nThe Analysis\n\n\n\nIf you look at the first script output by ChatGPT, you can probably see some rather obvious lines you would draw as far as what functionality would be separated into functions. I certainly did. ChatGPT did exactly what I expected it to do, in this regard. Again, a competent script has been generated.\n\nExtending Our Code\n\nThe Goal\n\n\n\nOK, our script looks a little better now that it's using some functions for organization. Next, let's extend the script slightly in order to make it so that the user can specify a few parameters while running the script.\n\nThe Prompt\n\n\n\nRewrite the above program to solicit the following from the command line in the form of arguments, and use them in the program:\n\n- the path/name of the dataset csv file\n\n- the train/test split size\n\n- the threshold for the number of missing values per record to drop after which to drop entire record, instead of imputing the missing values\n\nThe Response\n\nimport pandas as pd import argparse from sklearn.model_selection import train_test_split def load_and_convert_data(file_path): # Load dataset from csv to DataFrame df = pd.read_csv(file_path) # Initialize dictionary to track string to numeric conversions conversions = {} # Convert string values to numeric and track conversions in dictionary for col in df.columns: if df[col].dtype == object: conversions[col] = {val: i for i, val in enumerate(df[col].unique())} df[col] = df[col].map(conversions[col]) return df, conversions def handle_missing_values(df, threshold): # Check for missing values missing_values = df.isna().sum() # Impute missing values for records with one missing value for col in missing_values[missing_values == 1].index: df[col].fillna(df[col].median(), inplace=True) # Drop records with more than threshold missing value df.dropna(thresh=len(df.columns) - threshold, inplace=True) return df def split_data(df, test_size): return train_test_split(df, test_size=test_size) if __name__ == '__main__': parser = argparse.ArgumentParser() parser.add_argument(\"file_path\", help=\"path/name of the dataset csv file\") parser.add_argument(\"test_size\", help=\"train/test split size\", type=float) parser.add_argument(\"threshold\", help=\"threshold for the number of missing values per record\", type=int) args = parser.parse_args() # Use the functions df, conversions = load_and_convert_data(args.file_path) df = handle_missing_values(df, args.threshold) train_df, test_df = split_data(df, args.test_size)\n\nIn this version, I have used the argparse module to take the inputs of file path, test/train split size, and threshold for the number of missing values per record as command-line arguments. The user will have to run the script with the correct arguments, for example:\n\n\n\npython script.py dataset.csv 0.2 1\n\n\n\nThis will run the script using the \"dataset.csv\" file, a test_size of 0.2 and a threshold of 1 for the missing values.\n\nThe main script uses these arguments in the functions to load, convert and clean the dataset, then split it into test and train sets.\n\nIt's also worth mentioning that, when running script, the script should be run from command line, rather than running it from an IDE.\n\nThe Analysis\n\n\n\nHonestly, not much analysis is needed here, given that ChatGPT explained what it did quite well. I'll actually note something here that I had previously not, and give ChatGPT a pat on the back for its commenting, which is expressive and concise.\n\nConverting Our Code to a Streamlit App\n\nThe Goal\n\n\n\nNow let's say we wanted to make this code \"production\" ready (humor me). Let's get ChatGPT to wrap these functions in a Streamlit app.\n\nThe Prompt\n\n\n\nRewrite the above program as a Streamlit app, allowing for the user to provide the same arguments as in the command line args above\n\nThe Response\n\nimport pandas as pd import streamlit as st from sklearn.model_selection import train_test_split def load_and_convert_data(file_path): # Load dataset from csv to DataFrame df = pd.read_csv(file_path) # Initialize dictionary to track string to numeric conversions conversions = {} # Convert string values to numeric and track conversions in dictionary for col in df.columns: if df[col].dtype == object: conversions[col] = {val: i for i, val in enumerate(df[col].unique())} df[col] = df[col].map(conversions[col]) return df, conversions def handle_missing_values(df, threshold): # Check for missing values missing_values = df.isna().sum() # Impute missing values for records with one missing value for col in missing_values[missing_values == 1].index: df[col].fillna(df[col].median(), inplace=True) # Drop records with more than threshold missing value df.dropna(thresh=len(df.columns) - threshold, inplace=True) return df def split_data(df, test_size): return train_test_split(df, test_size=test_size) def main(): st.set_page_config(page_title=\"Data Preprocessing\", page_icon=\":guardsman:\", layout=\"wide\") st.title(\"Data Preprocessing\") file_path = st.text_input(\"Enter the path/name of the dataset csv file: \") test_size = st.number_input(\"Enter the train/test split size (decimal between 0 and 1): \", step=0.01, value=0.2) threshold = st.number_input(\"Enter the threshold for the number of missing values per record: \", step=1, value=1) if st.button(\"Process Data\"): df, conversions = load_and_convert_data(file_path) df = handle_missing_values(df, threshold) train_df, test_df = split_data(df, test_size) st.success(\"Data preprocessing completed!\") if __name__ == '__main__': main()\n\nThis version is a Streamlit app that allows the user to provide the same arguments as command-line arguments. It uses the Streamlit library to create an interactive web app that allows the user to input the file path, test/train split size, and threshold for the number of missing values per record. The user can then click the \"Process Data\" button to run the script and preprocess the data. It uses the same functions as the previous version of the script to load, convert, and clean the dataset, then split it into test and train sets.\n\nTo run the script, you need to have Streamlit installed, you can run the command pip install streamlit in your terminal. Once installed, run the script with the command streamlit run script.py .\n\nThe Analysis\n\n\n\nIt did what it was supposed to do. ChatGPT took our functioning... functions and built a simple Streamlit web app with them.\n\n\n\n\n\n\n\nThe Streamlit web app created with the script generated by ChatGPT\n\nSummary\n\n\n\nChatGPT did a perfectly competent job of creating, refactoring, extending, and adding a wrapper around a simple data preprocessing Python script we wanted it to write for us, from the specifications that we provided. While it wasn't the most complex of programs by a long shot, it was a step in the direction of having ChatGPT be genuinely useful by acting as a programming assistant. The results hit the mark at each step.\n\nNext time, we will build a less trivial program with some increased complexity and additional requirements. I'm excited to see how well ChatGPT performs under pressure. Hopefully you are too.\n\n\n\n\n\nMatthew Mayo (@mattmayo13) is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data Science and Machine Learning resource. His interests lie in natural language processing, algorithm design and optimization, unsupervised learning, neural networks, and automated approaches to machine learning. Matthew holds a Master's degree in computer science and a graduate diploma in data mining. He can be reached at editor1 at kdnuggets[dot]com.\n\n",
        "summary": "Is ChatGPT useful for Python programmers, specifically those of us who use Python for data processing, data cleaning, and building machine learning models?\nLet's see what ChatGPT can do when it comes to writing some code from specifications that we provide.\nSince I intend to have ChatGPT write some machine learning scripts afterwards using a variety of Python libraries, this seemed like a reasonable place to start.\nThe GoalFirst, I wanted to make some attempts at loading a dataset; ensuring all dataset values are numeric values, or converting them to be such; checking for missing values; and splitting the dataset into train and test sets.\nWhile it wasn't the most complex of programs by a long shot, it was a step in the direction of having ChatGPT be genuinely useful by acting as a programming assistant.",
        "keywords": [
            "conversions",
            "assistant",
            "programming",
            "numeric",
            "values",
            "script",
            "df",
            "missing",
            "chatgpt",
            "python",
            "dataset",
            "streamlit",
            "threshold"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiYGh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMy8wMS9leHBsYWluYWJsZS1haS0xMC1weXRob24tbGlicmFyaWVzLWRlbXlzdGlmeWluZy1kZWNpc2lvbnMuaHRtbNIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Explainable AI: 10 Python Libraries for Demystifying Your Model\u2019s Decisions",
        "description": "By, AI and Data Science Lead on January 16, 2023 in Machine Learning\n\nBecome familiar with some of the most popular Python libraries available for AI explainability.\n\n\n\nImage by Author\n\nXAI is artificial intelligence that allows humans to understand the results and decision-making processes of the model or system.\n\nThe 3 Stages of Explanation\n\nPre-modeling Explainability\n\nExplainable AI starts with explainable data and clear, interpretable feature engineering.\n\nModeling Explainability\n\n\n\nWhen choosing a model for a particular problem, it is generally best to use the most interpretable model that still achieves good predictive results.\n\nPost-model Explainability\n\n\n\nThis includes techniques such as perturbation, where the effect of changing a single variable on the model's output is analyzed such as SHAP values for after training.\n\nPython Libraries for AI Explainability\n\n\n\nI found these 10 Python libraries for AI explainability:\n\nSHAP (SHapley Additive exPlanations)\n\n\n\nSHAP is a model agnostic and works by breaking down the contribution of each feature and attributing a score to each feature.\n\nLIME (Local Interpretable Model-agnostic Explanations)\n\n\n\nLIME is another model agnostic method that works by approximating the behavior of the model locally around a specific prediction.\n\nELi5\n\n\n\nEli5 is a library for debugging and explaining classifiers. It provides feature importance scores, as well as \"reason codes\" for scikit-learn, Keras, xgboost, LightGBM, CatBoost.\n\nShapash\n\n\n\nShapash is a Python library which aims to make machine learning interpretable and understandable to everyone. Shapash provides several types of visualization with explicit labels.\n\nAnchors\n\n\n\nAnchors is a method for generating human-interpretable rules that can be used to explain the predictions of a machine learning model.\n\nXAI (eXplainable AI)\n\n\n\nXAI is a library for explaining and visualizing the predictions of machine learning models including feature importance scores.\n\nBreakDown\n\n\n\nBreakDown is a tool that can be used to explain the predictions of linear models. It works by decomposing the model's output into the contribution of each input feature.\n\ninterpret-text\n\n\n\ninterpret-text is a library for explaining the predictions of natural language processing models.\n\niml (Interpretable Machine Learning)\n\n\n\niml currently contains the interface and IO code from the Shap project, and it will potentially also do the same for the Lime project.\n\naix360 (AI Explainability 360)\n\n\n\naix360 includes a comprehensive set of algorithms that cover different dimensions\n\nOmniXAI\n\n\n\nOmniXAI (short for Omni eXplainable AI), addresses several problems with interpreting judgments produced by machine learning models in practice.\n\n\n\nHave I forgotten any libraries?\n\n\n\nSources\n\n\n\nMaryam Miradi is an AI and Data Science Lead with a PhD in Machine Learning and Deep learning, specialised in NLP and Computer Vision. She has 15+ years of experience creating successful AI solutions with a track record of delivering over 40 successful projects. She has worked for 12 different organisations in a variety of industries, including Detecting Financial Crime, Energy, Banking, Retail, E-commerce, and Government.\n\n\n\n",
        "summary": "The 3 Stages of ExplanationPre-modeling ExplainabilityExplainable AI starts with explainable data and clear, interpretable feature engineering.\nModeling ExplainabilityWhen choosing a model for a particular problem, it is generally best to use the most interpretable model that still achieves good predictive results.\nShapashShapash is a Python library which aims to make machine learning interpretable and understandable to everyone.\nXAI (eXplainable AI)XAI is a library for explaining and visualizing the predictions of machine learning models including feature importance scores.\naix360 (AI Explainability 360)aix360 includes a comprehensive set of algorithms that cover different dimensionsOmniXAIOmniXAI (short for Omni eXplainable AI), addresses several problems with interpreting judgments produced by machine learning models in practice.",
        "keywords": [
            "predictions",
            "models",
            "learning",
            "feature",
            "python",
            "libraries",
            "decisions",
            "ai",
            "interpretable",
            "model",
            "demystifying",
            "library",
            "machine",
            "explainable",
            "works"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiTGh0dHBzOi8vbWVkaXVtLmRhdGFkcml2ZW5pbnZlc3Rvci5jb20vYW4taW50cm9kdWN0aW9uLXRvLXB5dGhvbi1mNDVlM2JjYWI1N2XSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "An Introduction to Python",
        "description": "An Introduction to Python\n\nThe Popular, Versatile Programming Language\n\nImage by Chen from Pixabay\n\nPython is a popular, versatile programming language that is widely used in a variety of industries, from web development and data analysis to scientific computing and artificial intelligence. It is known for its simplicity, readability, and flexibility, making it a great choice for beginners as well as experienced programmers.\n\nIn this article, we will give a brief overview of Python and its history, and introduce some of its key features and benefits. We will also provide some examples of common tasks that can be accomplished with Python and give tips on getting started with learning the language.\n\nHistory of Python\n\nPython was created in the late 1980s by Guido van Rossum, a Dutch programmer. Van Rossum was inspired by the programming language ABC, which was designed to be easy to read and write and set out to create a similar language that would be more powerful and flexible. He named the language after the British comedy group Monty Python, and the first version of Python was released in 1991.\n\nSince its inception, Python has become one of the most popular programming languages in the world. It is used by companies such as Google, Netflix, and NASA, as well as many open-source projects and individual developers. Python has a large and active community of users and developers who contribute to the language and its ecosystem of libraries and tools.\n\nFeatures of Python\n\nOne of the reasons Python is so popular is its simplicity and readability. Python uses indentation to indicate blocks of code, rather than curly braces or keywords like if and while , which makes it easier to read and understand. It also has a large standard library that includes many valuable modules for tasks such as connecting to web servers, reading and writing files, and working with data.\n\nPython is also a dynamically-typed language, meaning variables do not have a fixed type and can change as the program runs. This makes it easier to write code quickly but can also make it more prone to errors if not used carefully.\n\nPython is known for its flexibility and versatility. It can be used for a wide range of tasks, including web development, data analysis, scientific computing, and artificial intelligence. It has a rich ecosystem of libraries and tools that make it easy to work with different types of data and perform various types of analysis.\n\nGetting Started with Python\n\nIf you are new to Python and want to get started learning the language, here are a few steps you can take:\n\nInstall Python on your computer: Python is available for Windows, Mac, and Linux, and you can download it for free from the official Python website https://www.python.org/. Explore the Python documentation and tutorials: Python documentation https://docs.python.org/ is a great resource for learning about the language and its features. It includes a tutorial, a library reference, and a language reference. You can also find many tutorials and guides online that can help you get started with Python. Write some simple programs to practice using Python: Start with simple tasks such as printing text to the console, declaring variables, and using loops and conditional statements. As you become more comfortable with the language, you can move on to more complex projects. Join the Python community: There are many online forums, groups, and communities where you can ask questions, get help, and share your experiences with other Python users. Some popular resources include the Python subreddit https://www.reddit.com/r/Python/, the Python mailing list https://mail.python.org/mailman/listinfo/python-list, and the Python Stack Overflow https://stackoverflow.com/questions/tagged/python. Find a project or problem to solve: One of the best ways to learn Python is to find a project or problem that you are interested in solving and use Python to build a solution. This can help you learn the language in a practical and meaningful way.\n\nSome popular examples of python\n\nExample 1: Printing a message\n\n# This program prints Hello, world!\n\n\n\nprint('Hello, world!')\n\nOutput\n\nHello, world!\n\nExample 2: Storing and manipulating variables\n\n# Store a number in a variable\n\nnum = 5\n\n\n\n# Store a string in a variable\n\nmessage = \"Hello, world!\"\n\n# Perform arithmetic operations with variables\n\nresult = num + 10\n\n# Print the result\n\nprint(result)\n\n# Concatenate (join) two strings together\n\ngreeting = \"Hello, \" + \"world!\"\n\nprint(greeting)\n\nExample 3: Using a loop to repeat a block of code\n\n# Print the numbers from 1 to 5\n\nfor i in range(1, 6):\n\nprint(i)\n\n\n\n# Print \"Hello, world!\" 5 times\n\nfor i in range(5):\n\nprint(\"Hello, world!\")\n\nI hope these examples give you a good starting point for learning Python!\n\nExamples of common tasks that can be accomplished with Python\n\nWeb development: Python has several libraries and frameworks for web development, such as Django and Flask, which make it easy to build and deploy web applications. Data analysis: Python has several libraries and tools for working with data, such as NumPy and Pandas, which provide fast and efficient methods for manipulating and analyzing data. Scientific computing: Python has several libraries and tools for scientific computing, such as SciPy and NumPy, which provide functions and algorithms for tasks such as numerical integration and optimization. Artificial intelligence: Python has several libraries and tools for artificial intelligence and machine learning, such as TensorFlow and sci-kit-learn, which provide functions and algorithms for tasks such as training and evaluating machine learning models. Game development: Python has several libraries and tools for game development, such as Pygame, which provide functions and algorithms for tasks such as creating game graphics and handling user input. Desktop application development: Python has several libraries and tools for building desktop applications, such as PyQt and wxPython, which provide functions and widgets for creating user interfaces and handling user input.\n\nThese are just a few examples of the many tasks that can be accomplished with Python. The language is very flexible and can be used for a wide range of applications.\n\nIn conclusion\n\nIf you are interested in learning Python, there are many resources available to help you get started, including the official Python documentation, online tutorials and guides, and community forums and groups. By installing Python on your computer, exploring the documentation and tutorials, writing simple programs to practice with the language, and finding a project or problem to solve, you can quickly become proficient in Python and start building your applications and solutions.",
        "summary": "He named the language after the British comedy group Monty Python, and the first version of Python was released in 1991.\nGetting Started with PythonIf you are new to Python and want to get started learning the language, here are a few steps you can take:Install Python on your computer: Python is available for Windows, Mac, and Linux, and you can download it for free from the official Python website https://www.python.org/.\nExplore the Python documentation and tutorials: Python documentation https://docs.python.org/ is a great resource for learning about the language and its features.\nSome popular resources include the Python subreddit https://www.reddit.com/r/Python/, the Python mailing list https://mail.python.org/mailman/listinfo/python-list, and the Python Stack Overflow https://stackoverflow.com/questions/tagged/python.\nIn conclusionIf you are interested in learning Python, there are many resources available to help you get started, including the official Python documentation, online tutorials and guides, and community forums and groups.",
        "keywords": [
            "tools",
            "tasks",
            "introduction",
            "learning",
            "development",
            "python",
            "libraries",
            "popular",
            "provide",
            "data",
            "language"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiRmh0dHBzOi8vdGhlbmV3c3RhY2suaW8vd2ViYXNzZW1ibHktd2hlbi15b3UtaGF0ZS1ydXN0LWJ1dC1sb3ZlLXB5dGhvbi_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "WebAssembly: When You Hate Rust but Love Python",
        "description": "One of the main attributes of WebAssembly is how it can accommodate a number of different languages that are deployed \u2014 in theory at least \u2014 wherever there is a CPU device that can run instruction sets. The languages Wasm can run include, in addition to JavaScript, Rust, Go, .NET, C++, Java, PHP \u2014 and Python (a lot more about Python below).\n\nAs an early web browser application, Wasm has been, and continues to be, heavily entwined with JavaScript. More recently, Rust has entered the fray, and its integration with JavaScript and even when running alone without JavaScript for WebAssembly applications is showing a lot of promise.\n\nBut let\u2019s look at the developers. Many developers struggle with Rust, for example. It\u2019s considered just downright hard for many, if not most people who are learning it from scratch, even those who might be reasonably familiar with C++ with which it shares a lot of attributes. There are legions and legions of JavaScript programmers out there who are heavily involved in applications for web applications and mobile applications, of course, and this is all great for those folks, but where does it lead the rest of us?\n\nPython, in particular, is one of the most popular programming languages and as we know is very well-targeted for machine learning, edge cases (like JavaScript in many cases) and other applications. A lot of people just like it (this writer included) because it is comparatively easy to learn and very clean. Theoretically, WebAssembly can accommodate Python along with the other languages, but its actual use with Wasm has remained limited. But this is changing. The good news is that using WebAssembly for Python is beginning to emerge.\n\nFermyon Technologies CEO and co-founder Matt Butcher agreed, but said he would \u201cgo one further.\u201d Indeed, for WebAssembly to become more than a niche technology, it absolutely must gain support from most (if not all) of the top tier languages,\u201d Butcher told The New Stack. \u201cAnd that includes scripting languages like Python.\u201d\n\nIronically, for Fermyon, which was created one year ago this February, one of the startup\u2019s mantras was that wide language support was essential to Wasm\u2019s successes. \u201cFrom web development to machine learning, Python is a vital language,\u201d Butcher said. \u201cI have a hard time imagining WebAssembly reaching its full potential without first-class Python support.\u201d\n\nIndeed, Python will eventually show its merit running in Wasm for a number of applications where it shines much more than JavaScript and/or Rust. Machine learning and big data processing are good examples. Developers of these applications have \u201clong treated Python \u2018as their lingua franca,\u2019 Butcher noted. \u201cWebAssembly has a lot to offer those ecosystems \u2014 especially on the security and portability front,\u201d Butcher said. \u201cBut that potential can only be realized with top-notch Python support.\u201d\n\nPython has also long been a language of choice for web application backends. \u201cWith a rich set of packages and technologies, Python has a lot to bring to the table in this domain as well,\u201d Butcher said.\n\nBig up on Data Science\n\nMany data science developers are looking forward to the day when they easily take advantage of Wasm to more seamlessly deploy their Python code in a way that does not have to be recompiled for different edge and other environments, thus also lending support for distributed deployments. Since data science, and specifically, deep learning use cases, have already contributed tremendously to Python\u2019s popularity, the ability to run inference models at the edge on Wasm could drastically streamline and simplify the deployment, operations, upgrades and scalability of these models, Torsten Volk, an analyst for Enterprise Management Associates (EMA), told The New Stack.\n\nBeing able to train machine learning models on Wasm would thus enable data scientists to benefit from Wasm\u2019s ability to \u201cscale down to zero\u201d for minimizing cost and to almost instantly scale up to any number of nodes, on-demand, Volk said. \u201cThis could enable organizations to use expensive GPUs that accelerate the training of deep learning models in a much more efficient manner, as individual workloads could \u2018take shifts\u2019 using this hardware,\u201d Volk said. \u201cWhat I would love to see is a Wasm SDK for Python that allows me to easily install any Python library so that developers and data scientists can get disposable and easily movable environments set up very quickly,\u201d Volk said.\n\nIf Wasm could help make instant Python runtimes available without hassle to the developer and overhead cost and security headaches for the hoster, this would dramatically lower the barriers of entry for many citizen developers and data scientists who often remain intimidated by having to create their own development environments, Volk said. Moreover, \u201cCombined with the ability to then run the resulting code on any machine that supports Wasm, this could significantly accelerate experimentation and convince even more professionals to adopt Python,\u201d Volk said.\n\nWork on\n\nAgain, Python\u2019s momentum is building. But Wasm support is not completely ready yet. \u201cPython is one of the most popular programming languages in the world, and its WebAssembly implementation seems to be coming along quickly,\u201d Butcher recently wrote in a blog post. \u201cWhile it is not yet ready for use, we anticipate it will be functional in the first half of 2022.\u201d\n\nBut work needs to be done. While Python is a relatively easy sell given its popularity (after all, the Rust developer community is small compared with other languages, as Sehyo Chang, CTO at InfinyOn, which uses Wasm for event streaming and processing to lower latency, noted) and is becoming the dominant language for data science and machine learning \u2014 success is not a given. \u201cWe are also focused on supporting Python as a first-class language, especially with regard to WebAssembly,\u201d Chang said. \u201cHowever, there are significant challenges in supporting Python in WebAssembly, and it will take some time to solve them.\u201d\n\nWith CPython \u2014 the Python reference interpreter \u2014 Emscripten \u2014 and WASI-based implementations will soon become a reality. Since CPython is the most popular Python runtime environment, it logically follows that enabling it to run in WASI will spur adoption of WASI in general, Chang said.\n\nWhile WebAssembly is becoming a general-purpose technology and \u201cwill always have a place in the browser,\u201d Esmcripten support is important for browser capabilities. At the same time, WASI is necessary for applications beyond the browser, Butcher said. \u201cThe CPython team wisely chose to introduce support for both, giving developers in both camps access to one of the world\u2019s most popular programming languages,\u201d Butcher said.\n\nPython Bandwagon\n\nA number of organizations, both startups and established players, are understandably adding or are looking to add Wasm support.\n\nVMware recently added Python support for Wasm Language Runtimes. In its documentation, its Wasm Language Runtimes offers popular language runtimes such as Ruby and others as well as Python that are precompiled to WebAssembly that are tested for compatibility and kept up to date when new versions of upstream languages are released, according to the project\u2019s documentation.\n\nIt provides a build of Python for the wasm32-wasi target. Based on the WASI support that is already available in CPython (the mainstream, C-based implementation of Python), additional libraries and usage examples to make it as easy to use as possible augment the runtimes, VMware\u2019s Asen Alexandrov, a staff engineer, wrote in a blog post.\n\nInfinyOn is working on supporting Python as \u201ca first-class citizen in our SmartModule technology,\u201d Chang said. This will certainly spur further development in supporting Python in WebAssembly environments, he said.\n\nFermyon will soon release a Python SDK for Spin. This Python SDK is \u201centirely made possible by the CPython team\u2019s work.\u201d In fact, \u201ca Wasm Python SDK is one of our most frequently requested features,\u201d Butcher said.\n\nStay tuned for more coverage about how these and other Python alternatives for Wasm work and how developers can make use of them. To wit, Fermyon offers a tutorial with command-line instructions to show how Python can be used to create a module for WAGI, which should soon serve as the basis for a tutorial from The New Stack.\n\nStay tuned.",
        "summary": "The languages Wasm can run include, in addition to JavaScript, Rust, Go, .NET, C++, Java, PHP \u2014 and Python (a lot more about Python below).\n\u201cFrom web development to machine learning, Python is a vital language,\u201d Butcher said.\nPython BandwagonA number of organizations, both startups and established players, are understandably adding or are looking to add Wasm support.\nVMware recently added Python support for Wasm Language Runtimes.\nThis Python SDK is \u201centirely made possible by the CPython team\u2019s work.\u201d In fact, \u201ca Wasm Python SDK is one of our most frequently requested features,\u201d Butcher said.",
        "keywords": [
            "learning",
            "python",
            "hate",
            "language",
            "languages",
            "data",
            "wasm",
            "love",
            "rust",
            "butcher",
            "support",
            "webassembly",
            "developers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMikAFodHRwczovL3d3dy5zY21hZ2F6aW5lLmNvbS9hbmFseXNpcy90aGlyZC1wYXJ0eS1yaXNrL3NpZ3N0b3JlLWFubm91bmNlcy10aGUtZmlyc3Qtc3RhYmxlLXJlbGVhc2Utb2YtY29kZS1hbmQtY2VydGlmaWNhdGUtc2lnbmluZy10b29sLWZvci1weXRob27SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Sigstore announces the first stable release of code and certificate signing tool for Python",
        "description": "Sigstore community today announced the first stable release of sigstore-python, improving software supply chain security and paving the way for other client implementations of Sigstore that are in earlier stages.\n\nSigstore is an open source project launched by Linux Foundation with the goal of providing free and stable services for all developers to easily sign, verify and protect their software projects. While code signing is a valuable tool to prevent hackers from co-opting patching systems and delivering malware, it is difficult to implement in open source projects given the complexity of key management.\n\nThe sigstore-python, as part of the project and funded by Google's Open Source Security Team, aims to provide a Sigstore-compatible client like cosign but built entirely with Python and easily adoptable by the Python ecosystem.\n\n\"Today's release of sigstore-python is an important milestone for the sigstore and Python communities,\" Bob Callaway, co-founder of the sigstore project and technical lead and manager of Google's Open Source Security Team, told SC Media. \"The release of a stable, Python-native implementation of Sigstore's signing and verification workflows enables Python developers and package maintainers to improve the security of the Python software supply chain without the overhead of managing private keys.\"\n\nSigstore-python is just one of many Sigstore clients being developed, including for programming languages like Ruby, Java, Rust, Go, and JavaScript. While Sigstore-python is not the oldest implementation, it aims to be one of the most authoritative in terms of \"succinctly and correctly implementing the intricacies of Sigstore's security model,\" which could set a critical technical foundation for other client implementations, said William Woodruff, one of the major contributors to sigstore-python and senior security engineer at Trail of Bits.\n\n\"Sigstore-python is meant to be a 'reference' implementation of a Sigstore client, which means that it will be a key technical reference for other client implementations of Sigstore that are in earlier development phases (like the Rust implementation),\" Woodruff told SC Media. \"I feel like I can confidently say that the codebase as a whole is really meant to be read and consumed by others in the Sigstore community and that maintaining the level of reference-ability is one of our key long-term goals as we continue to add features.\"\n\nOne of the two most distinguishable features of sigstore-python is the design of a public Python API and command-line interface (CLI) that avoids the misuse of cryptographic tools, which speaks to two primitives in project development: signing and verifying.\n\nAs for the next step, Woodruff said that his team have been working with other members of the Sigstore community to standardize the bundle format for signing materials and hopes to include support for signing and verifying with bundles soon.\n\nIn addition, his team will work to further integrate the Sigstore into the Python Package Index, a popular open source software repository used by developers, as well as stabilize its associated GitHub Action.\n\n\"GitHub is proud to collaborate with the open source community on Sigstore specifications, implementation, and helping run the public servers to see this capability come to life on PyPI, npm, and other package managers,\" Trevor Rosen, member of the Sigstor technical steering committee and staff engineering manager at GitHub, told SC Media.\n\n\"[Sigstore] is eager to continue working with the Python community on integrating sigstore-python into Python's packaging tools and infrastructure so that Python developers can reap the benefits of modern, transparent, digital signatures,\" Callaway added.",
        "summary": "Sigstore community today announced the first stable release of sigstore-python, improving software supply chain security and paving the way for other client implementations of Sigstore that are in earlier stages.\nSigstore is an open source project launched by Linux Foundation with the goal of providing free and stable services for all developers to easily sign, verify and protect their software projects.\nWhile code signing is a valuable tool to prevent hackers from co-opting patching systems and delivering malware, it is difficult to implement in open source projects given the complexity of key management.\n\"Today's release of sigstore-python is an important milestone for the sigstore and Python communities,\" Bob Callaway, co-founder of the sigstore project and technical lead and manager of Google's Open Source Security Team, told SC Media.\n\"[Sigstore] is eager to continue working with the Python community on integrating sigstore-python into Python's packaging tools and infrastructure so that Python developers can reap the benefits of modern, transparent, digital signatures,\" Callaway added.",
        "keywords": [
            "open",
            "signing",
            "source",
            "code",
            "python",
            "client",
            "security",
            "certificate",
            "sigstore",
            "tool",
            "release",
            "sigstorepython",
            "implementation",
            "community",
            "announces",
            "stable"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiXmh0dHBzOi8vd3d3LmFuYWx5dGljc2luc2lnaHQubmV0L2dvbGFuZy12cy1weXRob24td2hpY2gtbGFuZ3VhZ2UtZG8teW91LW5lZWQtdG8tbGVhcm4taW4tMjAyMy_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "You are being redirected...",
        "description": "",
        "summary": "",
        "keywords": [
            "redirected"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMic2h0dHBzOi8vd3d3LnRlY2h0YXJnZXQuY29tL3NlYXJjaHNlY3VyaXR5L25ld3MvMjUyNTI1MjcyLzE1LXllYXItb2xkLVB5dGhvbi12dWxuZXJhYmlsaXR5LXBvc2VzLXN1cHBseS1jaGFpbi10aHJlYXTSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "15-year-old Python vulnerability poses supply chain threat",
        "description": "A 15-year-old Python vulnerability remains unpatched on hundreds of thousands of open source repositories, causing concern for supply chain risks, according to new research by Trellix.\n\nKasimir Schulz, a vulnerability researcher at Trellix's Advanced Research Center, rediscovered the directory traversal flaw that affects Python's tarfile module while researching another unrelated vulnerability. He detailed CVE-2007-4559, which was never properly patched, in a blog post Wednesday that emphasized how easy it is for attackers to exploit the flaw.\n\nFurther analysis of the known vulnerability, or \"N-day,\" presented a more urgent problem of potential supply chain issues. Python is a widely used open source programming language that has been targeted by threat actors in supply chain attacks previously, including an incident in May where malicious code was discovered in the \"ctx Python\" library.\n\nIf exploited, the Python vulnerability would give attackers the ability to overwrite files, which could lead to system access for Windows, Linux and Docker. Large companies such as Netflix, AWS and Facebook pull from libraries that use the vulnerable tarfile module. Schulz noted in his research the original CVE scored a 6.8. However, Trellix research confirmed that in most cases, an attacker can gain code execution, making the Python vulnerability more severe.\n\nAdditionally, Doug McKee, principal engineer and director of vulnerability research at Trellix, told TechTarget Editorial the potential for remote access attacks depends on each individual application. From its research, Trellix found that 12% of the tarfile vulnerabilities exist in the web space, so for that percentage, remote access is very likely. However, 17% of flaws were discovered in the artificial intelligence and machine learning space, which would require social engineering techniques.\n\nIn a video demonstration, Trellix showed how an attacker could exploit the Python vulnerability for remote code execution on Spyder IDE, an open source development environment for Python programming. Using Universal Radio Hacker, an open source tool used for wireless protocol analysis, Trellix researchers were able to exploit the vulnerable tarfile module in Spyder and commit several malicious actions to fully compromise the test environment.\n\n\"As we have demonstrated above, this vulnerability is incredibly easy to exploit, requiring little to no knowledge about complicated security topics,\" Schulz wrote in his report. \"Due to this fact and the prevalence of the vulnerability in the wild, Python's tarfile module has become a massive supply chain issue threatening infrastructure around the world.\"\n\nTrellix researchers demonstrates how to exploit the Python vulnerability remotely to compromise an instance of Spyder IDE, an open source development environment for Python programming.",
        "summary": "A 15-year-old Python vulnerability remains unpatched on hundreds of thousands of open source repositories, causing concern for supply chain risks, according to new research by Trellix.\nKasimir Schulz, a vulnerability researcher at Trellix's Advanced Research Center, rediscovered the directory traversal flaw that affects Python's tarfile module while researching another unrelated vulnerability.\nIf exploited, the Python vulnerability would give attackers the ability to overwrite files, which could lead to system access for Windows, Linux and Docker.\nHowever, Trellix research confirmed that in most cases, an attacker can gain code execution, making the Python vulnerability more severe.\nTrellix researchers demonstrates how to exploit the Python vulnerability remotely to compromise an instance of Spyder IDE, an open source development environment for Python programming.",
        "keywords": [
            "open",
            "python",
            "research",
            "tarfile",
            "vulnerability",
            "supply",
            "threat",
            "exploit",
            "module",
            "chain",
            "poses",
            "source",
            "15yearold",
            "trellix"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMidWh0dHBzOi8vd3d3LnN0cmFpdHN0aW1lcy5jb20vc2luZ2Fwb3JlL2Vudmlyb25tZW50L3JldGljdWxhdGVkLXB5dGhvbi1zd2FsbG93cy02a2ctcGV0LWNhdC1pbi10YW5haC1tZXJhaC1jb25kb21pbml1bdIBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Reticulated python swallows 6kg pet cat in Tanah Merah condominium",
        "description": "SINGAPORE - A reticulated python swallowed a pet cat roaming the condominium compound of its owner's house in Tanah Merah.\n\nTeacher Angel Low, 28, feared the worst when her cat, Ben, did not return home on Monday night, after she learnt that a reticulated python with a bulging belly had been caught earlier that day.\n\n\"Ben usually comes back when my mum calls him. We suspected that something was wrong when we saw the python's belly in a video shared by other residents and immediately contacted the Animal Concerns Research and Education Society (Acres), which had removed the snake,\" said Ms Low.\n\nHer three-year-old tabby cat weighed about 6kg, she said.\n\nTo her family's horror, they learnt the next day that the python had vomited their pet's carcass while the reptile was being transported to the Singapore Zoo.\n\nBut it was too late for them to retrieve the carcass, which was thrown out by staff.\n\n\"I wish they had been a bit more sensitive in handling the issue... especially when my cat had a collar,\" said Ms Low, who felt that the staff could have taken the trouble to find out if the cat belonged to someone.\n\nResponding to queries from The Straits Times, Mandai Wildlife Group and Acres said the python was taken to the group\u2019s animal hospital, which is the central processing point for all rescued pythons in Singapore.\n\nOn the way to the hospital, the snake regurgitated the cat, and when scanned at the hospital, the carcass had no microchip indicating its origin, they said.\n\n\u201cAcres made a call to the security officer to provide an update and was informed that no reports of a missing cat had been made up until then. After a discussion between the two organisations, the body was carefully disposed of, in accordance with the zoo\u2019s standard protocols for biosecurity,\u201d they added.\n\nFollowing the incident, the veterinary department at Mandai Wildlife Group is reviewing its processes to temporarily keep dead domestic animals taken to the hospital, they said.\n\nThis was the first time Ms Low and her family, who live in a three-storey house, had seen a snake at D'Manor since they moved into the estate more than 10 years ago.\n\nMs Low said they were surprised to see one as the condominium is not near any nature areas.\n\n\"My mum is devastated because she was very close to Ben, whom we've had since he was one week old. He was a very sweet cat that wouldn't hurt anyone and would cuddle up to us when we were upset.\"\n\n\"Every time we think about what happened, we still cry,\" she added.",
        "summary": "SINGAPORE - A reticulated python swallowed a pet cat roaming the condominium compound of its owner's house in Tanah Merah.\nTeacher Angel Low, 28, feared the worst when her cat, Ben, did not return home on Monday night, after she learnt that a reticulated python with a bulging belly had been caught earlier that day.\nOn the way to the hospital, the snake regurgitated the cat, and when scanned at the hospital, the carcass had no microchip indicating its origin, they said.\nMs Low said they were surprised to see one as the condominium is not near any nature areas.\nHe was a very sweet cat that wouldn't hurt anyone and would cuddle up to us when we were upset.\"",
        "keywords": [
            "6kg",
            "cat",
            "hospital",
            "taken",
            "tanah",
            "python",
            "pet",
            "ms",
            "snake",
            "carcass",
            "reticulated",
            "swallows",
            "merah",
            "low",
            "condominium",
            "singapore",
            "wildlife"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiKWh0dHBzOi8vd3d3LnNpdGVwb2ludC5jb20vd2hhdC1pcy1weXRob24v0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Beginners Guide: What Is Python And What Is It Used For? \u2014 SitePoint",
        "description": "In this article, we\u2019ll explain what Python is, what it can be used for, and why it\u2019s so popular.\n\nThere\u2019s an easy answer to the question of \u201cWhat Is Python?\u201d, which you could find on the first paragraph of its Wikipedia entry. But it won\u2019t tell you why Python consistently ranks as one of the most popular programming languages, or why it can be used for so many different things, and why it\u2019s so darn good at pretty much all of them.\n\nBut we want to answer those questions, so let\u2019s take a quick dive and explore what makes Python so unique, popular, and fun.\n\nAn Introduction to Python\n\nXKCD #353, \u201cPython\u201d\n\nIn a nutshell, Python is a high-level programming language that was created in 1991 by Guido van Rossum. It has since been released under an open-source license, making it freely available to anyone who\u2019d like to use or modify the software.\n\nPython is known for its ease of use, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java.\n\nPython Enhancement Proposals (PEPs)\n\nOne feature of Python that sets it apart from other programming languages is the inclusion of what are called \u201cPython Enhancement Proposals\u201d (PEPs). PEPs are documents that describe proposed changes to the language and provide a mechanism for community input on those proposals. Any member of the community can submit a PEP, which then goes through a process of discussion and refinement before being accepted or rejected by the core developers of Python.\n\nThis process ensures that new features added to the language are well-designed and have broad support within the community before being included in the main body of code for Python.\n\nThe Zen of Python\n\nOne such PEP is now legendary: \u201cPEP 20 \u2013 The Zen of Python\u201c, written by CPython core developer (the reference implementation of Python) Tim Peters.\n\nThe Zen of Python provides guidance on the design of the language and its associated libraries, stressing the importance of beauty, simplicity, and explicitness:\n\nBeautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!\n\nThe Pythonistas, the \u201cPythonic Way\u201d, and the Benevolent Dictator for Life\n\nOne of the most common questions asked by new Python programmers is \u201cWhat is the \u2018Pythonic Way\u2019 to do X?\u201d This usually refers to a particular way of solving a problem that makes use of the language\u2019s features in a particularly elegant or efficient manner.\n\nAnd while often there are multiple ways to accomplish any given task in Python, experienced Pythonistas often have strong opinions on what constitutes good code, and they\u2019re not shy about sharing those opinions! As Guido van Rossum, Python\u2019s benevolent dictator for life (BDFL), famously said: \u201cthere\u2019s only one way to do it, and that\u2019s why it works\u201d.\n\n<br>\n\nWhat Python Is Used For\n\nNow we\u2019ll look at the kinds of things Python is typically used for.\n\nWeb Development\n\nPython is often used for web development. Popular Python web frameworks include Django and Flask, and many large sites including Reddit and Instagram are built using Python.\n\nMachine Learning and Artificial Intelligence\n\nPython is super popular for machine learning and artificial intelligence in general, with packages such as TensorFlow and scikit-learn providing powerful tools for these purposes.\n\nAlso, many other popular machine learning libraries, such as Keras and PyTorch, are written in Python.\n\nData Science and Data Analysis\n\nPython is also prominently used in data science and data analysis. The pandas library provides powerful tools for working with tabular data, and the matplotlib library is a popular tool for creating visualizations of that data.\n\nJupyter, the notebook environment for Python, is also commonly used by data scientists for exploratory analysis and creating reproducible research.\n\nSoftware Testing\n\nPython is widely used in software testing. The unittest module is a built-in library that provides tools for this purpose, and the pytest framework is a popular third-party alternative to unittest. (Check out An Introduction to Python Unit Testing with unittest and pytest for more on these.)\n\nGame Development\n\nPython is also used in game development, with packages such as PyGame providing functionality for creating games and other graphical applications, and it\u2019s also often used for scripting within larger game engines such as Unity (docs and Unreal Engine 4 (docs).\n\nWhy Should You Learn Python Coding?\n\nLet\u2019s look at reasons why you should consider learning to code in Python.\n\nPython is Easy to Use\n\nPython is considered one of the easiest languages to learn. This is because Python code is very simple to read and follow, and it can be written in fewer lines than other languages. The language has a concise syntax that allows programmers to express concepts in fewer lines of code than would be possible in other languages. This means that newbies can quickly get up to speed with the basics of coding in Python, and experienced coders can save time by writing more efficient code.\n\nBut even though Python is easy to learn, be assured that it\u2019s also powerful enough to build professional-grade applications.\n\nPython Is Open-source\n\nAnyone can contribute to the development of Python, and there are no licensing fees associated with using or developing in this language.\n\nThis also means that there\u2019s a huge community of developers who are willing to help newbies get started, and who are always working on improving the language. And because it\u2019s open-source, you can be sure that there will always be free tools and libraries available for use with Python.\n\nWhy Is Python So Popular?\n\nPython is so versatile that it can be used for developing both desktop and web applications. It\u2019s easy to learn for beginners and has powerful libraries for data analysis and machine learning.\n\nActually, let\u2019s quickly review some of its key features:\n\nObject-oriented : code can be organized into classes and modules. This makes it easy to reuse code and create new libraries.\n\n: code can be organized into classes and modules. This makes it easy to reuse code and create new libraries. Interpreted : Python doesn\u2019t need to be compiled before it\u2019s run. This makes development faster and easier, as you don\u2019t need to wait for the compilation process to finish every time you make a change.\n\n: Python doesn\u2019t need to be compiled before it\u2019s run. This makes development faster and easier, as you don\u2019t need to wait for the compilation process to finish every time you make a change. High level : Python abstracts away many of the details of implementation (such as memory management) so that programmers can focus on the bigger picture.\n\n: Python abstracts away many of the details of implementation (such as memory management) so that programmers can focus on the bigger picture. Dynamic : variables can be created and destroyed at runtime. This makes development faster, as you don\u2019t need to declare variables in advance.\n\n: variables can be created and destroyed at runtime. This makes development faster, as you don\u2019t need to declare variables in advance. Multi-paradigm : including functional, procedural, and object-oriented. This makes it easy to switch between different styles of programming depending on the task at hand.\n\n: including functional, procedural, and object-oriented. This makes it easy to switch between different styles of programming depending on the task at hand. Portable: Python code can be run on any platform that supports the interpreter, making it easy to port code from one platform to another.\n\nSix Useful Python Tips\n\nLet\u2019s look at some tips for getting the best out of Python.\n\n1. Use proper indentation\n\nPython is very particular about indentation. All lines of code that should be run together must be indented the same amount, or Python will give you an error. This can be four spaces, or one tab, but whatever you choose, be consistent!\n\n2. Don\u2019t forget the colons\n\nAfter declaring a for loop or an if statement, don\u2019t forget to put a colon at the end of the line! Otherwise Python will give you an error.\n\n3. Use proper grammar in your variable names\n\nThis might seem like a nit-picky rule, but it actually makes your code much easier to read for other people (and for yourself, when you come back to it later!). Stick to using lowercase letters and underscores ( _ ) in your variable names, and try to make them descriptive of what the variable is storing.\n\n4. Use the built-in help function\n\nPython has a lot of functions and methods (pre-written code that you can call on to do certain tasks), and it can be overwhelming to try to remember all of them. That\u2019s what the help function is for! If you ever forget how a certain function works, or what arguments it takes, just type help(function_name) in your Python shell.\n\n5. Use and abuse the standard library\n\nThe standard library is a set of modules that are included with every new installation of Python. These modules provide a ton of functionality, and there\u2019s a good chance that whatever you\u2019re trying to do has already been implemented in the standard library.\n\n6. Join the community\n\nThere are many ways to get involved in the community, whether it\u2019s through reporting bugs or contributing new features via pull requests on GitHub, answering questions on Stack Overflow, or giving talks at conferences and meetups around the world.\n\nFinal Thoughts\n\nPython deserves every bit of the attention that it gets. It\u2019s a versatile language that you can use for developing desktop GUI applications and websites. You can also use Python for developing complex scientific and numeric applications. Python is designed with features to facilitate data analysis and visualization.\n\nAnd I\u2019ll say it again: not only will getting involved will make you better at Python (because you\u2019ll learn from other people), but it will also help make Python better for everyone else!\n\nReady to dive deeper? Here you have some Python courses on SitePoint:",
        "summary": "But we want to answer those questions, so let\u2019s take a quick dive and explore what makes Python so unique, popular, and fun.\nPython Enhancement Proposals (PEPs)One feature of Python that sets it apart from other programming languages is the inclusion of what are called \u201cPython Enhancement Proposals\u201d (PEPs).\n<br>What Python Is Used ForNow we\u2019ll look at the kinds of things Python is typically used for.\nPopular Python web frameworks include Django and Flask, and many large sites including Reddit and Instagram are built using Python.\nAnd I\u2019ll say it again: not only will getting involved will make you better at Python (because you\u2019ll learn from other people), but it will also help make Python better for everyone else!",
        "keywords": [
            "code",
            "beginners",
            "python",
            "development",
            "popular",
            "sitepoint",
            "guide",
            "easy",
            "better",
            "languages",
            "used",
            "makes",
            "language"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiRGh0dHBzOi8vd3d3LmtkbnVnZ2V0cy5jb20vMjAyMi8xMS81LXdheXMtZmlsdGVyaW5nLXB5dGhvbi1saXN0cy5odG1s0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "5 Ways of Filtering Python Lists",
        "description": "Filter the list elements using for loop, list comprehension, regex, filter(), and lambda functions.\n\n\n\nImage by Author\n\nIn this quick tutorial, you will learn 5 simple ways to filter the list elements. It is not limited to data folks, even web developers and software engineers use it on a daily basis. In short, filtering the list is the basic functionality that every Python programmer should learn at the beginning.\n\n1. Using for Loop\n\nBy using the for loop and if-else statements, we will iterate over the list and select the elements that fit the specific condition. In our case, we will filter out the profits that are greater than or equal to 100.\n\nBy using this method, we are creating a new list and adding the filtered value to the new list. It is a simple, but not efficient way of filtering the list.\n\nprofits = [200, 400, 90, 50, 20, 150] filtered_profits = [] for p in profits: if p >= 100: filtered_profits.append(p) print(filtered_profits)\n\n[200, 400, 150]\n\n2. List Comprehension\n\nList comprehension is a smart way of using for-loop and if-else conditions on lists. You can translate method one into a single line of code. It is clean.\n\nIn our case, we are running the loop over all of the list elements and selecting the score that is greater than or equal to 150.\n\nIt is easy to write, and you can even add multiple if-else conditions without an issue.\n\nLearn list comprehension with code examples by reading When to Use a List Comprehension in Python.\n\nscores = [200, 105, 18, 80, 150, 140] filtered_scores = [s for s in scores if s >= 150] print(filtered_scores)\n\n[200, 150]\n\n3. Pattern Matching\n\nTo filter the string list, we will use `re.match()`. It requires the string pattern and the string.\n\nIn our case, we are using lists comprehension to filter out the names that start with \u201cN\u201d by providing a regex pattern of \u201cN.*\u201d to `re.match()`.\n\nYou can learn, build, and test regex patterns by visiting regex101.\n\nimport re students = [\"Abid\", \"Natasha\", \"Nick\", \"Matthew\"] # regex pattern pattern = \"N.*\" # Match the above pattern using list comprehension filtered_students = [x for x in students if re.match(pattern, x)] print(filtered_students)\n\n['Natasha', 'Nick']\n\n4. Using filter() Method\n\nThe `filter()` is a built-in Python function to filter list items. It requires a filter function and list `filter(fn, list)`.\n\nIn our case, we will create a filter_height function. It returns True when height is less than 150 else False.\n\nAfter that, we will apply the filter_height function to the list using the `filter()` function, and in return, we get an iterator of filtered elements. You can either use a loop to extract all of the elements or convert it into a list using the `list(<iter>)` function.\n\ndef filter_height(height): if (height < 150): return True else: return False heights = [140, 180, 165, 162, 145] filtered_heights = filter(filter_height, heights) print(list(filtered_heights))\n\n[140, 145]\n\n5. Using Lambda Function\n\nYou can convert method four (filter() Method) into a single line by using lambda function.\n\nInstead of creating a filter_age function separately, we can write the condition within the `filter()` function using lambda.\n\nIn our case, we are filtering the age that is greater than 50 and converting the filtered iterator into the list.\n\nLearn more about lambda functions by following the Python Lambda tutorial.\n\nages = [20, 33, 44, 66, 78, 92] filtered_ages = filter(lambda a: a > 50, ages) print(list(filtered_ages))\n\n[66, 78, 92]\n\n\n\n\n\nAbid Ali Awan (@1abidaliawan) is a certified data scientist professional who loves building machine learning models. Currently, he is focusing on content creation and writing technical blogs on machine learning and data science technologies. Abid holds a Master's degree in Technology Management and a bachelor's degree in Telecommunication Engineering. His vision is to build an AI product using a graph neural network for students struggling with mental illness.\n\n",
        "summary": "Image by AuthorIn this quick tutorial, you will learn 5 simple ways to filter the list elements.\nLearn list comprehension with code examples by reading When to Use a List Comprehension in Python.\nUsing filter() MethodThe `filter()` is a built-in Python function to filter list items.\nUsing Lambda FunctionYou can convert method four (filter() Method) into a single line by using lambda function.\nInstead of creating a filter_age function separately, we can write the condition within the `filter()` function using lambda.",
        "keywords": [
            "list",
            "pattern",
            "filter",
            "function",
            "elements",
            "python",
            "lists",
            "filtering",
            "case",
            "comprehension",
            "using",
            "ways",
            "lambda",
            "150"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiP2h0dHBzOi8vbWFzaGFibGUuY29tL3VrL2RlYWxzL2ZyZWUtb25saW5lLXB5dGhvbi1jb2RpbmctY291cnNlc9IBAA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "5 of the best free Python courses available this week",
        "description": "Deal pricing and availability subject to change after time of publication. Learn more about how we select deals\n\nFREE COURSES: A wide range of online Python courses(Opens in a new tab) are available for free on Udemy. You can enroll for free without a voucher code.\n\nSavvy shoppers will look at something offered for free and immediately search for the catch. We totally get this reaction, because we're exactly the same. Generally speaking, a freebie will come with restrictions that make it unusable or an automatic renewal that ties you into a contract.\n\nThat's not the case with the free online courses available on Udemy. You can learn a valuable skill without spending a penny, and whilst you don't get things like a certificate of completion or direct messaging with the instructor, you can still learn at your own pace with online video content.\n\nWe've checked out everything on offer on Udemy, and lined up a standout selection of free online coding and programming courses covering Python.\n\nThese are the best free online Python courses this week:\n\nYou don't need a voucher code to access these coding courses for free. You can simply enroll and start learning at your own pace. What's stopping you from giving these courses a go?\n\nFind the best free online Python courses on Udemy.",
        "summary": "Learn more about how we select dealsFREE COURSES: A wide range of online Python courses(Opens in a new tab) are available for free on Udemy.\nThat's not the case with the free online courses available on Udemy.\nWe've checked out everything on offer on Udemy, and lined up a standout selection of free online coding and programming courses covering Python.\nThese are the best free online Python courses this week:You don't need a voucher code to access these coding courses for free.\nFind the best free online Python courses on Udemy.",
        "keywords": [
            "online",
            "voucher",
            "python",
            "enroll",
            "best",
            "week",
            "courses",
            "pace",
            "learn",
            "dont",
            "available",
            "udemy",
            "free"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiMmh0dHBzOi8vd3d3LmNyb3dkc3RyaWtlLmNvbS9ndWlkZXMvcHl0aG9uLWxvZ2dpbmcv0gEA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python Logging Guide: The Basics",
        "description": "Once your Python programs grow beyond basic scripts run from a command line, using print() statements for logging becomes a difficult practice to scale. Using print() logging modules enable you to better control where, how, and what you log, with much more granularity. As a result, you can reduce debugging time, improve code quality, and increase the visibility of your infrastructure.\n\nTo help you get up to speed with Python logging, we\u2019re creating a multi-part guide to cover what you need to know to make your Python logging efficient, useful, and scalable. To get the most out of this guide, you should be comfortable with basic Python programming and understand general logging best practices.\n\nIn part one of our overview on Python logging, we\u2019ll introduce you to the default logging module and log levels, and we\u2019ll walk through basic examples of how you can get started with Python logging.\n\nLearn More Explore the complete Python Logging Guide series: Part 1: The Basics\n\nPart 2: Advanced Concepts\n\nPart 3: Centralized Python Logs\n\nPython\u2019s default logging module\n\nThe first step in understanding Python logging is familiarizing yourself with the default logging module, which is included with Python\u2019s standard library. The default logging module provides an easy-to-use framework for emitting log messages in a Python program. It\u2019s simple enough that you can hit the ground running in a few minutes and extensible enough to cover a variety of use cases.\n\nWith the default Python logging module, you can:\n\nCreate custom log messages with timestamps\n\nEmit logs to different destinations (such as the terminal, syslog, or systemd)\n\nDefine the severity of log messages\n\nFormat logs to meet different requirements\n\nReport error suppression without throwing an exception\n\nCapture the source of log messages\n\nHow does Python\u2019s default logging module work?\n\nAt a high level, Python\u2019s default logging module consists of these components:\n\nLoggers expose an interface that your code can use to log messages.\n\nexpose an interface that your code can use to log messages. Handlers send the logs created by loggers to their destination. Popular handlers include: FileHandler: For sending log messages to a file StreamHandler: For sending log messages to an output stream like stdout SyslogHandler: For sending log messages to a syslog daemon HTTPHandler: For sending log messages with HTTP\n\nsend the logs created by loggers to their destination. Popular handlers include: Filters provide a mechanism to determine which logs are recorded.\n\nprovide a mechanism to determine which logs are recorded. Formatters determine the output formatting of log messages.\n\nTo use the default logger, just add import logging to your Python program, and then create a log message.\n\nHere\u2019s a basic example that uses the default logger (also known as the root logger):\n\nRunning that code will print this message to the console:\n\nWARNING:root:You are learning Python logging!\n\nIn that example, we can see the default message format is as follows:\n\n<SEVERITY>:<NAME>:<MESSAGE>\n\n<NAME> is the name of our logger.\n\nIn many cases, we\u2019ll want to modify how messages are formatted. We can call basicConfig() at the beginning of our code to customize formatting for the root logger.\n\nFor example, suppose we want to add a timestamp to our message. We can add %(asctime)s to a basicConfig() format call. To retain the rest of our original formatting, we\u2019ll also need to include %(levelname)s:%(name)s:%(message)s .\n\nOur resulting code will look like this:\n\n# Import the default logging module import logging # Format the log message logging.basicConfig(format='%(asctime)s %(levelname)s:%(name)s:%(message)s') # Emit a warning message logging.warning('You are learning Python logging!')\n\nThe output should look similar to the following:\n\n2022-11-11 11:11:51,994 WARNING:root:You are learning Python logging!\n\nCreating a custom logger\n\nWhat if we don\u2019t want to use the root logger?\n\nIn that case, we can create our own logger by setting a logger = value and defining the settings of our logger (remember, basicConfig() is only for the root logger). For example, the script below creates a HumioDemoLogger set to log INFO-level messages with the same formatting as our previous example.\n\n# Import the default logging module import logging # Create our demo logger logger = logging.getLogger('HumioDemoLogger') # Set a log level for the logger logger.setLevel(logging.INFO) # Create a console handler handler = logging.StreamHandler() # Set INFO level for handler handler.setLevel(logging.INFO) # Create a message format that matches earlier example formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # Add our format to our handler handler.setFormatter(formatter) # Add our handler to our logger logger.addHandler(handler) # Emit an INFO-level message logger.info('Python logging is cool!')\n\nWhen you run the script, the output should look similar to the following:\n\n2022-11-11 11:11:38,525 - HumioDemoLogger - INFO - Python logging is cool!\n\nPython logging levels\n\nIf you\u2019re familiar with the Syslog protocol, the idea of logging levels and log severity should be intuitive. In short, log messages generally include a severity that indicates the importance of the message.\n\nThere are six default severities with the default Python logging module. Each default severity is associated with a number, and a higher numeric value indicates a more severe logging level. The table below describes each of the default logging levels.\n\nDefault Python logging levels\n\nLevel Numeric Value Description Critical 50 Highest severity messages; may cause a program to crash or exit. Error 40 High severity messages generally related to an operation failing that does not cause the program to crash or exit. Warning 30 Potentially negative events that may cause abnormal operation or otherwise require attention (such as the use of a deprecated API). Info 20 Messages that log standard/expected events. Debug 10 Messages useful for debugging how an application is running. Notset 0 Default level when a new logger is created. Setting the root logger to NOTSET logs all messages. For other loggers, NOTSET messages are delegated to parent loggers until a level other than NOTSET is found.\n\nExpert Tip Avoid creating custom log levels. You can define your own custom log levels, and that\u2019s where the numeric values come in. The higher the numeric value of your custom log level, the more severe it is. For example, a value of 60 is treated as more severe than CRITICAL-level messages and a value of 35 would be between INFO and WARNING in severity. However, it\u2019s usually not necessary to create custom levels, and the official Python docs make that clear. We recommend sticking to the defaults. It\u2019s important to understand that the logger will log everything at or above the severity it is set to. The default configuration is set to log WARNING-level messages, so let\u2019s see what happens when we create a message with a severity of INFO.",
        "summary": "To help you get up to speed with Python logging, we\u2019re creating a multi-part guide to cover what you need to know to make your Python logging efficient, useful, and scalable.\nIn part one of our overview on Python logging, we\u2019ll introduce you to the default logging module and log levels, and we\u2019ll walk through basic examples of how you can get started with Python logging.\nLearn More Explore the complete Python Logging Guide series: Part 1: The BasicsPart 2: Advanced ConceptsPart 3: Centralized Python LogsPython\u2019s default logging moduleThe first step in understanding Python logging is familiarizing yourself with the default logging module, which is included with Python\u2019s standard library.\nOur resulting code will look like this:# Import the default logging module import logging # Format the log message logging.basicConfig(format='%(asctime)s %(levelname)s:%(name)s:%(message)s') # Emit a warning message logging.warning('You are learning Python logging!')\nPython logging levelsIf you\u2019re familiar with the Syslog protocol, the idea of logging levels and log severity should be intuitive.",
        "keywords": [
            "messages",
            "default",
            "logs",
            "logger",
            "basics",
            "logging",
            "python",
            "guide",
            "severity",
            "module",
            "log",
            "message"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiNGh0dHBzOi8vbW90aGVyc2hpcC5zZy8yMDIzLzAyL3B5dGhvbi1udHUtZm9vZC1jb3VydC_SAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python curls up into a ball, snoozing right outside NTU food court",
        "description": "A reticulated python was found right by the food court in Nanyang Technological University's (NTU) North Spine Plaza recently.\n\nFrom a video posted online, it appeared to curl up into a ball around a water pipe near the glass roof.\n\nNTU called for pest control to \"remove\" the python\n\nResponding to Mothership's enquiries, an NTU spokesperson said that the school was alerted to the snake at about 2pm on Jan.\n\nThe campus security responded to a call regarding a snake at the North Spine.\n\nFollowing which, a pest control team was dispatched and attempted to \"remove\" the snake with an extended grabber.\n\nA student from the environmental group in NTU, Earthlink NTU, said that he was at the scene for around 30 minutes before the python was taken away by the team.\n\n\"...Reticulated pythons are nocturnal and this python might have chosen that area to rest,\" he commented.\n\nAfter repeated unsuccessful attempts to secure the python, the reptile crawled onto an adjacent ledge in its attempt to escape.\n\nThe python was \"repeatedly nudged\" by the grabber and it \"fell down a considerable drop\" which gave the pest control team the chance to capture the snake, the student recounted to Mothership.\n\nThe school confirmed that the team caught the snake and claimed it was later handed over to NParks' Animal and Veterinary Service.\n\nThe NTU spokesperson added:\n\n\"Students are advised not to approach any wildlife and to call campus security if they require assistance.\"\n\nAcres urged NTU to review the SOP on handling wild animals\n\nOn Jan. 6, the Animal Concerns Research and Education Society (Acres) received a call to rescue the python via their hotline, Kalai Vanan, Co-Chief Executive of Acres, told Mothership.\n\nHowever, they were informed that someone else was already doing it.\n\nKalai said that the pest control team called by NTU was not the best option in this case, as \"there are different techniques that can be used to safely rescue snakes in different situations\".\n\nAfter taking a look at the video of the team rescuing the snake, he added that \"it clearly shows that the team did not consider possible outcomes when trying to catch the snake\".\n\n\"Wild animals should be handled by people with the proper training. Apart from training, compassion and respect for animals is important.\"\n\nKalai also urged NTU to review their standard of practice (SOP) on who should be called in to handle wild animals as well.\n\nThe python was not posing any danger to anyone at that point. It could have been monitored till it moved to a location where it can be captured more easily as opposed to doing a \"force capture\" which can hurt the animal in the process, Kalai explained.\n\n\"The school should have called Acres or NParks,\" Kalai said.\n\n\"Snakes are not pests and as an educational institution, they should strive to send proper messaging to the public and students,\" he added.\n\nWhat to do when you encounter a snake?\n\nIf you ever encounter a snake, the first step is to remain calm and slowly move away from the snake.\n\nKeep a safe distance from the snake (at least two metres) and do not attempt to handle it on your own.\n\nThe snake will not attack unless it feels provoked.\n\nIf you find yourself in a similar situation, you can call Acres at 9783 7782 or NParks' Animal Response Centre at 1800 476 1600 for assistance.\n\nFor more information, you can visit NParks's advisory or Acres's advisory on snake encounters.\n\nTop images via pale.nerves and zhou_ze_yang/TikTok.",
        "summary": "A reticulated python was found right by the food court in Nanyang Technological University's (NTU) North Spine Plaza recently.\nNTU called for pest control to \"remove\" the pythonResponding to Mothership's enquiries, an NTU spokesperson said that the school was alerted to the snake at about 2pm on Jan.\nFollowing which, a pest control team was dispatched and attempted to \"remove\" the snake with an extended grabber.\nA student from the environmental group in NTU, Earthlink NTU, said that he was at the scene for around 30 minutes before the python was taken away by the team.\nKalai said that the pest control team called by NTU was not the best option in this case, as \"there are different techniques that can be used to safely rescue snakes in different situations\".",
        "keywords": [
            "acres",
            "court",
            "pest",
            "outside",
            "ntu",
            "python",
            "snake",
            "team",
            "control",
            "animal",
            "called",
            "curls",
            "school",
            "right",
            "ball",
            "snoozing",
            "food"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiMWh0dHBzOi8vbWFzaGFibGUuY29tL2RlYWxzL2phbi0yMC1weXRob24tdHJhaW5pbmfSAQA?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Learn to code with 100+ hours of Python training for $40",
        "description": "TL;DR: The 2023 Premium Python Programming Mega Certification Bundle(Opens in a new tab) is on sale for $40 \u2014 that's less than 3 bucks per course.\n\nIf you want to learn to code, Python may be the place to start. Python is still the most popular coding language(Opens in a new tab) in the world, and you can essentially teach it to yourself on your own time. The 2023 Premium Python Programming Mega Certification Bundle gives you lifetime access to 14 courses and over 100 hours of instruction on the fundamentals of Python 3(Opens in a new tab) and all the useful things you can do with it. For a limited time, this Python study bundle is on sale for $40.\n\nPython is an excellent programming language for beginners\n\nWhether Python is your first coding language or you\u2019re adding it to the pile of others you\u2019ve mastered, this bundle should have a place for you to start. Total beginners will appreciate the simple syntax that makes Python easy(Opens in a new tab) to pick up on. Students can learn about the foundations in Learn to Code with Python 3 or the Easiest Python for Beginners Course.\n\nNick Walter(Opens in a new tab) leads the latter and breaks down writing code into 35 lectures and four hours of content. Learners can see how Python functions and how a programmer can use it to solve technical and mathematical problems or to build their own simple programs(Opens in a new tab).\n\nGo from beginner to intermediate programmer and start learning new ways to use Python. Some lessons guide you through building a medical bot, programming a chat app, and performing complex math operations.\n\nPython is a versatile language. It can be used for everything from accounting to game design, and this bundle has courses related to both. Learn to create data visualization web apps in Data Visualization on the Browser with Python and Bokeh, or you can cut loose and program your own digital escape room.\n\nLearn Python 3 with self-paced courses\n\nThere may be a lot to study and practice before you master Python, but these courses could make it manageable. Get the 2023 Premium Python Programming Mega Certification Bundle(Opens in a new tab) on sale for $40 (reg. $2,798).\n\nPrices subject to change.",
        "summary": "TL;DR: The 2023 Premium Python Programming Mega Certification Bundle(Opens in a new tab) is on sale for $40 \u2014 that's less than 3 bucks per course.\nIf you want to learn to code, Python may be the place to start.\nStudents can learn about the foundations in Learn to Code with Python 3 or the Easiest Python for Beginners Course.\nLearn Python 3 with self-paced coursesThere may be a lot to study and practice before you master Python, but these courses could make it manageable.\nGet the 2023 Premium Python Programming Mega Certification Bundle(Opens in a new tab) on sale for $40 (reg.",
        "keywords": [
            "training",
            "start",
            "mega",
            "programming",
            "code",
            "sale",
            "tab",
            "python",
            "40",
            "premium",
            "learn",
            "100",
            "bundle",
            "language",
            "hours"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMieWh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL3Byb2dyYW1taW5nLWxhbmd1YWdlcy1ob3ctYS10ZWFtLW9mLWRldmVsb3BlcnMtYXQtbWljcm9zb2Z0LWFyZS1oZWxwaW5nLW1ha2UtcHl0aG9uLWZhc3Rlci_SAYQBaHR0cHM6Ly93d3cuemRuZXQuY29tL2dvb2dsZS1hbXAvYXJ0aWNsZS9wcm9ncmFtbWluZy1sYW5ndWFnZXMtaG93LWEtdGVhbS1vZi1kZXZlbG9wZXJzLWF0LW1pY3Jvc29mdC1hcmUtaGVscGluZy1tYWtlLXB5dGhvbi1mYXN0ZXIv?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Programming languages: How a team of developers at Microsoft are helping make Python faster",
        "description": "Image: Shutterstock\n\nPython is arguably the most popular programming language in the world thanks to machine learning, but its big weakness is performance: it needs high-end hardware, often leans on graphics cards, doesn't run in the browser, like JavaScript, and has almost no story in mobile.\n\nFor the past few years, Microsoft has been contributing to Faster Python, a project kicked off by Python creator Guido van Rossum in 2021, shortly after Microsoft hired him as a distinguished engineer, changing his previous plan to retire.\n\nThe Python creator wanted the language to be more nimble than the lumbering giant it is. Van Rossum wanted it to be twice as fast but Mark Shannon, one of the key contributors to CPython (or Core Python), penned an implementation plan in 2020 for speeding up CPython by five times. Core Python is the reference implementation of Python that other variants are based on, like data science-focussed Anaconda.\n\nPython's popularity can be attributed to the vast ecosystem of packages, like NumPy, and frameworks, like PyTorch, that help number-crunching and data-analysis processes, but those packages, as Microsoft notes, are written mostly in C. Python is an interpreted language versus C and C++, which are compiled languages. As such, CPython relies on C to interpret Python code.\n\nAlso: Salary freezes and a return to the office? Not for software developers\n\nMicrosoft hired a team of six engineers along with Van Rossum to deliver the performance improvements via CPython. It's now detailed how it sees those investments translate into benefits for CPython, whose contributors are mostly volunteers \u2014 typically skilled engineers who have other jobs \u2014 but now benefit from Mictosoft's Python hires.\n\nMicrosoft showcases the work of staffers Eric Snow, L Pereira, Irit Katriel, Michael Droettboom, and Brandt Bucher, who all helped deliver performance improvements across Python 3.10 and 3.11, which Microsoft claims has seen speedups of between 10% to 60% in some areas of the language.\n\nSnow has been working on sub-interpreters, while Atrial has implemented the new Exception groups and except* features in 3.11. Bucher helped create structural pattern matching.\n\nMicrosoft seems cautious to avoid the perception it has an agenda for Python, and is perhaps aware of skepticism among developers due to its past attitude towards Linux and open source.\n\n\"How do we make sure we're showing up to the Python community as helpful, not driving an agenda or any of those kinds of things,\" says Droettboom.\n\n\"Because what we are doing is kind of risky. There has probably been a higher frequency of unintended consequences and bugs that have come about because we are changing how the core works. It's really important that the team supports the community to keep quality up.\"\n\nAlso: Recruiting tech workers is getting harder. But there's another way to get the right skills\n\nQuestions still come up about Microsoft's motivations in open source, but the company has embraced it more purposefully now that Azure and Microsoft 365 and more tightly aligned with the cloud.\n\nSnow apparently spends 20% of his time at Microsoft working on CPython. Katriel says she has been able to focus on performance thanks to Microsoft hiring her and working with Van Rossum.\n\n\"Joining the Faster CPython team did change my focus towards performance. In that sense my focus did change, but there was continuity in that I did some work on performance of exceptions. By simplifying the interpreter's internal representation of raised exceptions, I reduced the time it takes to raise and catch an exception by about 10%. In another project, I made the compiler emit the code of except blocks in a separate area, so that they don't need to be jumped over in the case that no exception is raised,\" she said.\n\nVan Rossum also likes the consistency of working as a team on a regular basis rather than dealing with big changes after the bi-annual conference.\n\n\"All six of us meet every Monday,\" says Van Rossum. \"There's always more than enough to talk about. That is very different than as a core dev community getting together for a Sprint twice a year, like one day after the conference. That is a very special event, of course, but it doesn't feed me throughout the year.\"\n\nVan Rossum believes that knowledge of one another and their collaborative work gives the team a \"leg up\" because everyone \"knows what communication styles people have and what everybody's weaknesses and strengths are.\"\n\n\"As a core (Python dev) team across the whole community, we collaborate pretty well,\" says Snow. He's been a core developer for over a decade and \"having a number of core devs working on the same stuff in CPython that are within the company, there's a little better accessibility\u2026the degree of collaboration is a bit more solid.\"",
        "summary": "Core Python is the reference implementation of Python that other variants are based on, like data science-focussed Anaconda.\nNot for software developersMicrosoft hired a team of six engineers along with Van Rossum to deliver the performance improvements via CPython.\n\"How do we make sure we're showing up to the Python community as helpful, not driving an agenda or any of those kinds of things,\" says Droettboom.\nKatriel says she has been able to focus on performance thanks to Microsoft hiring her and working with Van Rossum.\n\"As a core (Python dev) team across the whole community, we collaborate pretty well,\" says Snow.",
        "keywords": [
            "programming",
            "helping",
            "van",
            "performance",
            "microsoft",
            "python",
            "team",
            "faster",
            "languages",
            "cpython",
            "community",
            "core",
            "working",
            "rossum",
            "developers"
        ]
    },
    {
        "url": "https://news.google.com/articles/CBMiTmh0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjY5MjMyL3B5dGhvbi1wb3B1bGFyaXR5LXN0aWxsLXNvYXJpbmcuaHRtbNIBUmh0dHBzOi8vd3d3LmluZm93b3JsZC5jb20vYXJ0aWNsZS8zNjY5MjMyL3B5dGhvbi1wb3B1bGFyaXR5LXN0aWxsLXNvYXJpbmcuYW1wLmh0bWw?hl=en-SG&gl=SG&ceid=SG%3Aen",
        "title": "Python popularity still soaring",
        "description": "Nearly a year after Python first topped Tiobe\u2019s index of programming language popularity, the language continues to score high with developers.\n\nIn the just-published August 2022 rankings, Python once again topped the chart as the most popular programming language, gaining two percentage points since last month to register a 15.42% market share, an all time high for the language. Python first took the top spot in the index last October, becoming the only language besides Java and C to hold the No. 1 position.\n\n\u201cPython seems to be unstoppable,\u201d said the Tiobe commentary accompanying the August index. The Tiobe index is based on a formula that assesses the results of searches on the languages in leading search engines such as Google, Yahoo, and Bing and websites such as Wikipedia.\n\n\u201cIt is hard to find a field of programming in which Python is not used extensively nowadays. The only exception is (safety-critical) embedded systems because of Python being dynamically typed and too slow,\u201d Tiobe\u2019s commentary noted. C and C++, meanwhile, are being leveraged for embedded systems, said Tiobe, which provides software quality management services.\n\nIn other Tiobe index results for August, Rust ranked No. 22, closing in on the top 20, while Carbon, recently unveiled as a potential successor to C++, entered the index at 192.\n\nThe top 10 rankings for the Tiobe index for August were:\n\nPython, 15.42% share C, 14.59% Java, 12.4% C++, 10.17% C#, 5.59% Visual Basic, 4.99% JavaScript, 2.33% Assembly, 2.17% SQL, 1.7% PHP, 1.39%\n\nIn the alternative Pypl Popularity of Programming Language index, which assesses language popularity based on Google searches of programming language tutorials, the top 10 rankings for August were:",
        "summary": "Nearly a year after Python first topped Tiobe\u2019s index of programming language popularity, the language continues to score high with developers.\nPython first took the top spot in the index last October, becoming the only language besides Java and C to hold the No.\n\u201cIt is hard to find a field of programming in which Python is not used extensively nowadays.\nThe only exception is (safety-critical) embedded systems because of Python being dynamically typed and too slow,\u201d Tiobe\u2019s commentary noted.\nIn other Tiobe index results for August, Rust ranked No.",
        "keywords": [
            "rankings",
            "index",
            "programming",
            "tiobes",
            "soaring",
            "python",
            "c",
            "topped",
            "tiobe",
            "language",
            "popularity"
        ]
    }
]